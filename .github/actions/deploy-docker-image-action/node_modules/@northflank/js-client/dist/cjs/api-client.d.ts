/// <reference types="node" />
import { EventEmitter } from 'events';
import { Response } from 'node-fetch';
import * as stream from 'stream';

declare type Optional<T, K extends keyof T> = Omit<T, K> & Partial<T>;
declare abstract class ApiClientContextProvider {
    private contextWrapper;
    constructor();
    protected loadContext(): void;
    getInfo(): string;
    storeContext(contextWrapper: ApiClientContextWrapper): Promise<void>;
    addContext(context: Optional<ApiClientContext, 'host'>, override?: boolean): Promise<void>;
    removeContext(name: string): Promise<void>;
    protected abstract writeContext(context: ApiClientContextWrapper): Promise<void>;
    abstract loadContextWrapper(): ApiClientContextWrapper;
    getCurrentContext(): ApiClientContext | undefined;
    private findContext;
    getCurrentBaseUrl(throwIfNotPresent?: boolean): string | undefined;
    getCurrentProjectName(): string | undefined;
    getCurrentName(): string | undefined;
    getCurrentToken(): string | undefined;
    getCurrentServiceName(): string | undefined;
    getCurrentJobName(): string | undefined;
    getCurrentPlanId(): string | undefined;
    getCurrentRegion(): string | undefined;
    useContext(name: string): Promise<void>;
    updateToken(token: string, name?: string): Promise<void>;
    useProjectId(id: string): Promise<void>;
    useServiceId(id: string): Promise<void>;
    useJobId(id: string): Promise<void>;
    usePlanId(id: string): Promise<void>;
    useRegion(region: string): Promise<void>;
    getLastUpdateCheck(): Date;
    setLastUpdateCheck(check: Date): Promise<any>;
}
interface ApiClientContextWrapper {
    current?: string;
    contexts: ApiClientContext[];
    lastUpdateCheck?: Date;
}
interface ApiClientContext {
    name: string;
    token: string;
    host: string;
    project?: string;
    service?: string;
    job?: string;
    plan?: string;
    region?: string;
}

declare type PortForwardingInfo = {
    type: 'addon' | 'service';
    projectId: string;
    id: string;
    address: string;
    port: number;
    portName?: string;
    protocol?: 'HTTP' | 'TCP' | 'UDP';
    hostnames: string[];
};
interface PortTunnel extends EventEmitter {
    readonly bindTo?: {
        address: string;
        port: number;
    };
    readonly protocol: 'TCP' | 'UDP';
    on(event: 'tunnel-open', listener: ({ address: string, port: number }: {
        address: any;
        port: any;
    }) => any): any;
    on(event: 'tunnel-close', listener: () => any): any;
    on(event: 'connection-accept', listener: () => any): any;
    on(event: 'connection-close', listener: () => any): any;
    on(event: 'connection-error', listener: (error: any) => any): any;
    open(): Promise<{
        address: string;
        port: number;
    }>;
    close(): Promise<void>;
}

declare class ApiClientFileContextProvider extends ApiClientContextProvider {
    configPath: string;
    configFile: string;
    constructor(configPath?: string);
    loadContextWrapper(): ApiClientContextWrapper;
    protected writeContext(context: ApiClientContextWrapper): Promise<void>;
    assertDir: (path: string) => Promise<string | undefined>;
    assertConfigDir(): Promise<void>;
    getInfo(): string;
}

declare class ApiClientInMemoryContextProvider extends ApiClientContextProvider {
    private inMemoryContextWrapper;
    loadContextWrapper(): ApiClientContextWrapper;
    protected writeContext(context: ApiClientContextWrapper): Promise<void>;
}

declare type ApiCallError = {
    /** Http status response code */
    status: number;
    /** Error message */
    message: string;
    /** Northflank error id */
    id?: string;
    /** Error details */
    details?: any;
};
interface ApiCallResponse<R> {
    data: R;
    rawResponse: Response;
    request: {
        url: string;
        method: string;
        headers: any;
        body: any;
    };
    error?: ApiCallError;
    pagination?: {
        /** Is there another page of results available? */
        'hasNextPage': boolean;
        /** The cursor to access the next page of results. */
        'cursor'?: string;
        /** The number of results returned by this request. Example: 1 */
        'count': number;
    };
}
declare abstract class ApiEndpoint<T, R> {
    protected readonly opts: ApiClientOpts;
    protected contextProvider: ApiClientContextProvider;
    abstract description: string;
    abstract method: string;
    abstract body(opts: T): any;
    abstract endpointUrl(opts: T): string;
    abstract withAuth: boolean;
    constructor(contextProvider: ApiClientContextProvider, opts: ApiClientOpts);
    private getDefaultHeaders;
    call: (opts: T) => Promise<ApiCallResponse<R>>;
}
declare abstract class GetApiEndpoint<T, R> extends ApiEndpoint<T, R> {
    method: string;
    body: () => undefined;
    abstract endpointUrl(opts: T): string;
    abstract withAuth: boolean;
}
declare abstract class PostApiEndpoint<T, R> extends ApiEndpoint<T, R> {
    method: string;
    abstract body(opts: T): any;
    abstract endpointUrl(opts: T): string;
    abstract withAuth: boolean;
}
declare abstract class DeleteApiEndpoint<T, R> extends ApiEndpoint<T, R> {
    method: string;
    body: () => undefined;
    abstract endpointUrl(opts: T): string;
    abstract withAuth: boolean;
}

declare type ListServicesResult = {
    /** An array of services. */
    'services': {
        /** Identifier for the service Example: "example-service" */
        'id': string;
        /** Full identifier used for service deployment Example: "/example-user/default-project/example-service" */
        'appId': string;
        /** ID of the project the service belongs to. Example: "default-project" */
        'projectId': string;
        /** Service name Example: "Example Service" */
        'name': string;
        /** A short description of the service Example: "This is the service description" */
        'description'?: string;
        /** Type of the service (combined, build or deployment) Example: "combined" */
        'serviceType': 'combined' | 'build' | 'deployment';
        /** Whether Continuous Integration is disabled */
        'disabledCI': boolean;
        /** Whether Continuous Deployment is disabled */
        'disabledCD': boolean;
        /** Details about the current service status. */
        'status': {
            /** Details about the status of the most recent build. */
            'build'?: {
                /** The current status of the build. Example: "SUCCESS" */
                'status': 'PENDING' | 'STARTING' | 'CLONING' | 'BUILDING' | 'UPLOADING' | 'ABORTED' | 'FAILURE' | 'SUCCESS' | 'CRASHED';
                /** The timestamp of when the build reached this status. Example: "2021-11-29T11:47:16.624Z" */
                'lastTransitionTime'?: string;
            };
            /** Details about the current deployment status. */
            'deployment'?: {
                /** The current status of the deployment. Example: "COMPLETED" */
                'status': 'IN_PROGRESS' | 'COMPLETED';
                /** The reason the current deployment was started. Example: "DEPLOYING" */
                'reason': 'SCALING' | 'DEPLOYING';
                /** The timestamp of when the deployment reached this status. Example: "2021-11-29T11:47:16.624Z" */
                'lastTransitionTime'?: string;
            };
        };
    }[];
};
declare type ListServicesCall = (opts: ListServicesRequest) => Promise<ApiCallResponse<ListServicesResult>>;
declare type ListServicesRequest = {
    parameters: ListServicesParameters;
    options?: ListServicesOptions;
};
declare type ListServicesParameters = {
    /** ID of the project */ 'projectId': string;
};
declare type ListServicesOptions = {
    /** The number of results to display per request. Maximum of 100 results per page. */
    'per_page'?: number;
    /** The page number to access. */
    'page'?: number;
    /** The cursor returned from the previous page of results, used to request the next page. */
    'cursor'?: string;
};
/** Gets a list of services belonging to the project */
declare class ListServicesEndpoint extends GetApiEndpoint<ListServicesRequest, ListServicesResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: ListServicesRequest) => string;
    body: () => undefined;
}

declare type ListAddonsResult = {
    /** An array of addons. */
    'addons': {
        /** Identifier for the addon. Example: "example-addon" */
        'id': string;
        /** Addon name. Example: "Example Addon" */
        'name': string;
        /** Full identifier for the addon. Example: "/example-user/default-project/example-job" */
        'appId': string;
        /** A short description of the addon. Example: "This is the addon description" */
        'description'?: string;
        /** Details about the addon's specifications. */
        'spec': {
            /** The type of the addon Example: "mongodb" */
            'type': string;
        };
        /** The current state of the addon. Example: "running" */
        'status': 'preDeployment' | 'triggerAllocation' | 'allocating' | 'postDeployment' | 'running' | 'paused' | 'scaling' | 'upgrading' | 'backup' | 'restore' | 'failed' | 'deleting' | 'deleted';
    }[];
};
declare type ListAddonsCall = (opts: ListAddonsRequest) => Promise<ApiCallResponse<ListAddonsResult>>;
declare type ListAddonsRequest = {
    parameters: ListAddonsParameters;
    options?: ListAddonsOptions;
};
declare type ListAddonsParameters = {
    /** ID of the project */ 'projectId': string;
};
declare type ListAddonsOptions = {
    /** The number of results to display per request. Maximum of 100 results per page. */
    'per_page'?: number;
    /** The page number to access. */
    'page'?: number;
    /** The cursor returned from the previous page of results, used to request the next page. */
    'cursor'?: string;
};
/** Gets a list of addons belonging to the project */
declare class ListAddonsEndpoint extends GetApiEndpoint<ListAddonsRequest, ListAddonsResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: ListAddonsRequest) => string;
    body: () => undefined;
}

declare type PortForwardingResult = {
    data: PortForwardingInfo;
    error?: never;
} | {
    data?: never;
    error: {
        message: string;
    };
};
interface NorthflankPortForwarder {
    on(event: 'connection-accept', listener: (tunnel: PortTunnel) => any): any;
    on(event: 'connection-close', listener: (tunnel: PortTunnel) => any): any;
    on(event: 'connection-error', listener: (tunnel: PortTunnel, data: PortForwardingInfo, error: any) => any): any;
    on(event: 'tunnel-open', listener: (tunnel: PortTunnel, data: PortForwardingInfo) => any): any;
    on(event: 'tunnel-close', listener: (tunnel: PortTunnel, data: PortForwardingInfo) => any): any;
}
declare class NorthflankPortForwarder extends EventEmitter {
    private readonly contextProvider;
    private readonly listServices;
    private readonly listAddons;
    private nextIpAddress?;
    private connections;
    private proxyApiClient;
    private hostsFileMutex;
    private ipAllocationMutex;
    constructor(contextProvider: ApiClientContextProvider, listServices: ListServicesCall, listAddons: ListAddonsCall);
    withProjectForwarding<T = any>(parameters: {
        projectId: string;
    }, func: (p: {
        services: PortForwardingResult[][];
        addons: PortForwardingResult[][];
    }) => Promise<T>, ipOnly?: boolean): Promise<T>;
    forwardProject(parameters: {
        projectId: string;
    }, ipOnly?: boolean): Promise<{
        services: PortForwardingResult[][];
        addons: PortForwardingResult[][];
    }>;
    withServiceForwarding<T = any>(parameters: {
        projectId: string;
        serviceId: string;
    }, func: (p: PortForwardingResult[]) => Promise<T>, ipOnly?: boolean): Promise<T>;
    forwardService(parameters: {
        projectId: string;
        serviceId: string;
    }, ipOnly?: boolean): Promise<PortForwardingResult[]>;
    withAddonForwarding<T = any>(parameters: {
        projectId: string;
        addonId: string;
    }, func: (p: PortForwardingResult[]) => Promise<T>, ipOnly?: boolean): Promise<T>;
    forwardAddon(parameters: {
        projectId: string;
        addonId: string;
    }, ipOnly?: boolean): Promise<PortForwardingResult[]>;
    private allocateIpAddress;
    private forwardPort;
    private determineSocketAddress;
    private registerHostnames;
    private unregisterHostnames;
    private modifyHostsFile;
    stopProjectForwarding(opts: {
        projectId: string;
    }): Promise<void>;
    stopServiceForwarding(opts: {
        projectId: string;
        serviceId: string;
    }): Promise<void>;
    stopAddonForwarding(opts: {
        projectId: string;
        addonId: string;
    }): Promise<void>;
    private stopForwarding;
    stop(): Promise<void>;
    canExecuteWithHostnames: () => {
        error: boolean;
        message?: string | undefined;
        type?: "windows-admin" | "unix-admin" | undefined;
    };
    private assertStartedWithNodejs;
}

interface ExecCommand extends EventEmitter {
    on(event: 'command-started', listener: () => any): any;
    on(event: 'command-completed', listener: () => any): any;
    on(event: 'command-result', listener: (result: {
        code: number;
        message: string;
    }) => any): any;
    on(event: 'error', listener: (error: any) => any): any;
    on(event: 'std-out-data', listener: (data: any) => any): any;
    on(event: 'std-err-data', listener: (data: any) => any): any;
}

declare type ExecConfig = {
    projectId: string;
    entityType: 'service' | 'job' | 'addon' | 'build';
    entityId: string;
    containerName?: string;
    command?: string | string[];
    shell?: string;
    user?: string | number;
    group?: string | number;
    ttyRows?: number;
    ttyColumns?: number;
};
declare class ExecCommandStandard extends EventEmitter implements ExecCommand {
    private readonly baseUrl;
    readonly execConfig: ExecConfig;
    private readonly token;
    readonly stdOut: stream.PassThrough;
    readonly stdErr: stream.PassThrough;
    readonly stdIn: stream.PassThrough;
    private remote;
    private currentCommand;
    private duplex;
    constructor(baseUrl: string, execConfig: ExecConfig, token: string, // readonly timeout: number = 120 // Timeout in seconds
    stdOut?: stream.PassThrough, stdErr?: stream.PassThrough, stdIn?: stream.PassThrough);
    private get execEndpoint();
    waitForCommandResult: () => Promise<CommandResult>;
    sendInputToCurrentCommand: (input: string) => Promise<void>;
    resizeTerminal: (size: {
        rows?: number;
        columns?: number;
    }) => Promise<void>;
    start(): Promise<CommandResult>;
    private constructPayloadPacket;
    private initialAuth;
    private reset;
}

declare type CommandResult = {
    exitCode: number;
    status: 'Success' | 'Failure' | 'Unknown';
    message?: string;
};
declare type ExecCommandData = {
    command: string | string[];
    containerName?: string;
    shell?: string;
    user?: string | number;
    group?: string | number;
};
declare type ExecSessionData = Omit<ExecCommandData, 'command'> & {
    command?: string | string[];
    ttyRows?: number;
    ttyColumns?: number;
};
declare class NorthflankExecCommand {
    private readonly contextProvider;
    constructor(contextProvider: ApiClientContextProvider);
    /**
     * Runs command on a Northflank service and waits for completion returning command result and
     * standard output and standard error emitted during commmand execution.
     */
    execServiceCommand(parameters: {
        projectId: string;
        serviceId: string;
    }, data: ExecCommandData): Promise<{
        commandResult: CommandResult;
        stdOut: string;
        stdErr: string;
    }>;
    /**
     * Starts a session on a Northflank service. This is usually a longer-running command. The returned object allows to listen to events as well
     * as consume streams for standard output (stdOut) and standard error (stdErr). Input can be sent using the standard input (stdIn)
     * writable stream.
     */
    execServiceSession(parameters: {
        projectId: string;
        serviceId: string;
    }, data?: ExecSessionData): Promise<ExecCommandStandard>;
    /**
     * Runs command on a Northflank job and waits for completion returning command result and
     * standard output and standard error emitted during commmand execution.
     */
    execJobCommand(parameters: {
        projectId: string;
        jobId: string;
    }, data: ExecCommandData): Promise<{
        commandResult: CommandResult;
        stdOut: string;
        stdErr: string;
    }>;
    /**
     * Starts a session on a Northflank job. This is usually a longer-running command. The returned object allows to listen to events as well
     * as consume streams for standard output (stdOut) and standard error (stdErr). Input can be sent using the standard input (stdIn)
     * writable stream.
     */
    execJobSession(parameters: {
        projectId: string;
        jobId: string;
    }, data?: ExecSessionData): Promise<ExecCommandStandard>;
    private execCommand;
    private shellSession;
    private getCommandRunner;
    private assertStartedWithNodejs;
}

declare type ListProjectsResult = {
    /** An array of projects. */
    'projects': {
        /** Identifier for the project. Example: "default-project" */
        'id': string;
        /** The name of the project. Example: "Default Project" */
        'name': string;
        /** A short description of the project. Example: "The project description" */
        'description'?: string;
    }[];
};
declare type ListProjectsCall = (opts: ListProjectsRequest) => Promise<ApiCallResponse<ListProjectsResult>>;
declare type ListProjectsRequest = {
    options?: ListProjectsOptions;
};
declare type ListProjectsOptions = {
    /** The number of results to display per request. Maximum of 100 results per page. */
    'per_page'?: number;
    /** The page number to access. */
    'page'?: number;
    /** The cursor returned from the previous page of results, used to request the next page. */
    'cursor'?: string;
};
/** Lists projects for the authenticated user or team. */
declare class ListProjectsEndpoint extends GetApiEndpoint<ListProjectsRequest, ListProjectsResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: ListProjectsRequest) => string;
    body: () => undefined;
}

declare type CreateProjectResult = {
    /** Boolean flag that the operation was successful. Example: true */
    'success': boolean;
    /** ID for the created project. Example: "default-project" */
    'id': string;
};
declare type CreateProjectCall = (opts: CreateProjectRequest) => Promise<ApiCallResponse<CreateProjectResult>>;
declare type CreateProjectRequest = {
    data: CreateProjectData;
};
declare type CreateProjectData = {
    /** The name of the project. Example: "New Project" */
    'name': string;
    /** The description of the project. Example: "This is a new project." */
    'description'?: string;
    /** The region the project will be hosted in. Example: "europe-west" */
    'region': string;
    /** The color of the project in the Northflank App. Example: "#EF233C" */
    'color'?: string;
};
/** Creates a new project. */
declare class CreateProjectEndpoint extends PostApiEndpoint<CreateProjectRequest, CreateProjectResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: CreateProjectRequest) => string;
    body: (payload: CreateProjectRequest) => string;
}

declare type GetProjectResult = {
    /** Identifier for the project. Example: "default-project" */
    'id': string;
    /** The name of the project. Example: "Default Project" */
    'name': string;
    /** A short description of the project. Example: "The project description" */
    'description'?: string;
    'deployment': {
        /** The region where the project's services, jobs and addons are deployed in. Example: "europe-west" */
        'region': string;
    };
    /** The time the project was created. Example: "2021-01-20T11:19:53.175Z" */
    'createdAt': string;
    /** An array of services belonging to the project. */
    'services': {
        /** Identifier for the service. Example: "example-service" */
        'id': string;
        /** Full identifier used for service deployment Example: "/example-user/default-project/example-service" */
        'appId': string;
        /** The name of the service. Example: "Example Service" */
        'name': string;
        /** A short description of the service. Example: "This is the service description" */
        'description'?: string;
        /** Type of the service (combined, build or deployment) Example: "combined" */
        'serviceType': 'combined' | 'build' | 'deployment';
    }[];
    /** An array of jobs belonging to the project. */
    'jobs': {
        /** Identifier for the job. Example: "example-job" */
        'id': string;
        /** Full identifier used for deployment Example: "/example-user/default-project/example-job" */
        'appId': string;
        /** The name of the job. Example: "Example Job" */
        'name': string;
        /** A short description of the job. Example: "This is the job description" */
        'description'?: string;
        /** Type of the service (manual or cron) Example: "cron" */
        'jobType': 'manual' | 'cron';
    }[];
    /** An array of addons belonging to the project. */
    'addons': {
        /** Identifier for the addon. Example: "example-addon" */
        'id': string;
        /** Full identifier used for deployment Example: "/example-user/default-project/example-addon" */
        'appId': string;
        /** The name of the addon. Example: "Example Addon" */
        'name': string;
        /** A short description of the addon. Example: "This is the addon description" */
        'description'?: string;
        /** Details about the addon's specifications. */
        'spec': {
            /** The type of the addon Example: "mongodb" */
            'type': string;
        };
    }[];
};
declare type GetProjectCall = (opts: GetProjectRequest) => Promise<ApiCallResponse<GetProjectResult>>;
declare type GetProjectRequest = {
    parameters: GetProjectParameters;
};
declare type GetProjectParameters = {
    /** ID of the project */ 'projectId': string;
};
/** Get information about the given project */
declare class GetProjectEndpoint extends GetApiEndpoint<GetProjectRequest, GetProjectResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: GetProjectRequest) => string;
    body: () => undefined;
}

declare type DeleteProjectResult = any | any;
declare type DeleteProjectCall = (opts: DeleteProjectRequest) => Promise<ApiCallResponse<DeleteProjectResult>>;
declare type DeleteProjectRequest = {
    parameters: DeleteProjectParameters;
};
declare type DeleteProjectParameters = {
    /** ID of the project */ 'projectId': string;
};
/** Delete the given project. Fails if the project isn't empty. */
declare class DeleteProjectEndpoint extends DeleteApiEndpoint<DeleteProjectRequest, DeleteProjectResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: DeleteProjectRequest) => string;
    body: () => undefined;
}

declare type CreateAddonResult = {
    /** Identifier for the addon. Example: "example-addon" */
    'id': string;
    /** Addon name. Example: "Example Addon" */
    'name': string;
    /** Full identifier for the addon. Example: "/example-user/default-project/example-addon" */
    'appId': string;
    /** A short description of the addon. Example: "This is the addon description" */
    'description'?: string;
    /** The time the addon was created. Example: "2021-01-20T11:19:53.175Z" */
    'createdAt': string;
    /** Details about the addon's specifications. */
    'spec': {
        /** The type of the addon Example: "mongodb" */
        'type': string;
        /** Details about the addon configuration. */
        'config': {
            /** The version of the addon running. Example: "4.2.14" */
            'versionTag': string;
            /** The support status of the current addon version. Example: "active" */
            'lifecycleStatus': 'active' | 'deprecated' | 'discontinued';
            /** Details about the addon deployment. */
            'deployment': {
                /** The number of replicas running for this addon. Example: 1 */
                'replicas': number;
                /** The type of storage used by the addon. Example: "ssd" */
                'storageClass': string;
                /** The size of the addon storage, in MB. Example: 4096 */
                'storageSize': number;
                /** The deployment plan used by the addon. Example: "nf-compute-20" */
                'planId': string;
                /** The region where the addon is deployed. Example: "europe-west" */
                'region': string;
            };
            /** Details about the addon networking settings. */
            'networking': {
                /** Whether this addon is provisioned with a TLS certificate. Example: true */
                'tlsEnabled': boolean;
                /** Whether this addon is publicly accessible via the internet. Example: true */
                'externalAccessEnabled': boolean;
                /** An array of IP policy rules. */
                'ipPolicies'?: {
                    /** An IP address used by this rule. Example: "127.0.0.1" */
                    'address': string;
                    /** The action for this rule. Example: "ALLOW" */
                    'action': 'DENY' | 'ALLOW';
                }[];
            };
        };
    };
    /** The current state of the addon. Example: "preDeployment" */
    'status': 'preDeployment' | 'triggerAllocation' | 'allocating' | 'postDeployment' | 'running' | 'paused' | 'scaling' | 'upgrading' | 'backup' | 'restore' | 'failed' | 'deleting' | 'deleted';
};
declare type CreateAddonCall = (opts: CreateAddonRequest) => Promise<ApiCallResponse<CreateAddonResult>>;
declare type CreateAddonRequest = {
    parameters: CreateAddonParameters;
    data: CreateAddonData;
};
declare type CreateAddonParameters = {
    /** ID of the project */ 'projectId': string;
};
declare type CreateAddonData = {
    /** The name of the addon. Example: "Example Addon" */
    'name': string;
    /** A description of the addon. Example: "An addon description" */
    'description'?: string;
    /** The identifier for the type of addon. Addon types can be found at the Get Addon Types endpoint. Example: "postgres" */
    'type': string;
    /** The version of the addon type to use. Example: "12.4.0" */
    'version': string;
    'billing': {
        /** The ID of the deployment plan to use. Example: "nf-compute-20" */
        'deploymentPlan': string;
        /** The type of storage. Only configurable if the relevant feature flag is enabled for you account */
        'storageClass'?: 'ssd' | 'hdd';
        /** The size of the addon storage, in megabytes. Example: 4096 */
        'storage': number;
        /** The number of addon replicas to run. Example: 1 */
        'replicas': number;
    };
    /** Enables access to the addon via TLS (if supported by the addon type). */
    'tlsEnabled'?: boolean;
    /** Enables external access to the addon via TLS (if supported by the addon type). */
    'externalAccessEnabled'?: boolean;
};
/** Creates a new addon */
declare class CreateAddonEndpoint extends PostApiEndpoint<CreateAddonRequest, CreateAddonResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: CreateAddonRequest) => string;
    body: (payload: CreateAddonRequest) => string;
}

declare type GetAddonResult = {
    /** Identifier for the addon. Example: "example-addon" */
    'id': string;
    /** Addon name. Example: "Example Addon" */
    'name': string;
    /** Full identifier for the addon. Example: "/example-user/default-project/example-addon" */
    'appId': string;
    /** A short description of the addon. Example: "This is the addon description" */
    'description'?: string;
    /** The time the addon was created. Example: "2021-01-20T11:19:53.175Z" */
    'createdAt': string;
    /** The current state of the addon. Example: "running" */
    'status': 'preDeployment' | 'triggerAllocation' | 'allocating' | 'postDeployment' | 'running' | 'paused' | 'scaling' | 'upgrading' | 'backup' | 'restore' | 'failed' | 'deleting' | 'deleted';
    /** Details about the addon's specifications. */
    'spec': {
        /** The type of the addon Example: "mongodb" */
        'type': string;
        /** Details about the addon configuration. */
        'config': {
            /** The version of the addon running. Example: "4.2.14" */
            'versionTag': string;
            /** The support status of the current addon version. Example: "active" */
            'lifecycleStatus': 'active' | 'deprecated' | 'discontinued';
            /** Details about the addon deployment. */
            'deployment': {
                /** The number of replicas running for this addon. Example: 1 */
                'replicas': number;
                /** The type of storage used by the addon. Example: "ssd" */
                'storageClass': string;
                /** The size of the addon storage, in MB. Example: 4096 */
                'storageSize': number;
                /** The deployment plan used by the addon. Example: "nf-compute-20" */
                'planId': string;
                /** The region where the addon is deployed. Example: "europe-west" */
                'region': string;
            };
            /** Details about the addon networking settings. */
            'networking': {
                /** Whether this addon is provisioned with a TLS certificate. Example: true */
                'tlsEnabled': boolean;
                /** Whether this addon is publicly accessible via the internet. Example: true */
                'externalAccessEnabled': boolean;
                /** An array of IP policy rules. */
                'ipPolicies'?: {
                    /** An IP address used by this rule. Example: "127.0.0.1" */
                    'address': string;
                    /** The action for this rule. Example: "ALLOW" */
                    'action': 'DENY' | 'ALLOW';
                }[];
            };
        };
    };
};
declare type GetAddonCall = (opts: GetAddonRequest) => Promise<ApiCallResponse<GetAddonResult>>;
declare type GetAddonRequest = {
    parameters: GetAddonParameters;
};
declare type GetAddonParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the addon */
    'addonId': string;
};
/** Gets information about the given addon */
declare class GetAddonEndpoint extends GetApiEndpoint<GetAddonRequest, GetAddonResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: GetAddonRequest) => string;
    body: () => undefined;
}

declare type DeleteAddonResult = any;
declare type DeleteAddonCall = (opts: DeleteAddonRequest) => Promise<ApiCallResponse<DeleteAddonResult>>;
declare type DeleteAddonRequest = {
    parameters: DeleteAddonParameters;
};
declare type DeleteAddonParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the addon */
    'addonId': string;
};
/** Deletes the given addon. */
declare class DeleteAddonEndpoint extends DeleteApiEndpoint<DeleteAddonRequest, DeleteAddonResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: DeleteAddonRequest) => string;
    body: () => undefined;
}

declare type GetAddonCredentialsResult = {
    /** An object containing secrets for connecting to the addon. Secrets are dependent on the addon type. Example: {"username":"1720747439245d49","password":"f1ba286ee2465e80b0fd4af31276f3e33a"} */
    'secrets': any;
    /** An object containing data such as connection strings. Dependent on the addon type. Example: {} */
    'envs': any;
};
declare type GetAddonCredentialsCall = (opts: GetAddonCredentialsRequest) => Promise<ApiCallResponse<GetAddonCredentialsResult>>;
declare type GetAddonCredentialsRequest = {
    parameters: GetAddonCredentialsParameters;
};
declare type GetAddonCredentialsParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the addon */
    'addonId': string;
};
/** Returns the credentials for connecting to the given addon. */
declare class GetAddonCredentialsEndpoint extends GetApiEndpoint<GetAddonCredentialsRequest, GetAddonCredentialsResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: GetAddonCredentialsRequest) => string;
    body: () => undefined;
}

declare type GetAddonTypesResult = {
    /** A list of available addon types. */
    'addonTypes': {
        /** The identifier for the addon type. Example: "redis" */
        'type': string;
        /** The name of the addon type. Example: "Redis" */
        'name': string;
        /** A description of the addon. Example: "Redis implements a distributed, in-memory key-value database with optional durability." */
        'description': string;
        /** A list of available versions of the addon type. */
        'versions': string[];
        /** Features supported by this addon type. */
        'features'?: {
            /** Whether this addon supports connection via TLS. */
            'tls': boolean;
            /** Whether this addon supports external connection. */
            'externalAccess': boolean;
        };
        /** Details about resource options for the addon type. */
        'resources': {
            /** Details about storage size options for this addon. */
            'storage': {
                /** Available options for storage size for this addon, in MB. */
                'options': number[];
                /** The default storage value for this addon. Example: 1024 */
                'default': number;
            };
            /** Details about replica count options for this addon. */
            'replicas': {
                /** Available options for replica counts for this addon. */
                'options': number[];
                /** The default replica count for this addon. Example: 1 */
                'default': number;
            };
        };
    }[];
};
declare type GetAddonTypesCall = (opts: GetAddonTypesRequest) => Promise<ApiCallResponse<GetAddonTypesResult>>;
declare type GetAddonTypesRequest = {};
/** Gets information about the available addon types */
declare class GetAddonTypesEndpoint extends GetApiEndpoint<GetAddonTypesRequest, GetAddonTypesResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: GetAddonTypesRequest) => string;
    body: () => undefined;
}

declare type ScaleAddonResult = any;
declare type ScaleAddonCall = (opts: ScaleAddonRequest) => Promise<ApiCallResponse<ScaleAddonResult>>;
declare type ScaleAddonRequest = {
    parameters: ScaleAddonParameters;
    data: ScaleAddonData;
};
declare type ScaleAddonParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the addon */
    'addonId': string;
};
declare type ScaleAddonData = {
    /** The ID of the deployment plan to use. Example: "nf-compute-20" */
    'deploymentPlan'?: string;
    /** The size of the addon storage, in megabytes. Example: 1024 */
    'storage'?: number;
    /** The number of addon replicas to run. Example: 1 */
    'replicas'?: number;
};
/** Modifies the allocated resources for the given addon. */
declare class ScaleAddonEndpoint extends PostApiEndpoint<ScaleAddonRequest, ScaleAddonResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: ScaleAddonRequest) => string;
    body: (payload: ScaleAddonRequest) => string;
}

declare type GetAddonVersionResult = {
    /** The version of the addon running. Example: "4.2.14" */
    'version': string;
    /** Available versions that the addon can be upgraded to. */
    'upgradeTo': {
        /** The version of the addon to upgrade to. Example: "4.2.15" */
        'version': string;
        /** Whether the version is a major or minor version. Example: "minor" */
        'type': 'major' | 'minor' | 'patch';
    }[];
    /** The support status of the current addon version. Example: "deprecated" */
    'lifecycleStatus': 'active' | 'deprecated' | 'discontinued';
    /** The date that the current addon version will be discontinued. Example: "01.08.2021" */
    'discontinuedBy'?: string;
    /** Data about the upgrade history of this addon. */
    'upgradeHistory': {
        /** The unique identifier of the addon upgrade. Example: "611d0da52cd838bbdeec4792" */
        'upgradeId': string;
        /** Details about the upgrade status. */
        'status': {
            /** The status of the addon upgrade. Example: "completed" */
            'status': 'scheduled' | 'in-progress' | 'completed' | 'aborting' | 'aborted' | 'failed' | 'not-supported';
        };
        /** The time the upgrade was initiated. Example: "2021-08-18 13:39:49.475Z" */
        'createdAt': string;
        /** Whether the version updated to is a major or minor version. Example: "minor" */
        'upgradeType': 'major' | 'minor' | 'patch';
        /** The version upgraded from. Example: "4.2.14" */
        'previousVersion': string;
        /** The version upgraded to. Example: "4.2.15" */
        'newVersion': string;
        /** The time the upgrade was completed. Example: "2021-08-18T13:40:51.685Z" */
        'completedAt'?: string;
    }[];
};
declare type GetAddonVersionCall = (opts: GetAddonVersionRequest) => Promise<ApiCallResponse<GetAddonVersionResult>>;
declare type GetAddonVersionRequest = {
    parameters: GetAddonVersionParameters;
};
declare type GetAddonVersionParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the addon */
    'addonId': string;
};
/** Gets details about the current addon version including available upgrades and upgrade history. */
declare class GetAddonVersionEndpoint extends GetApiEndpoint<GetAddonVersionRequest, GetAddonVersionResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: GetAddonVersionRequest) => string;
    body: () => undefined;
}

declare type UpdateAddonVersionResult = any;
declare type UpdateAddonVersionCall = (opts: UpdateAddonVersionRequest) => Promise<ApiCallResponse<UpdateAddonVersionResult>>;
declare type UpdateAddonVersionRequest = {
    parameters: UpdateAddonVersionParameters;
    data: UpdateAddonVersionData;
};
declare type UpdateAddonVersionParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the addon */
    'addonId': string;
};
declare type UpdateAddonVersionData = {
    /** The version to upgrade the addon to. Example: "4.2.15" */
    'version': string;
};
/** Upgrades the addon to a new version. */
declare class UpdateAddonVersionEndpoint extends PostApiEndpoint<UpdateAddonVersionRequest, UpdateAddonVersionResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: UpdateAddonVersionRequest) => string;
    body: (payload: UpdateAddonVersionRequest) => string;
}

declare type UpdateAddonNetworksettingsResult = any;
declare type UpdateAddonNetworksettingsCall = (opts: UpdateAddonNetworksettingsRequest) => Promise<ApiCallResponse<UpdateAddonNetworksettingsResult>>;
declare type UpdateAddonNetworksettingsRequest = {
    parameters: UpdateAddonNetworksettingsParameters;
    data: UpdateAddonNetworksettingsData;
};
declare type UpdateAddonNetworksettingsParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the addon */
    'addonId': string;
};
declare type UpdateAddonNetworksettingsData = {
    /** If `true`, a TLS certificate will be provisioned for the addon. Example: true */
    'tlsEnabled'?: boolean;
    /** If `true`, the addon will be given a public URL and will be accessible from the internet. `tlsEnabled` must be `true` to set this as `true`. Example: true */
    'externalAccessEnabled'?: boolean;
};
/** Updates the network settings for the addon. */
declare class UpdateAddonNetworksettingsEndpoint extends PostApiEndpoint<UpdateAddonNetworksettingsRequest, UpdateAddonNetworksettingsResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: UpdateAddonNetworksettingsRequest) => string;
    body: (payload: UpdateAddonNetworksettingsRequest) => string;
}

declare type UpdateAddonSecurityResult = any;
declare type UpdateAddonSecurityCall = (opts: UpdateAddonSecurityRequest) => Promise<ApiCallResponse<UpdateAddonSecurityResult>>;
declare type UpdateAddonSecurityRequest = {
    parameters: UpdateAddonSecurityParameters;
    data: UpdateAddonSecurityData;
};
declare type UpdateAddonSecurityParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the addon */
    'addonId': string;
};
declare type UpdateAddonSecurityData = {
    /** An array of IP policy rules. */
    'ipPolicies': {
        /** An IP address used by this rule. Example: "127.0.0.1" */
        'address': string;
        /** The action for this rule. Example: "ALLOW" */
        'action'?: 'ALLOW' | 'DENY';
    }[];
};
/** Updates the security rules for the addon. */
declare class UpdateAddonSecurityEndpoint extends PostApiEndpoint<UpdateAddonSecurityRequest, UpdateAddonSecurityResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: UpdateAddonSecurityRequest) => string;
    body: (payload: UpdateAddonSecurityRequest) => string;
}

declare type GetAddonBackupsResult = {
    /** A list of backups for the given addon. */
    'backups': {
        /** The identifier for the backup. Example: "example-backup" */
        'id': string;
        /** The name of the backup. Example: "Example Backup" */
        'name': string;
        /** The current status of the backup. Example: "completed" */
        'status': 'scheduled' | 'in-progress' | 'completed' | 'aborting' | 'aborted' | 'failed' | 'not-supported';
        /** The time the backup was initiated. Example: "2021-01-20T11:19:53.175Z" */
        'createdAt': string;
        /** The time the backup was completed. Example: "2021-01-20T11:19:54.494Z" */
        'completedAt': string;
        /** Data about the backup configuration. */
        'config': {
            /** Data about the source of the backup. */
            'source'?: {
                /** The type of backup. Example: "snapshot" */
                'type'?: 'fileUpload' | 'liveInstance' | 'snapshot' | 'externalDump' | 'sameAddon';
            };
            /** The size of the backup, in bytes Example: "1234" */
            'size': string;
            /** The version of the addon at the time of the backup. If the backup type is `snapshot`, the addon will be restored to this version when the backup is restored. Example: "4.4.8" */
            'addonVersion'?: string;
        };
    }[];
};
declare type GetAddonBackupsCall = (opts: GetAddonBackupsRequest) => Promise<ApiCallResponse<GetAddonBackupsResult>>;
declare type GetAddonBackupsRequest = {
    parameters: GetAddonBackupsParameters;
    options?: GetAddonBackupsOptions;
};
declare type GetAddonBackupsParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the addon */
    'addonId': string;
};
declare type GetAddonBackupsOptions = {
    /** The number of results to display per request. Maximum of 100 results per page. */
    'per_page'?: number;
    /** The page number to access. */
    'page'?: number;
    /** The cursor returned from the previous page of results, used to request the next page. */
    'cursor'?: string;
};
/** Returns a list of backups for the given addon. */
declare class GetAddonBackupsEndpoint extends GetApiEndpoint<GetAddonBackupsRequest, GetAddonBackupsResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: GetAddonBackupsRequest) => string;
    body: () => undefined;
}

declare type BackupAddonResult = {
    /** The identifier for the backup. Example: "example-backup" */
    'id': string;
    /** The name of the backup. Example: "Example Backup" */
    'name': string;
    /** The current status of the backup. Example: "completed" */
    'status': 'scheduled' | 'in-progress' | 'completed' | 'aborting' | 'aborted' | 'failed' | 'not-supported';
    /** The time the backup was initiated. Example: "2021-01-20T11:19:53.175Z" */
    'createdAt': string;
    /** The time the backup was completed. Example: "2021-01-20T11:19:54.494Z" */
    'completedAt': string;
    /** Data about the backup configuration. */
    'config': {
        /** Data about the source of the backup. */
        'source'?: {
            /** The type of backup. Example: "snapshot" */
            'type'?: 'fileUpload' | 'liveInstance' | 'snapshot' | 'externalDump' | 'sameAddon';
        };
        /** The size of the backup, in bytes Example: "1234" */
        'size': string;
        /** The version of the addon at the time of the backup. If the backup type is `snapshot`, the addon will be restored to this version when the backup is restored. Example: "4.4.8" */
        'addonVersion'?: string;
    };
    /** An object containing the restore history for the given backup. Example: {"1611305397038":{"restoreTimestamp":"2021-01-22T08:49:57.038Z","status":"completed","completedAt":"2021-01-22T08:50:30.749Z"}} */
    'restores': any;
};
declare type BackupAddonCall = (opts: BackupAddonRequest) => Promise<ApiCallResponse<BackupAddonResult>>;
declare type BackupAddonRequest = {
    parameters: BackupAddonParameters;
    data: BackupAddonData;
};
declare type BackupAddonParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the addon */
    'addonId': string;
};
declare type BackupAddonData = {
    /** The name of the backup. If not provided, a default name will be generated containing the current date. Example: "Example Backup" */
    'name'?: string;
    /** The type of backup to perform. Defaults to `snapshot`. Example: "snapshot" */
    'backupType'?: 'dump' | 'snapshot';
};
/** Initiates a backup for the given addon */
declare class BackupAddonEndpoint extends PostApiEndpoint<BackupAddonRequest, BackupAddonResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: BackupAddonRequest) => string;
    body: (payload: BackupAddonRequest) => string;
}

declare type GetAddonBackupResult = {
    /** The identifier for the backup. Example: "example-backup" */
    'id': string;
    /** The name of the backup. Example: "Example Backup" */
    'name': string;
    /** The current status of the backup. Example: "completed" */
    'status': 'scheduled' | 'in-progress' | 'completed' | 'aborting' | 'aborted' | 'failed' | 'not-supported';
    /** The time the backup was initiated. Example: "2021-01-20T11:19:53.175Z" */
    'createdAt': string;
    /** The time the backup was completed. Example: "2021-01-20T11:19:54.494Z" */
    'completedAt': string;
    /** Data about the backup configuration. */
    'config': {
        /** Data about the source of the backup. */
        'source'?: {
            /** The type of backup. Example: "snapshot" */
            'type'?: 'fileUpload' | 'liveInstance' | 'snapshot' | 'externalDump' | 'sameAddon';
        };
        /** The size of the backup, in bytes Example: "1234" */
        'size': string;
        /** The version of the addon at the time of the backup. If the backup type is `snapshot`, the addon will be restored to this version when the backup is restored. Example: "4.4.8" */
        'addonVersion'?: string;
    };
    /** An object containing the restore history for the given backup. Example: {"1611305397038":{"restoreTimestamp":"2021-01-22T08:49:57.038Z","status":"completed","completedAt":"2021-01-22T08:50:30.749Z"}} */
    'restores': any;
};
declare type GetAddonBackupCall = (opts: GetAddonBackupRequest) => Promise<ApiCallResponse<GetAddonBackupResult>>;
declare type GetAddonBackupRequest = {
    parameters: GetAddonBackupParameters;
};
declare type GetAddonBackupParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the addon */
    'addonId': string;
    /** ID of the backup */
    'backupId': string;
};
/** Gets details about a given backup including restore history */
declare class GetAddonBackupEndpoint extends GetApiEndpoint<GetAddonBackupRequest, GetAddonBackupResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: GetAddonBackupRequest) => string;
    body: () => undefined;
}

declare type DeleteBackupResult = any;
declare type DeleteBackupCall = (opts: DeleteBackupRequest) => Promise<ApiCallResponse<DeleteBackupResult>>;
declare type DeleteBackupRequest = {
    parameters: DeleteBackupParameters;
};
declare type DeleteBackupParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the addon */
    'addonId': string;
    /** ID of the backup */
    'backupId': string;
};
/** Deletes a given backup */
declare class DeleteBackupEndpoint extends DeleteApiEndpoint<DeleteBackupRequest, DeleteBackupResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: DeleteBackupRequest) => string;
    body: () => undefined;
}

declare type RestoreAddonBackupResult = {
    /** The ID of the initiated restore. Example: "1611305397038" */
    'restoreId': string;
};
declare type RestoreAddonBackupCall = (opts: RestoreAddonBackupRequest) => Promise<ApiCallResponse<RestoreAddonBackupResult>>;
declare type RestoreAddonBackupRequest = {
    parameters: RestoreAddonBackupParameters;
};
declare type RestoreAddonBackupParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the addon */
    'addonId': string;
    /** ID of the backup */
    'backupId': string;
};
/** Restores the given addon to the given backup state. */
declare class RestoreAddonBackupEndpoint extends PostApiEndpoint<RestoreAddonBackupRequest, RestoreAddonBackupResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: RestoreAddonBackupRequest) => string;
    body: () => undefined;
}

declare type ImportAddonBackupResult = any;
declare type ImportAddonBackupCall = (opts: ImportAddonBackupRequest) => Promise<ApiCallResponse<ImportAddonBackupResult>>;
declare type ImportAddonBackupRequest = {
    parameters: ImportAddonBackupParameters;
    data: ImportAddonBackupData;
};
declare type ImportAddonBackupParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the addon */
    'addonId': string;
};
declare type ImportAddonBackupData = {
    /** The name of the backup. If not provided, a default name will be generated containing the current date. Example: "Example Backup" */
    'name'?: string;
    /** A database connection string. Example: "mongodb://mongodb0.example.com:27017" */
    'connectionString': string;
} | {
    /** The name of the backup. If not provided, a default name will be generated containing the current date. Example: "Example Backup" */
    'name'?: string;
    /** A url pointing to an existing backup stored as a GNU zip (.gz) file. Example: "https://example.com/backup.db.gz" */
    'importUrl': string;
};
/** Imports a database from an external archive or existing live database. */
declare class ImportAddonBackupEndpoint extends PostApiEndpoint<ImportAddonBackupRequest, ImportAddonBackupResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: ImportAddonBackupRequest) => string;
    body: (payload: ImportAddonBackupRequest) => string;
}

declare type GetAddonContainersResult = {
    /** An array of containers. */
    'containers': {
        /** The name of the container. Example: "example-service-78b4d4459d-sbtn8" */
        'name': string;
        /** The timestamp the container was created. Example: 1611241087 */
        'createdAt': number;
        /** The current status of the container. Example: "TASK_RUNNING" */
        'status': 'TASK_RUNNING' | 'TASK_STARTING' | 'TASK_STAGING' | 'TASK_KILLING' | 'TASK_KILLED' | 'TASK_FAILED' | 'TASK_FINISHED';
        /** The timestamp the container was last updated. Example: 1611241087 */
        'updatedAt': number;
    }[];
};
declare type GetAddonContainersCall = (opts: GetAddonContainersRequest) => Promise<ApiCallResponse<GetAddonContainersResult>>;
declare type GetAddonContainersRequest = {
    parameters: GetAddonContainersParameters;
    options?: GetAddonContainersOptions;
};
declare type GetAddonContainersParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the addon */
    'addonId': string;
};
declare type GetAddonContainersOptions = {
    /** The number of results to display per request. Maximum of 100 results per page. */
    'per_page'?: number;
    /** The page number to access. */
    'page'?: number;
    /** The cursor returned from the previous page of results, used to request the next page. */
    'cursor'?: string;
};
/** Gets a list of containers for the given addon. */
declare class GetAddonContainersEndpoint extends GetApiEndpoint<GetAddonContainersRequest, GetAddonContainersResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: GetAddonContainersRequest) => string;
    body: () => undefined;
}

declare type PauseAddonResult = any;
declare type PauseAddonCall = (opts: PauseAddonRequest) => Promise<ApiCallResponse<PauseAddonResult>>;
declare type PauseAddonRequest = {
    parameters: PauseAddonParameters;
};
declare type PauseAddonParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the addon */
    'addonId': string;
};
/** Pause the given addon. */
declare class PauseAddonEndpoint extends PostApiEndpoint<PauseAddonRequest, PauseAddonResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: PauseAddonRequest) => string;
    body: () => undefined;
}

declare type ResumeAddonResult = any;
declare type ResumeAddonCall = (opts: ResumeAddonRequest) => Promise<ApiCallResponse<ResumeAddonResult>>;
declare type ResumeAddonRequest = {
    parameters: ResumeAddonParameters;
};
declare type ResumeAddonParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the addon */
    'addonId': string;
};
/** Resume the given addon if it is paused. */
declare class ResumeAddonEndpoint extends PostApiEndpoint<ResumeAddonRequest, ResumeAddonResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: ResumeAddonRequest) => string;
    body: () => undefined;
}

declare type RestartAddonResult = any;
declare type RestartAddonCall = (opts: RestartAddonRequest) => Promise<ApiCallResponse<RestartAddonResult>>;
declare type RestartAddonRequest = {
    parameters: RestartAddonParameters;
};
declare type RestartAddonParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the addon */
    'addonId': string;
};
/** Restart the given addon. */
declare class RestartAddonEndpoint extends PostApiEndpoint<RestartAddonRequest, RestartAddonResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: RestartAddonRequest) => string;
    body: () => undefined;
}

declare type AbortAddonBackupResult = any;
declare type AbortAddonBackupCall = (opts: AbortAddonBackupRequest) => Promise<ApiCallResponse<AbortAddonBackupResult>>;
declare type AbortAddonBackupRequest = {
    parameters: AbortAddonBackupParameters;
};
declare type AbortAddonBackupParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the addon */
    'addonId': string;
    /** ID of the backup */
    'backupId': string;
};
/** Aborts the in progress backup. */
declare class AbortAddonBackupEndpoint extends PostApiEndpoint<AbortAddonBackupRequest, AbortAddonBackupResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: AbortAddonBackupRequest) => string;
    body: () => undefined;
}

declare type GetAddonBackupDownloadResult = {
    /** The url to download the backup from. Example: "https://storage.googleapis.com/..." */
    'downloadLink': string;
};
declare type GetAddonBackupDownloadCall = (opts: GetAddonBackupDownloadRequest) => Promise<ApiCallResponse<GetAddonBackupDownloadResult>>;
declare type GetAddonBackupDownloadRequest = {
    parameters: GetAddonBackupDownloadParameters;
};
declare type GetAddonBackupDownloadParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the addon */
    'addonId': string;
    /** ID of the backup */
    'backupId': string;
};
/** Generates a temporary download link for downloading the given backup. */
declare class GetAddonBackupDownloadEndpoint extends GetApiEndpoint<GetAddonBackupDownloadRequest, GetAddonBackupDownloadResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: GetAddonBackupDownloadRequest) => string;
    body: () => undefined;
}

declare type AbortAddonRestoreResult = any;
declare type AbortAddonRestoreCall = (opts: AbortAddonRestoreRequest) => Promise<ApiCallResponse<AbortAddonRestoreResult>>;
declare type AbortAddonRestoreRequest = {
    parameters: AbortAddonRestoreParameters;
    data: AbortAddonRestoreData;
};
declare type AbortAddonRestoreParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the addon */
    'addonId': string;
    /** ID of the backup */
    'backupId': string;
};
declare type AbortAddonRestoreData = {
    /** ID of the restore to abort. Example: 1611305397038 */
    'restoreId': number;
};
/** Aborts an in-progress backup restore. */
declare class AbortAddonRestoreEndpoint extends PostApiEndpoint<AbortAddonRestoreRequest, AbortAddonRestoreResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: AbortAddonRestoreRequest) => string;
    body: (payload: AbortAddonRestoreRequest) => string;
}

declare type ListJobsResult = {
    /** An array of job objects. */
    'jobs': {
        /** Identifier for the job Example: "example-job" */
        'id': string;
        /** ID of the project that the job belongs to Example: "default-project" */
        'projectId': string;
        /** Full identifier used for job deployment Example: "/example-user/default-project/example-job" */
        'appId': string;
        /** Job name Example: "Example Job" */
        'name': string;
        /** A short description of the job Example: "This is the job description" */
        'description'?: string;
        /** Type of the job (manual or cron) Example: "cron" */
        'jobType': 'cron' | 'manual';
        /** Whether Continuous Integration is disabled */
        'disabledCI': boolean;
        /** Whether Continuous Deployment is disabled */
        'disabledCD': boolean;
    }[];
};
declare type ListJobsCall = (opts: ListJobsRequest) => Promise<ApiCallResponse<ListJobsResult>>;
declare type ListJobsRequest = {
    parameters: ListJobsParameters;
    options?: ListJobsOptions;
};
declare type ListJobsParameters = {
    /** ID of the project */ 'projectId': string;
};
declare type ListJobsOptions = {
    /** The number of results to display per request. Maximum of 100 results per page. */
    'per_page'?: number;
    /** The page number to access. */
    'page'?: number;
    /** The cursor returned from the previous page of results, used to request the next page. */
    'cursor'?: string;
};
/** Gets a list of jobs belonging to the project */
declare class ListJobsEndpoint extends GetApiEndpoint<ListJobsRequest, ListJobsResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: ListJobsRequest) => string;
    body: () => undefined;
}

declare type GetJobResult = {
    /** Identifier for the job Example: "example-job" */
    'id': string;
    /** Full identifier used for job deployment Example: "/example-user/default-project/example-job" */
    'appId': string;
    /** Job name Example: "Example Job" */
    'name': string;
    /** A short description of the job Example: "This is the job description" */
    'description'?: string;
    /** ID of the project that the job belongs to Example: "default-project" */
    'projectId': string;
    /** Type of the job (manual or cron) Example: "cron" */
    'jobType': 'cron' | 'manual';
    /** The time the job was created. Example: "2021-01-20T11:19:53.175Z" */
    'createdAt': string;
    'vcsData'?: {
        /** URL of the repository being built Example: "https://github.com/northflank/gatsby-with-northflank" */
        'projectUrl': string;
        /** VCS provider for the repo being built Example: "github" */
        'projectType': 'bitbucket' | 'gitlab' | 'github' | 'self-hosted';
        /** ID of the self-hosted VCS, if applicable. Example: "example-team/self-hosted-vcs" */
        'selfHostedVcsId'?: string;
        /** Branch of the repo being built Example: "master" */
        'projectBranch'?: string;
        /** Whether the repo is being accessed without authentication. */
        'publicRepo'?: boolean;
        /** Working directory used by the dockerfile Example: "/" */
        'dockerWorkDir': string;
        /** File path of the Dockerfile Example: "/Dockerfile" */
        'dockerFilePath': string;
    };
    'buildConfiguration'?: {
        /** An array of path ignore rules. A commit will only be built if a file has been changed that does not match any of the ignore rules. Path ignore rules follow `.gitignore` syntax. */
        'pathIgnoreRules'?: string[];
    };
    'buildEngineConfiguration'?: {
        /** The build engine used. Example: "buildpack" */
        'buildEngine'?: 'buildpack' | 'kaniko' | 'buildkit';
        /** Details about Buildpack settings. */
        'buildpack'?: {
            /** The Buildpack stack used. Example: "HEROKU_20" */
            'builder'?: 'HEROKU_20' | 'HEROKU_18' | 'GOOGLE_V1' | 'CNB_ALPINE' | 'CNB_BIONIC' | 'PAKETO_TINY' | 'PAKETO_BASE' | 'PAKETO_FULL';
            /** Array of custom Buildpacks used. */
            'buildpackLocators'?: string[];
        };
        /** Details about Kaniko settings. */
        'kaniko'?: {
            /** Should intermediate image layers be cached? */
            'useCache'?: boolean;
        };
    };
    /** Whether Continuous Integration is disabled */
    'disabledCI': boolean;
    /** Whether Continuous Deployment is disabled */
    'disabledCD': boolean;
    'deployment'?: {
        /** Region where this job is deployed and built Example: "europe-west" */
        'region'?: string;
    };
    'billing': {
        /** ID of the billing plan used by this job Example: "nf-compute-20" */
        'deploymentPlan': string;
    };
    /** Job settings */
    'settings': {
        /** Cron job specific settings */
        'cron'?: {
            /** The cron timer scheduling when to run the job. Example: "30 8 * * *" */
            'schedule'?: string;
            /** Whether this job should run when another instance of the job is already running. Example: "Allow" */
            'concurrencyPolicy'?: 'Allow' | 'Forbid' | 'Replace';
        };
        /** The number of attempts to rerun a job before it is marked as failed. */
        'backoffLimit': number;
        /** The maximum amount of time, in seconds, for a job to run before it is marked as failed. Example: 600 */
        'activeDeadlineSeconds': number;
    };
};
declare type GetJobCall = (opts: GetJobRequest) => Promise<ApiCallResponse<GetJobResult>>;
declare type GetJobRequest = {
    parameters: GetJobParameters;
};
declare type GetJobParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the job */
    'jobId': string;
};
/** Gets information about the given job */
declare class GetJobEndpoint extends GetApiEndpoint<GetJobRequest, GetJobResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: GetJobRequest) => string;
    body: () => undefined;
}

declare type DeleteJobResult = any;
declare type DeleteJobCall = (opts: DeleteJobRequest) => Promise<ApiCallResponse<DeleteJobResult>>;
declare type DeleteJobRequest = {
    parameters: DeleteJobParameters;
};
declare type DeleteJobParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the job */
    'jobId': string;
};
/** Deletes the given job. */
declare class DeleteJobEndpoint extends DeleteApiEndpoint<DeleteJobRequest, DeleteJobResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: DeleteJobRequest) => string;
    body: () => undefined;
}

declare type CreateJobManualResult = {
    /** Identifier for the job Example: "example-job" */
    'id': string;
    /** Full identifier used for job deployment Example: "/example-user/default-project/example-job" */
    'appId': string;
    /** Job name Example: "Example Job" */
    'name': string;
    /** A short description of the job Example: "This is the job description" */
    'description'?: string;
    /** ID of the project that the job belongs to Example: "default-project" */
    'projectId': string;
    /** The time the job was created. Example: "2021-01-20T11:19:53.175Z" */
    'createdAt': string;
    'vcsData'?: {
        /** URL of the repository being built Example: "https://github.com/northflank/gatsby-with-northflank" */
        'projectUrl': string;
        /** VCS provider for the repo being built Example: "github" */
        'projectType': 'bitbucket' | 'gitlab' | 'github' | 'self-hosted';
        /** ID of the self-hosted VCS, if applicable. Example: "example-team/self-hosted-vcs" */
        'selfHostedVcsId'?: string;
        /** Branch of the repo being built Example: "master" */
        'projectBranch'?: string;
        /** Whether the repo is being accessed without authentication. */
        'publicRepo'?: boolean;
        /** Working directory used by the dockerfile Example: "/" */
        'dockerWorkDir': string;
        /** File path of the Dockerfile Example: "/Dockerfile" */
        'dockerFilePath': string;
    };
    'buildConfiguration'?: {
        /** An array of path ignore rules. A commit will only be built if a file has been changed that does not match any of the ignore rules. Path ignore rules follow `.gitignore` syntax. */
        'pathIgnoreRules'?: string[];
    };
    'buildEngineConfiguration'?: {
        /** The build engine used. Example: "buildpack" */
        'buildEngine'?: 'buildpack' | 'kaniko' | 'buildkit';
        /** Details about Buildpack settings. */
        'buildpack'?: {
            /** The Buildpack stack used. Example: "HEROKU_20" */
            'builder'?: 'HEROKU_20' | 'HEROKU_18' | 'GOOGLE_V1' | 'CNB_ALPINE' | 'CNB_BIONIC' | 'PAKETO_TINY' | 'PAKETO_BASE' | 'PAKETO_FULL';
            /** Array of custom Buildpacks used. */
            'buildpackLocators'?: string[];
        };
        /** Details about Kaniko settings. */
        'kaniko'?: {
            /** Should intermediate image layers be cached? */
            'useCache'?: boolean;
        };
    };
    /** Whether Continuous Integration is disabled */
    'disabledCI': boolean;
    /** Whether Continuous Deployment is disabled */
    'disabledCD': boolean;
    'deployment'?: {
        /** Region where this job is deployed and built Example: "europe-west" */
        'region'?: string;
    };
    'billing': {
        /** ID of the billing plan used by this job Example: "nf-compute-20" */
        'deploymentPlan': string;
    };
    /** Type of the job (manual or cron) Example: "manual" */
    'jobType': 'cron' | 'manual';
    /** Job settings */
    'settings': {
        /** The number of attempts to rerun a job before it is marked as failed. */
        'backoffLimit': number;
        /** The maximum amount of time, in seconds, for a job to run before it is marked as failed. Example: 600 */
        'activeDeadlineSeconds': number;
        'cron'?: any;
    };
    /** Whether the job will be built immediately Example: true */
    'buildInitiated': boolean;
};
declare type CreateJobManualCall = (opts: CreateJobManualRequest) => Promise<ApiCallResponse<CreateJobManualResult>>;
declare type CreateJobManualRequest = {
    parameters: CreateJobManualParameters;
    data: CreateJobManualData;
};
declare type CreateJobManualParameters = {
    /** ID of the project */ 'projectId': string;
};
declare type CreateJobManualData = {
    /** The name of the job. Example: "Example Job" */
    'name': string;
    /** A description of the job. Example: "A job description" */
    'description'?: string;
    'billing': {
        /** The ID of the deployment plan to use. Example: "nf-compute-20" */
        'deploymentPlan': string;
    };
    /** The number of attempts to rerun a job before it is marked as failed. */
    'backoffLimit': number;
    /** Configure when the job should be run if the source image changes. Example: "never" */
    'runOnSourceChange'?: 'never' | 'cd-promote' | 'always';
    /** The maximum amount of time, in seconds, for a job to run before it is marked as failed. Example: 600 */
    'activeDeadlineSeconds'?: number;
    /** Where to deploy the job from. */
    'deployment'?: {
        /** If set, the service runs a custom command rather than one defined in the Dockerfile. Example: "nginx -g" */
        'cmdOverride'?: string;
        'storage'?: {
            'ephemeralStorage'?: {
                /** Ephemeral storage per container in MB */
                'storageSize'?: number;
            };
        };
        'vcs': {
            /** URL of the Git repo to build. Example: "https://github.com/northflank/gatsby-with-northflank" */
            'projectUrl': string;
            /** The VCS provider to use. Example: "github" */
            'projectType': 'bitbucket' | 'gitlab' | 'github' | 'self-hosted';
            /** If projectType is self-hosted, the ID of the self-hosted vcs to use. */
            'selfHostedVcsId'?: string;
            /** By default, if you have multiple version control accounts of the same provider linked, Northflank will pick a linked account that has access to the repository. If `accountLogin` is provided, Northflank will instead use your linked account with that login name. Example: "github-user" */
            'accountLogin'?: string;
            /** The name of the branch to use. Example: "master" */
            'projectBranch': string;
        };
    } | {
        /** If set, the service runs a custom command rather than one defined in the Dockerfile. Example: "nginx -g" */
        'cmdOverride'?: string;
        'storage'?: {
            'ephemeralStorage'?: {
                /** Ephemeral storage per container in MB */
                'storageSize'?: number;
            };
        };
        'external': {
            /** Image to be deployed. When not deploying from Dockerhub the URL must be specified. Example: "nginx:latest" */
            'imagePath': string;
            /** ID of the saved credentials to use to access this external image. Example: "example-credentials" */
            'credentials'?: string;
        };
    } | {
        /** If set, the service runs a custom command rather than one defined in the Dockerfile. Example: "nginx -g" */
        'cmdOverride'?: string;
        'storage'?: {
            'ephemeralStorage'?: {
                /** Ephemeral storage per container in MB */
                'storageSize'?: number;
            };
        };
        'internal': {
            /** ID of the build service to deploy Example: "example-build-service" */
            'id'?: string;
            /** Branch to deploy Example: "master" */
            'branch'?: string;
            /** Commit SHA to deploy, or 'latest' to deploy the most recent commit Example: "latest" */
            'buildSHA'?: any;
            /** ID of the build that should be deployed Example: "premium-guide-6393" */
            'buildId'?: string;
        };
    } | any;
    'buildConfiguration'?: {
        /** An array of path ignore rules. A commit will only be built if a file has been changed that does not match any of the ignore rules. Path ignore rules follow `.gitignore` syntax. */
        'pathIgnoreRules'?: string[];
    };
    'buildSettings'?: {
        'dockerfile': {
            /** Build engine to use. Defaults to recommended build engine `kaniko` Example: "kaniko" */
            'buildEngine'?: 'kaniko' | 'buildkit';
            /** Should intermediate image layers be cached? Only supported by Kaniko. */
            'useCache'?: boolean;
            /** The file path of the Dockerfile. Example: "/Dockerfile" */
            'dockerFilePath': string;
            /** The working directory of the Dockerfile. Example: "/" */
            'dockerWorkDir': string;
        };
    } | {
        'buildpack': {
            /** Buildpack stack to use. Defaults to recommended stack `HEROKU_20`. Example: "HEROKU_20" */
            'builder'?: 'HEROKU_20' | 'HEROKU_18' | 'GOOGLE_V1' | 'CNB_ALPINE' | 'CNB_BIONIC' | 'PAKETO_TINY' | 'PAKETO_BASE' | 'PAKETO_FULL';
            /** Array of custom Buildpacks to use. */
            'buildpackLocators'?: string[];
            /** The working directory to build in. Example: "/" */
            'buildContext'?: string;
        };
    };
    /** An object containing the runtime environment to set for the job. Keys must only contain letters and numbers separated with underscores, may not start with a number Example: {"variable1":"abcdef","variable2":"12345"} */
    'runtimeEnvironment'?: any;
    /** Secret files as JSON object, encrypted at rest. File path must be absolute Example: {"/dir/fileName":{"data":"VGhpcyBpcyBhbiBleGFtcGxlIHdpdGggYSB0ZW1wbGF0ZWQgJHtOT0RFX0VOVn0gdmFyaWFibGU=","encoding":"utf-8"}} */
    'runtimeFiles'?: any;
    /** An object containing the build arguments to set for the job. Keys must only contain letters and numbers separated with underscores, may not start with a number Example: {"variable1":"abcdef","variable2":"12345"} */
    'buildArguments'?: any;
    /** Secret files as JSON object, encrypted at rest. File path must be absolute Example: {"/dir/fileName":{"data":"VGhpcyBpcyBhbiBleGFtcGxlIHdpdGggYSB0ZW1wbGF0ZWQgJHtOT0RFX0VOVn0gdmFyaWFibGU=","encoding":"utf-8"}} */
    'buildFiles'?: any;
};
/** Creates a new manual job that only runs when initiated via the UI, CLI, API or JS client. */
declare class CreateJobManualEndpoint extends PostApiEndpoint<CreateJobManualRequest, CreateJobManualResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: CreateJobManualRequest) => string;
    body: (payload: CreateJobManualRequest) => string;
}

declare type CreateJobCronResult = {
    /** Identifier for the job Example: "example-job" */
    'id': string;
    /** Full identifier used for job deployment Example: "/example-user/default-project/example-job" */
    'appId': string;
    /** Job name Example: "Example Job" */
    'name': string;
    /** A short description of the job Example: "This is the job description" */
    'description'?: string;
    /** ID of the project that the job belongs to Example: "default-project" */
    'projectId': string;
    /** The time the job was created. Example: "2021-01-20T11:19:53.175Z" */
    'createdAt': string;
    'vcsData'?: {
        /** URL of the repository being built Example: "https://github.com/northflank/gatsby-with-northflank" */
        'projectUrl': string;
        /** VCS provider for the repo being built Example: "github" */
        'projectType': 'bitbucket' | 'gitlab' | 'github' | 'self-hosted';
        /** ID of the self-hosted VCS, if applicable. Example: "example-team/self-hosted-vcs" */
        'selfHostedVcsId'?: string;
        /** Branch of the repo being built Example: "master" */
        'projectBranch'?: string;
        /** Whether the repo is being accessed without authentication. */
        'publicRepo'?: boolean;
        /** Working directory used by the dockerfile Example: "/" */
        'dockerWorkDir': string;
        /** File path of the Dockerfile Example: "/Dockerfile" */
        'dockerFilePath': string;
    };
    'buildConfiguration'?: {
        /** An array of path ignore rules. A commit will only be built if a file has been changed that does not match any of the ignore rules. Path ignore rules follow `.gitignore` syntax. */
        'pathIgnoreRules'?: string[];
    };
    'buildEngineConfiguration'?: {
        /** The build engine used. Example: "buildpack" */
        'buildEngine'?: 'buildpack' | 'kaniko' | 'buildkit';
        /** Details about Buildpack settings. */
        'buildpack'?: {
            /** The Buildpack stack used. Example: "HEROKU_20" */
            'builder'?: 'HEROKU_20' | 'HEROKU_18' | 'GOOGLE_V1' | 'CNB_ALPINE' | 'CNB_BIONIC' | 'PAKETO_TINY' | 'PAKETO_BASE' | 'PAKETO_FULL';
            /** Array of custom Buildpacks used. */
            'buildpackLocators'?: string[];
        };
        /** Details about Kaniko settings. */
        'kaniko'?: {
            /** Should intermediate image layers be cached? */
            'useCache'?: boolean;
        };
    };
    /** Whether Continuous Integration is disabled */
    'disabledCI': boolean;
    /** Whether Continuous Deployment is disabled */
    'disabledCD': boolean;
    'deployment'?: {
        /** Region where this job is deployed and built Example: "europe-west" */
        'region'?: string;
    };
    'billing': {
        /** ID of the billing plan used by this job Example: "nf-compute-20" */
        'deploymentPlan': string;
    };
    /** Job settings */
    'settings': {
        /** Cron job specific settings */
        'cron'?: {
            /** The cron timer scheduling when to run the job. Example: "30 8 * * *" */
            'schedule'?: string;
            /** Whether this job should run when another instance of the job is already running. Example: "Allow" */
            'concurrencyPolicy'?: 'Allow' | 'Forbid' | 'Replace';
        };
        /** The number of attempts to rerun a job before it is marked as failed. */
        'backoffLimit': number;
        /** The maximum amount of time, in seconds, for a job to run before it is marked as failed. Example: 600 */
        'activeDeadlineSeconds': number;
    };
    /** Type of the job (manual or cron) Example: "cron" */
    'jobType': 'cron' | 'manual';
    /** Whether the job will be built immediately Example: true */
    'buildInitiated': boolean;
};
declare type CreateJobCronCall = (opts: CreateJobCronRequest) => Promise<ApiCallResponse<CreateJobCronResult>>;
declare type CreateJobCronRequest = {
    parameters: CreateJobCronParameters;
    data: CreateJobCronData;
};
declare type CreateJobCronParameters = {
    /** ID of the project */ 'projectId': string;
};
declare type CreateJobCronData = {
    /** The name of the job. Example: "Example Job" */
    'name': string;
    /** A description of the job. Example: "A job description" */
    'description'?: string;
    'billing': {
        /** The ID of the deployment plan to use. Example: "nf-compute-20" */
        'deploymentPlan': string;
    };
    /** The number of attempts to rerun a job before it is marked as failed. */
    'backoffLimit': number;
    /** Configure when the job should be run if the source image changes. Example: "never" */
    'runOnSourceChange'?: 'never' | 'cd-promote' | 'always';
    /** The maximum amount of time, in seconds, for a job to run before it is marked as failed. Example: 600 */
    'activeDeadlineSeconds'?: number;
    /** Where to deploy the job from. */
    'deployment'?: {
        /** If set, the service runs a custom command rather than one defined in the Dockerfile. Example: "nginx -g" */
        'cmdOverride'?: string;
        'storage'?: {
            'ephemeralStorage'?: {
                /** Ephemeral storage per container in MB */
                'storageSize'?: number;
            };
        };
        'vcs': {
            /** URL of the Git repo to build. Example: "https://github.com/northflank/gatsby-with-northflank" */
            'projectUrl': string;
            /** The VCS provider to use. Example: "github" */
            'projectType': 'bitbucket' | 'gitlab' | 'github' | 'self-hosted';
            /** If projectType is self-hosted, the ID of the self-hosted vcs to use. */
            'selfHostedVcsId'?: string;
            /** By default, if you have multiple version control accounts of the same provider linked, Northflank will pick a linked account that has access to the repository. If `accountLogin` is provided, Northflank will instead use your linked account with that login name. Example: "github-user" */
            'accountLogin'?: string;
            /** The name of the branch to use. Example: "master" */
            'projectBranch': string;
        };
    } | {
        /** If set, the service runs a custom command rather than one defined in the Dockerfile. Example: "nginx -g" */
        'cmdOverride'?: string;
        'storage'?: {
            'ephemeralStorage'?: {
                /** Ephemeral storage per container in MB */
                'storageSize'?: number;
            };
        };
        'external': {
            /** Image to be deployed. When not deploying from Dockerhub the URL must be specified. Example: "nginx:latest" */
            'imagePath': string;
            /** ID of the saved credentials to use to access this external image. Example: "example-credentials" */
            'credentials'?: string;
        };
    } | {
        /** If set, the service runs a custom command rather than one defined in the Dockerfile. Example: "nginx -g" */
        'cmdOverride'?: string;
        'storage'?: {
            'ephemeralStorage'?: {
                /** Ephemeral storage per container in MB */
                'storageSize'?: number;
            };
        };
        'internal': {
            /** ID of the build service to deploy Example: "example-build-service" */
            'id'?: string;
            /** Branch to deploy Example: "master" */
            'branch'?: string;
            /** Commit SHA to deploy, or 'latest' to deploy the most recent commit Example: "latest" */
            'buildSHA'?: any;
            /** ID of the build that should be deployed Example: "premium-guide-6393" */
            'buildId'?: string;
        };
    } | any;
    'buildConfiguration'?: {
        /** An array of path ignore rules. A commit will only be built if a file has been changed that does not match any of the ignore rules. Path ignore rules follow `.gitignore` syntax. */
        'pathIgnoreRules'?: string[];
    };
    'buildSettings'?: {
        'dockerfile': {
            /** Build engine to use. Defaults to recommended build engine `kaniko` Example: "kaniko" */
            'buildEngine'?: 'kaniko' | 'buildkit';
            /** Should intermediate image layers be cached? Only supported by Kaniko. */
            'useCache'?: boolean;
            /** The file path of the Dockerfile. Example: "/Dockerfile" */
            'dockerFilePath': string;
            /** The working directory of the Dockerfile. Example: "/" */
            'dockerWorkDir': string;
        };
    } | {
        'buildpack': {
            /** Buildpack stack to use. Defaults to recommended stack `HEROKU_20`. Example: "HEROKU_20" */
            'builder'?: 'HEROKU_20' | 'HEROKU_18' | 'GOOGLE_V1' | 'CNB_ALPINE' | 'CNB_BIONIC' | 'PAKETO_TINY' | 'PAKETO_BASE' | 'PAKETO_FULL';
            /** Array of custom Buildpacks to use. */
            'buildpackLocators'?: string[];
            /** The working directory to build in. Example: "/" */
            'buildContext'?: string;
        };
    };
    /** An object containing the runtime environment to set for the job. Keys must only contain letters and numbers separated with underscores, may not start with a number Example: {"variable1":"abcdef","variable2":"12345"} */
    'runtimeEnvironment'?: any;
    /** Secret files as JSON object, encrypted at rest. File path must be absolute Example: {"/dir/fileName":{"data":"VGhpcyBpcyBhbiBleGFtcGxlIHdpdGggYSB0ZW1wbGF0ZWQgJHtOT0RFX0VOVn0gdmFyaWFibGU=","encoding":"utf-8"}} */
    'runtimeFiles'?: any;
    /** An object containing the build arguments to set for the job. Keys must only contain letters and numbers separated with underscores, may not start with a number Example: {"variable1":"abcdef","variable2":"12345"} */
    'buildArguments'?: any;
    /** Secret files as JSON object, encrypted at rest. File path must be absolute Example: {"/dir/fileName":{"data":"VGhpcyBpcyBhbiBleGFtcGxlIHdpdGggYSB0ZW1wbGF0ZWQgJHtOT0RFX0VOVn0gdmFyaWFibGU=","encoding":"utf-8"}} */
    'buildFiles'?: any;
    /** The cron timer scheduling when to run the job. Example: "30 8 * * *" */
    'schedule': string;
    /** Whether this job should run when another instance of the job is already running. `allow` will enable multiple instances of this job to run. `forbid` will keep the current instance of the job running and stop a new instance from being run. `replace` will terminate any currently running instance of the job and start a new one. Example: "forbid" */
    'concurrencyPolicy': 'allow' | 'forbid' | 'replace';
};
/** Creates a new cron job */
declare class CreateJobCronEndpoint extends PostApiEndpoint<CreateJobCronRequest, CreateJobCronResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: CreateJobCronRequest) => string;
    body: (payload: CreateJobCronRequest) => string;
}

declare type ScaleJobResult = any;
declare type ScaleJobCall = (opts: ScaleJobRequest) => Promise<ApiCallResponse<ScaleJobResult>>;
declare type ScaleJobRequest = {
    parameters: ScaleJobParameters;
    data: ScaleJobData;
};
declare type ScaleJobParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the job */
    'jobId': string;
};
declare type ScaleJobData = {
    /** ID of the deployment plan to switch to. Example: "nf-compute-20" */
    'deploymentPlan'?: string;
    'storage'?: {
        'ephemeralStorage'?: {
            /** Ephemeral storage per container in MB */
            'storageSize'?: number;
        };
    };
};
/** Modifies the scaling settings for the given job. */
declare class ScaleJobEndpoint extends PostApiEndpoint<ScaleJobRequest, ScaleJobResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: ScaleJobRequest) => string;
    body: (payload: ScaleJobRequest) => string;
}

declare type GetJobRunsResult = {
    /** An array of job run objects. */
    'runs': {
        /** The ID of the job run Example: "d34582a4-35bd-4c71-8e7c-e36999b88723" */
        'id': string;
        /** Whether the run is currently in progress */
        'active': number;
        /** The number of attempts to retry this job run before it is marked as failed. */
        'backoffLimit': number;
        /** The number of times this job run has concluded successfully or with an error. Example: 1 */
        'completions': number;
        /** Has the job run finished? Example: true */
        'concluded': boolean;
        /** Whether this job run failed to complete successfully */
        'failed': number;
        /** The name of the job run Example: "example-job-5fcf67bc56e1913e21d49504" */
        'runName': string;
        /** A string representing the status of the job. Either SUCCESS, RUNNING or FAILED Example: "SUCCESS" */
        'status': 'SUCCESS' | 'RUNNING' | 'FAILED';
        /** Whether this job run completed successfully */
        'succeeded': number;
        /** The timestamp when the job run started. Example: "2020-12-08T11:47:08Z" */
        'startedAt': string;
        /** The timestamp when the job run concluded. Example: "2020-12-08T11:52:08Z" */
        'concludedAt': string;
    }[];
};
declare type GetJobRunsCall = (opts: GetJobRunsRequest) => Promise<ApiCallResponse<GetJobRunsResult>>;
declare type GetJobRunsRequest = {
    parameters: GetJobRunsParameters;
    options?: GetJobRunsOptions;
};
declare type GetJobRunsParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the job */
    'jobId': string;
};
declare type GetJobRunsOptions = {
    /** The number of results to display per request. Maximum of 100 results per page. */
    'per_page'?: number;
    /** The page number to access. */
    'page'?: number;
    /** The cursor returned from the previous page of results, used to request the next page. */
    'cursor'?: string;
};
/** Fetches run history for the given job */
declare class GetJobRunsEndpoint extends GetApiEndpoint<GetJobRunsRequest, GetJobRunsResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: GetJobRunsRequest) => string;
    body: () => undefined;
}

declare type StartJobRunResult = {
    /** The ID of the job run Example: "d34582a4-35bd-4c71-8e7c-e36999b88723" */
    'id': string;
    /** The name of the job run Example: "example-job-5fcf67bc56e1913e21d49504" */
    'runName': string;
};
declare type StartJobRunCall = (opts: StartJobRunRequest) => Promise<ApiCallResponse<StartJobRunResult>>;
declare type StartJobRunRequest = {
    parameters: StartJobRunParameters;
    data: StartJobRunData;
};
declare type StartJobRunParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the job */
    'jobId': string;
};
declare type StartJobRunData = {
    /** An object containing the environment variables overrides to use when running the job. Keys must only contain letters and numbers separated with underscores, may not start with a number Example: {"VARIABLE_1":"abcdef","VARIABLE_2":"12345"} */
    'runtimeEnvironment'?: any;
    'billing'?: {
        /** The ID of the deployment plan override to use. Example: "nf-compute-20" */
        'deploymentPlan'?: string;
    };
    'deployment'?: {
        /** The CMD override to use when running the job. Example: "nginx -g" */
        'cmdOverride'?: string;
        'storage'?: {
            'ephemeralStorage'?: {
                /** Ephemeral storage per container in MB */
                'storageSize'?: number;
            };
        };
        /** Optional: Specify the commit to run */
        'internal'?: {
            /** ID of the build service to deploy Example: "example-build-service" */
            'id'?: string;
            /** Branch to deploy Example: "master" */
            'branch'?: string;
            /** Commit SHA to deploy, or 'latest' to deploy the most recent commit Example: "latest" */
            'buildSHA'?: any;
            /** ID of the build that should be deployed Example: "premium-guide-6393" */
            'buildId'?: string;
        };
    } | {
        /** The CMD override to use when running the job. Example: "nginx -g" */
        'cmdOverride'?: string;
        'storage'?: {
            'ephemeralStorage'?: {
                /** Ephemeral storage per container in MB */
                'storageSize'?: number;
            };
        };
        /** Optional: Specify the external image to run */
        'external'?: {
            /** Image to be deployed. When not deploying from Dockerhub the URL must be specified. Example: "nginx:latest" */
            'imagePath': string;
            /** ID of the saved credentials to use to access this external image. Example: "example-credentials" */
            'credentials'?: string;
        };
    };
};
/** Starts a new job run for the given job */
declare class StartJobRunEndpoint extends PostApiEndpoint<StartJobRunRequest, StartJobRunResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: StartJobRunRequest) => string;
    body: (payload: StartJobRunRequest) => string;
}

declare type GetJobRunResult = {
    /** The ID of the job run Example: "d34582a4-35bd-4c71-8e7c-e36999b88723" */
    'id': string;
    /** Whether the run is currently in progress */
    'active': number;
    /** The number of attempts to retry this job run before it is marked as failed. */
    'backoffLimit': number;
    /** The number of times this job run has concluded successfully or with an error. Example: 1 */
    'completions': number;
    /** Has the job run finished? Example: true */
    'concluded': boolean;
    /** Whether this job run failed to complete successfully */
    'failed': number;
    /** The name of the job run Example: "example-job-5fcf67bc56e1913e21d49504" */
    'runName': string;
    /** A string representing the status of the job. Either SUCCESS, RUNNING or FAILED Example: "SUCCESS" */
    'status': 'SUCCESS' | 'RUNNING' | 'FAILED';
    /** Whether this job run completed successfully */
    'succeeded': number;
    /** The timestamp when the job run started. Example: "2020-12-08T11:47:08Z" */
    'startedAt': string;
    /** The timestamp when the job run concluded. Example: "2020-12-08T11:52:08Z" */
    'concludedAt': string;
};
declare type GetJobRunCall = (opts: GetJobRunRequest) => Promise<ApiCallResponse<GetJobRunResult>>;
declare type GetJobRunRequest = {
    parameters: GetJobRunParameters;
};
declare type GetJobRunParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the job */
    'jobId': string;
    /** ID of the job run */
    'runId': string;
};
/** Returns data about the given job run */
declare class GetJobRunEndpoint extends GetApiEndpoint<GetJobRunRequest, GetJobRunResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: GetJobRunRequest) => string;
    body: () => undefined;
}

declare type AbortJobRunResult = any;
declare type AbortJobRunCall = (opts: AbortJobRunRequest) => Promise<ApiCallResponse<AbortJobRunResult>>;
declare type AbortJobRunRequest = {
    parameters: AbortJobRunParameters;
};
declare type AbortJobRunParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the job */
    'jobId': string;
    /** ID of the job run */
    'runId': string;
};
/** Aborts the given job run */
declare class AbortJobRunEndpoint extends DeleteApiEndpoint<AbortJobRunRequest, AbortJobRunResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: AbortJobRunRequest) => string;
    body: () => undefined;
}

declare type UpdateJobSettingsResult = any;
declare type UpdateJobSettingsCall = (opts: UpdateJobSettingsRequest) => Promise<ApiCallResponse<UpdateJobSettingsResult>>;
declare type UpdateJobSettingsRequest = {
    parameters: UpdateJobSettingsParameters;
    data: UpdateJobSettingsData;
};
declare type UpdateJobSettingsParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the job */
    'jobId': string;
};
declare type UpdateJobSettingsData = {
    /** The number of attempts to rerun a job before it is marked as failed. */
    'backoffLimit'?: number;
    /** Configure when the job should be run if the source image changes. Example: "never" */
    'runOnSourceChange'?: 'never' | 'cd-promote' | 'always';
    /** The maximum amount of time, in seconds, for a job to run before it is marked as failed. Example: 600 */
    'activeDeadlineSeconds'?: number;
    /** The cron timer scheduling when to run the job. Required for cron jobs and unavailable for other job types. Example: "30 8 * * *" */
    'schedule'?: string;
    /** Whether this job should run when another instance of the job is already running. Only available for cron jobs. `allow` will enable multiple instances of this job to run. `forbid` will keep the current instance of the job running and stop a new instance from being run. `replace` will terminate any currently running instance of the job and start a new one. Example: "allow" */
    'concurrencyPolicy'?: 'allow' | 'forbid' | 'replace';
};
/** Updates settings for the job */
declare class UpdateJobSettingsEndpoint extends PostApiEndpoint<UpdateJobSettingsRequest, UpdateJobSettingsResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: UpdateJobSettingsRequest) => string;
    body: (payload: UpdateJobSettingsRequest) => string;
}

declare type GetJobHealthchecksResult = {
    /** An array of health checks. */
    'healthChecks': {
        /** The protocol to access the health check with. Example: "HTTP" */
        'protocol': 'HTTP' | 'CMD' | 'TCP';
        /** The type of health check. Example: "readinessProbe" */
        'type': 'livenessProbe' | 'readinessProbe';
        /** The path of the health check endpoint. Example: "/health-check" */
        'path'?: string;
        /** The command to run for the health check. */
        'cmd'?: any;
        /** HTTP port number for the health check endpoint. Example: 3000 */
        'httpPort'?: any;
        /** TCP port number for the health check endpoint. */
        'tcpSocketPort'?: any;
        /** Initial delay, in seconds, before the health check is first run. Example: 10 */
        'initialDelaySeconds': number;
        /** The time between each check, in seconds. Example: 60 */
        'periodSeconds': number;
        'timeoutSeconds': number;
        /** The maximum number of allowed failures. Example: 3 */
        'failureThreshold': number;
        /** The number of successes required to mark the health check as a success. Example: 1 */
        'successThreshold'?: any;
    }[];
};
declare type GetJobHealthchecksCall = (opts: GetJobHealthchecksRequest) => Promise<ApiCallResponse<GetJobHealthchecksResult>>;
declare type GetJobHealthchecksRequest = {
    parameters: GetJobHealthchecksParameters;
};
declare type GetJobHealthchecksParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the job */
    'jobId': string;
};
/** Lists the health checks for the given job. */
declare class GetJobHealthchecksEndpoint extends GetApiEndpoint<GetJobHealthchecksRequest, GetJobHealthchecksResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: GetJobHealthchecksRequest) => string;
    body: () => undefined;
}

declare type UpdateJobHealthchecksResult = any;
declare type UpdateJobHealthchecksCall = (opts: UpdateJobHealthchecksRequest) => Promise<ApiCallResponse<UpdateJobHealthchecksResult>>;
declare type UpdateJobHealthchecksRequest = {
    parameters: UpdateJobHealthchecksParameters;
    data: UpdateJobHealthchecksData;
};
declare type UpdateJobHealthchecksParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the job */
    'jobId': string;
};
declare type UpdateJobHealthchecksData = {
    /** An array of health checks */
    'healthChecks': {
        /** The protocol to access the health check with. Example: "HTTP" */
        'protocol': 'HTTP' | 'CMD' | 'TCP';
        /** The type of health check. Example: "readinessProbe" */
        'type': 'livenessProbe' | 'readinessProbe' | 'startupProbe';
        /** The path of the health check endpoint. Required when protocol is HTTP. Example: "/health-check" */
        'path'?: string;
        /** The command to run for the health check. Required when protocol is CMD */
        'cmd'?: string;
        /** Port number for the health check endpoint. Required when protocol is HTTP. Example: 3000 */
        'port'?: number;
        /** Initial delay, in seconds, before the health check is first run. Example: 10 */
        'initialDelaySeconds': number;
        /** The time between each check, in seconds. Example: 60 */
        'periodSeconds': number;
        /** The time to wait for a response before marking the health check as a failure. Example: 1 */
        'timeoutSeconds': number;
        /** The maximum number of allowed failures. Example: 3 */
        'failureThreshold': number;
        /** The number of successes required to mark the health check as a success. Example: 1 */
        'successThreshold'?: number;
    }[];
};
/** Updates health checks for the given job. */
declare class UpdateJobHealthchecksEndpoint extends PostApiEndpoint<UpdateJobHealthchecksRequest, UpdateJobHealthchecksResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: UpdateJobHealthchecksRequest) => string;
    body: (payload: UpdateJobHealthchecksRequest) => string;
}

declare type GetJobBuildsResult = {
    /** An array of builds. */
    'builds': {
        /** ID of the build. Example: "joyous-view-6290" */
        'id': string;
        /** Name of the branch the built commit belongs to. Example: "main" */
        'branch'?: string;
        /** ID of the pull request the commit belongs to. */
        'pullRequestId'?: number;
        /** The status of the build. Example: "SUCCESS" */
        'status'?: 'PENDING' | 'STARTING' | 'CLONING' | 'BUILDING' | 'UPLOADING' | 'ABORTED' | 'FAILURE' | 'SUCCESS' | 'CRASHED';
        /** The sha of the built commit. Example: "12c15e7ee25fd78f567ebf87f9178b8ad70025b3" */
        'sha'?: string;
        /** Whether the build has finished. Example: true */
        'concluded'?: boolean;
        /** Timestamp of the build initiation. Example: "2021-07-28T15:55:38.296Z" */
        'createdAt'?: string;
        /** Whether the build was successful. Example: true */
        'success'?: boolean;
        /** Description of the build status. Example: "Image successfully built" */
        'message'?: string;
        /** Timestamp of the build concluding. Example: 1606237973 */
        'buildConcludedAt'?: number;
    }[];
};
declare type GetJobBuildsCall = (opts: GetJobBuildsRequest) => Promise<ApiCallResponse<GetJobBuildsResult>>;
declare type GetJobBuildsRequest = {
    parameters: GetJobBuildsParameters;
    options?: GetJobBuildsOptions;
};
declare type GetJobBuildsParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the job */
    'jobId': string;
};
declare type GetJobBuildsOptions = {
    /** The number of results to display per request. Maximum of 100 results per page. */
    'per_page'?: number;
    /** The page number to access. */
    'page'?: number;
    /** The cursor returned from the previous page of results, used to request the next page. */
    'cursor'?: string;
};
/** Lists builds for the given job. */
declare class GetJobBuildsEndpoint extends GetApiEndpoint<GetJobBuildsRequest, GetJobBuildsResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: GetJobBuildsRequest) => string;
    body: () => undefined;
}

declare type StartJobBuildResult = {
    /** ID of the build. Example: "joyous-view-6290" */
    'id': string;
    /** Name of the branch the built commit belongs to. Example: "main" */
    'branch'?: string;
    /** ID of the pull request the commit belongs to. */
    'pullRequestId'?: number;
    /** The sha of the built commit. Example: "12c15e7ee25fd78f567ebf87f9178b8ad70025b3" */
    'sha'?: string;
    /** Timestamp of the build initiation. Example: "2021-07-28T15:55:38.296Z" */
    'createdAt'?: string;
    /** The status of the build. Example: "PENDING" */
    'status'?: string;
    /** Whether the build has finished. */
    'concluded'?: boolean;
};
declare type StartJobBuildCall = (opts: StartJobBuildRequest) => Promise<ApiCallResponse<StartJobBuildResult>>;
declare type StartJobBuildRequest = {
    parameters: StartJobBuildParameters;
    data: StartJobBuildData;
};
declare type StartJobBuildParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the job */
    'jobId': string;
};
declare type StartJobBuildData = {
    /** Commit sha to build. If not provided, will build the most recent commit of the job's branch. Example: "262ed9817b3cad5142fbceabe0c9e371e390d616" */
    'sha'?: string;
} | {
    /** Commit sha to build. If not provided, will build the most recent commit of the job's branch. Example: "262ed9817b3cad5142fbceabe0c9e371e390d616" */
    'sha'?: string;
    /** An optional object that may specify several different overrides on the build level. */
    'overrides'?: {
        /** Build arguments that will be set on this build only. In case of conflicts these values take precedence. Example: {"ARGUMENT_1":"abcdef","ARGUMENT_2":"12345"} */
        'buildArguments'?: any;
    };
};
/** Start a new build for the given job. Given a commit sha, it will build that commit. */
declare class StartJobBuildEndpoint extends PostApiEndpoint<StartJobBuildRequest, StartJobBuildResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: StartJobBuildRequest) => string;
    body: (payload: StartJobBuildRequest) => string;
}

declare type GetJobBuildResult = {
    /** ID of the build. Example: "joyous-view-6290" */
    'id': string;
    /** Name of the branch the built commit belongs to. Example: "main" */
    'branch'?: string;
    /** ID of the pull request the commit belongs to. */
    'pullRequestId'?: number;
    /** The status of the build. Example: "SUCCESS" */
    'status'?: 'PENDING' | 'STARTING' | 'CLONING' | 'BUILDING' | 'UPLOADING' | 'ABORTED' | 'FAILURE' | 'SUCCESS' | 'CRASHED';
    /** The sha of the built commit. Example: "12c15e7ee25fd78f567ebf87f9178b8ad70025b3" */
    'sha'?: string;
    /** Whether the build has finished. Example: true */
    'concluded'?: boolean;
    /** Timestamp of the build initiation. Example: "2021-07-28T15:55:38.296Z" */
    'createdAt'?: string;
    /** Whether the build was successful. Example: true */
    'success'?: boolean;
    /** Description of the build status. Example: "Image successfully built" */
    'message'?: string;
    /** Timestamp of the build concluding. Example: 1606237973 */
    'buildConcludedAt'?: number;
};
declare type GetJobBuildCall = (opts: GetJobBuildRequest) => Promise<ApiCallResponse<GetJobBuildResult>>;
declare type GetJobBuildRequest = {
    parameters: GetJobBuildParameters;
};
declare type GetJobBuildParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the job */
    'jobId': string;
    /** ID of the job build */
    'buildId': string;
};
/** Gets information about a build for the job */
declare class GetJobBuildEndpoint extends GetApiEndpoint<GetJobBuildRequest, GetJobBuildResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: GetJobBuildRequest) => string;
    body: () => undefined;
}

declare type AbortJobBuildResult = any;
declare type AbortJobBuildCall = (opts: AbortJobBuildRequest) => Promise<ApiCallResponse<AbortJobBuildResult>>;
declare type AbortJobBuildRequest = {
    parameters: AbortJobBuildParameters;
};
declare type AbortJobBuildParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the job */
    'jobId': string;
    /** ID of the job build */
    'buildId': string;
};
/** Aborts the given job build */
declare class AbortJobBuildEndpoint extends DeleteApiEndpoint<AbortJobBuildRequest, AbortJobBuildResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: AbortJobBuildRequest) => string;
    body: () => undefined;
}

declare type UpdateJobBuildoptionsResult = any;
declare type UpdateJobBuildoptionsCall = (opts: UpdateJobBuildoptionsRequest) => Promise<ApiCallResponse<UpdateJobBuildoptionsResult>>;
declare type UpdateJobBuildoptionsRequest = {
    parameters: UpdateJobBuildoptionsParameters;
    data: UpdateJobBuildoptionsData;
};
declare type UpdateJobBuildoptionsParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the job */
    'jobId': string;
};
declare type UpdateJobBuildoptionsData = {
    'dockerfile': {
        /** Build engine to use. Defaults to recommended build engine `kaniko` Example: "kaniko" */
        'buildEngine'?: 'kaniko' | 'buildkit';
        /** Should intermediate image layers be cached? Only supported by Kaniko. */
        'useCache'?: boolean;
        /** The file path of the Dockerfile. Example: "/Dockerfile" */
        'dockerFilePath'?: string;
        /** The working directory of the Dockerfile. Example: "/" */
        'dockerWorkDir'?: string;
    };
    /** An array of path ignore rules. A commit will only be built if a file has been changed that does not match any of the ignore rules. Path ignore rules follow `.gitignore` syntax. */
    'pathIgnoreRules'?: string[];
} | {
    'buildpack': {
        /** Buildpack stack to use. Defaults to recommended stack `HEROKU_20`. Example: "HEROKU_20" */
        'builder'?: 'HEROKU_20' | 'HEROKU_18' | 'GOOGLE_V1' | 'CNB_ALPINE' | 'CNB_BIONIC' | 'PAKETO_TINY' | 'PAKETO_BASE' | 'PAKETO_FULL';
        /** Array of custom buildpacks to use. */
        'buildpackLocators'?: string[];
        /** The working directory to build in. Example: "/" */
        'buildContext'?: string;
    };
    /** An array of path ignore rules. A commit will only be built if a file has been changed that does not match any of the ignore rules. Path ignore rules follow `.gitignore` syntax. */
    'pathIgnoreRules'?: string[];
} | {
    /** An array of path ignore rules. A commit will only be built if a file has been changed that does not match any of the ignore rules. Path ignore rules follow `.gitignore` syntax. */
    'pathIgnoreRules'?: string[];
};
/** Updates the build options for a given job. */
declare class UpdateJobBuildoptionsEndpoint extends PostApiEndpoint<UpdateJobBuildoptionsRequest, UpdateJobBuildoptionsResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: UpdateJobBuildoptionsRequest) => string;
    body: (payload: UpdateJobBuildoptionsRequest) => string;
}

declare type UpdateJobBuildsourceResult = any;
declare type UpdateJobBuildsourceCall = (opts: UpdateJobBuildsourceRequest) => Promise<ApiCallResponse<UpdateJobBuildsourceResult>>;
declare type UpdateJobBuildsourceRequest = {
    parameters: UpdateJobBuildsourceParameters;
    data: UpdateJobBuildsourceData;
};
declare type UpdateJobBuildsourceParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the job */
    'jobId': string;
};
declare type UpdateJobBuildsourceData = {
    /** URL of the Git repo to build. Example: "https://github.com/northflank/gatsby-with-northflank" */
    'projectUrl'?: string;
    /** The VCS provider to use. Example: "github" */
    'projectType'?: 'bitbucket' | 'gitlab' | 'github' | 'self-hosted';
    /** The name of the branch to use. Example: "master" */
    'projectBranch'?: string;
    /** If projectType is self-hosted, the ID of the self-hosted vcs to use. */
    'selfHostedVcsId'?: string;
    /** By default, if you have multiple version control accounts of the same provider linked, Northflank will pick a linked account that has access to the repository. If `accountLogin` is provided, Northflank will instead use your linked account with that login name. Example: "github-user" */
    'accountLogin'?: string;
};
/** Updates the version control source for a given job. */
declare class UpdateJobBuildsourceEndpoint extends PostApiEndpoint<UpdateJobBuildsourceRequest, UpdateJobBuildsourceResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: UpdateJobBuildsourceRequest) => string;
    body: (payload: UpdateJobBuildsourceRequest) => string;
}

declare type UpdateJobCmdoverrideResult = any;
declare type UpdateJobCmdoverrideCall = (opts: UpdateJobCmdoverrideRequest) => Promise<ApiCallResponse<UpdateJobCmdoverrideResult>>;
declare type UpdateJobCmdoverrideRequest = {
    parameters: UpdateJobCmdoverrideParameters;
    data: UpdateJobCmdoverrideData;
};
declare type UpdateJobCmdoverrideParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the job */
    'jobId': string;
};
declare type UpdateJobCmdoverrideData = {
    /** The CMD to run, or null to disable the override. Example: "nginx -g" */
    'cmdOverride': string;
};
/** Sets the Docker CMD override for the given job. */
declare class UpdateJobCmdoverrideEndpoint extends PostApiEndpoint<UpdateJobCmdoverrideRequest, UpdateJobCmdoverrideResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: UpdateJobCmdoverrideRequest) => string;
    body: (payload: UpdateJobCmdoverrideRequest) => string;
}

declare type GetJobBuildargumentsResult = {
    /** The build arguments, formatted as a JSON object. If the `show` parameter is set to `this`, this will only contain secrets saved to this entity. If the `show` parameter is set to `inherited`, this will only contain secrets inherited from linked secret groups. Otherwise, this will contain both. Example: {"ARGUMENT_1":"abcdef","ARGUMENT_2":"12345"} */
    'buildArguments': any;
    /** The build secret files, formatted as a JSON object. If the `show` parameter is set to `this`, this will only contain files saved to this entity. If the `show` parameter is set to `inherited`, this will only contain files inherited from linked secret groups. Otherwise, this will contain both. Example: {"/dir/fileName":{"data":"VGhpcyBpcyBhbiBleGFtcGxlIHdpdGggYSB0ZW1wbGF0ZWQgJHtOT0RFX0VOVn0gdmFyaWFibGU=","encoding":"utf-8"}} */
    'buildFiles': any;
};
declare type GetJobBuildargumentsCall = (opts: GetJobBuildargumentsRequest) => Promise<ApiCallResponse<GetJobBuildargumentsResult>>;
declare type GetJobBuildargumentsRequest = {
    parameters: GetJobBuildargumentsParameters;
    options?: GetJobBuildargumentsOptions;
};
declare type GetJobBuildargumentsParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the job */
    'jobId': string;
};
declare type GetJobBuildargumentsOptions = {
    /** Which secrets to display - if set to `this` only the group's secrets are displayed, if set to `inherited` only secrets from linked addons are displayed, if set to `all` or not provided, both are displayed. */
    'show'?: string;
};
/** Gets the build arguments of the given job. If the API key does not have the permission 'Project > Secrets > General > Read', secrets inherited from secret groups will not be displayed. */
declare class GetJobBuildargumentsEndpoint extends GetApiEndpoint<GetJobBuildargumentsRequest, GetJobBuildargumentsResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: GetJobBuildargumentsRequest) => string;
    body: () => undefined;
}

declare type UpdateJobBuildargumentsResult = any;
declare type UpdateJobBuildargumentsCall = (opts: UpdateJobBuildargumentsRequest) => Promise<ApiCallResponse<UpdateJobBuildargumentsResult>>;
declare type UpdateJobBuildargumentsRequest = {
    parameters: UpdateJobBuildargumentsParameters;
    data: UpdateJobBuildargumentsData;
};
declare type UpdateJobBuildargumentsParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the job */
    'jobId': string;
};
declare type UpdateJobBuildargumentsData = {
    /** An object containing the all of the build arguments to set for the service. Keys must only contain letters and numbers separated with underscores, may not start with a number Example: {"ARGUMENT_1":"abcdef","ARGUMENT_2":"12345"} */
    'buildArguments': any;
} | {
    /** An object containing the all of the build arguments to set for the service. Keys must only contain letters and numbers separated with underscores, may not start with a number Example: {"ARGUMENT_1":"abcdef","ARGUMENT_2":"12345"} */
    'buildArguments': any;
    /** Secret files as JSON object, encrypted at rest. File path must be absolute Example: {"/dir/fileName":{"data":"VGhpcyBpcyBhbiBleGFtcGxlIHdpdGggYSB0ZW1wbGF0ZWQgJHtOT0RFX0VOVn0gdmFyaWFibGU=","encoding":"utf-8"}} */
    'buildFiles'?: any;
};
/** Sets build arguments for the given job. */
declare class UpdateJobBuildargumentsEndpoint extends PostApiEndpoint<UpdateJobBuildargumentsRequest, UpdateJobBuildargumentsResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: UpdateJobBuildargumentsRequest) => string;
    body: (payload: UpdateJobBuildargumentsRequest) => string;
}

declare type GetJobBuildargumentdetailsResult = {
    /** Details about all the secrets accessible by the service. */
    'buildArguments': {
        /** A stored secret and details about it and its value. This can have the name of any saved secret. */
        'MY_VARIABLE_NAME'?: {
            /** The value of the secret. Example: "abcdef123456" */
            'value': any;
            /** The ID of the secret group the secret is inherited from, if applicable. Example: "example-secret" */
            'inheritedFrom'?: string;
            /** The ID of the addon the secret is inherited from, if applicable. Example: "example-addon" */
            'addonId'?: string;
            /** The priority of the secret group the secret is inherited from, if applicable. Example: 10 */
            'priority'?: number;
            /** An array containing data about other places the secret has been inherited from, but that are not being used as a secret with the same key exists with a higher priority. */
            'overriding': {
                /** The value of the secret. Example: "ffffffffffff" */
                'value': any;
                /** The ID of the secret group the secret is inherited from. Example: "secret-2" */
                'inheritedFrom': string;
                /** The ID of the addon the secret is inherited from, if applicable. Example: "addon-2" */
                'addonId'?: string;
                /** The priority of the secret group the secret is inherited from. */
                'priority': number;
            }[];
        };
    };
    /** Details about all the secrets accessible by the service. */
    'buildFiles': {
        /** A stored secret and details about it and its value. This can have the name of any saved secret. */
        '/dir/fileName'?: {
            /** The value of the secret. Example: {"/dir/fileName":{"data":"VGhpcyBpcyBhbiBleGFtcGxlIHdpdGggYSB0ZW1wbGF0ZWQgJHtOT0RFX0VOVn0gdmFyaWFibGU=","encoding":"utf-8"}} */
            'value': {
                /** base64 encoded string of the file contents Example: "VGhpcyBpcyBhbiBleGFtcGxlIHdpdGggYSB0ZW1wbGF0ZWQgJHtOT0RFX0VOVn0gdmFyaWFibGU=" */
                'data'?: string;
                /** Original encoding of the file Example: "utf-8" */
                'encoding'?: string;
            };
            /** The ID of the secret group the secret is inherited from, if applicable. Example: "example-secret" */
            'inheritedFrom'?: string;
            /** The priority of the secret group the secret is inherited from, if applicable. Example: 10 */
            'priority'?: number;
            /** An array containing data about other places the file has been inherited from, but that are not being used as a secret with the same file path exists with a higher priority. */
            'overriding': {
                /** The value of the secret. Example: "ffffffffffff" */
                'value': any;
                /** The ID of the secret group the secret is inherited from. Example: "secret-2" */
                'inheritedFrom': string;
                /** The priority of the secret group the secret is inherited from. */
                'priority': number;
            }[];
        };
    };
};
declare type GetJobBuildargumentdetailsCall = (opts: GetJobBuildargumentdetailsRequest) => Promise<ApiCallResponse<GetJobBuildargumentdetailsResult>>;
declare type GetJobBuildargumentdetailsRequest = {
    parameters: GetJobBuildargumentdetailsParameters;
};
declare type GetJobBuildargumentdetailsParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the job */
    'jobId': string;
};
/** Get details about the build arguments accessible by the given job. Also requires the permission 'Project > Secrets > General > Read' */
declare class GetJobBuildargumentdetailsEndpoint extends GetApiEndpoint<GetJobBuildargumentdetailsRequest, GetJobBuildargumentdetailsResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: GetJobBuildargumentdetailsRequest) => string;
    body: () => undefined;
}

declare type GetJobRuntimeenvironmentResult = {
    /** The runtime environment variables, formatted as a JSON object. If the `show` parameter is set to `this`, this will only contain secrets saved to this entity. If the `show` parameter is set to `inherited`, this will only contain secrets inherited from linked secret groups. Otherwise, this will contain both. Example: {"VARIABLE_1":"abcdef","VARIABLE_2":"12345"} */
    'runtimeEnvironment': any;
    /** The runtime secret files, formatted as a JSON object. If the `show` parameter is set to `this`, this will only contain files saved to this entity. If the `show` parameter is set to `inherited`, this will only contain files inherited from linked secret groups. Otherwise, this will contain both. Example: {"/dir/fileName":{"data":"VGhpcyBpcyBhbiBleGFtcGxlIHdpdGggYSB0ZW1wbGF0ZWQgJHtOT0RFX0VOVn0gdmFyaWFibGU=","encoding":"utf-8"}} */
    'runtimeFiles': any;
};
declare type GetJobRuntimeenvironmentCall = (opts: GetJobRuntimeenvironmentRequest) => Promise<ApiCallResponse<GetJobRuntimeenvironmentResult>>;
declare type GetJobRuntimeenvironmentRequest = {
    parameters: GetJobRuntimeenvironmentParameters;
    options?: GetJobRuntimeenvironmentOptions;
};
declare type GetJobRuntimeenvironmentParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the job */
    'jobId': string;
};
declare type GetJobRuntimeenvironmentOptions = {
    /** Which secrets to display - if set to `this` only the group's secrets are displayed, if set to `inherited` only secrets from linked addons are displayed, if set to `all` or not provided, both are displayed. */
    'show'?: string;
};
/** Returns the runtime environment for the given job. If the API key does not have the permission 'Project > Secrets > General > Read', secrets inherited from secret groups will not be displayed. */
declare class GetJobRuntimeenvironmentEndpoint extends GetApiEndpoint<GetJobRuntimeenvironmentRequest, GetJobRuntimeenvironmentResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: GetJobRuntimeenvironmentRequest) => string;
    body: () => undefined;
}

declare type UpdateJobRuntimeenvironmentResult = any;
declare type UpdateJobRuntimeenvironmentCall = (opts: UpdateJobRuntimeenvironmentRequest) => Promise<ApiCallResponse<UpdateJobRuntimeenvironmentResult>>;
declare type UpdateJobRuntimeenvironmentRequest = {
    parameters: UpdateJobRuntimeenvironmentParameters;
    data: UpdateJobRuntimeenvironmentData;
};
declare type UpdateJobRuntimeenvironmentParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the job */
    'jobId': string;
};
declare type UpdateJobRuntimeenvironmentData = {
    /** An object containing the all of the environment variables to set for the service. Keys must only contain letters and numbers separated with underscores, may not start with a number Example: {"VARIABLE_1":"abcdef","VARIABLE_2":"12345"} */
    'runtimeEnvironment': any;
} | {
    /** An object containing the all of the environment variables to set for the service. Keys must only contain letters and numbers separated with underscores, may not start with a number Example: {"VARIABLE_1":"abcdef","VARIABLE_2":"12345"} */
    'runtimeEnvironment': any;
    /** Secret files as JSON object, encrypted at rest. File path must be absolute Example: {"/dir/fileName":{"data":"VGhpcyBpcyBhbiBleGFtcGxlIHdpdGggYSB0ZW1wbGF0ZWQgJHtOT0RFX0VOVn0gdmFyaWFibGU=","encoding":"utf-8"}} */
    'runtimeFiles'?: any;
};
/** Sets the runtime environment for the given job. */
declare class UpdateJobRuntimeenvironmentEndpoint extends PostApiEndpoint<UpdateJobRuntimeenvironmentRequest, UpdateJobRuntimeenvironmentResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: UpdateJobRuntimeenvironmentRequest) => string;
    body: (payload: UpdateJobRuntimeenvironmentRequest) => string;
}

declare type GetJobRuntimeenvironmentdetailsResult = {
    /** Details about all the secrets accessible by the service. */
    'runtimeEnvironment': {
        /** A stored secret and details about it and its value. This can have the name of any saved secret. */
        'MY_VARIABLE_NAME'?: {
            /** The value of the secret. Example: "abcdef123456" */
            'value': any;
            /** The ID of the secret group the secret is inherited from, if applicable. Example: "example-secret" */
            'inheritedFrom'?: string;
            /** The ID of the addon the secret is inherited from, if applicable. Example: "example-addon" */
            'addonId'?: string;
            /** The priority of the secret group the secret is inherited from, if applicable. Example: 10 */
            'priority'?: number;
            /** An array containing data about other places the secret has been inherited from, but that are not being used as a secret with the same key exists with a higher priority. */
            'overriding': {
                /** The value of the secret. Example: "ffffffffffff" */
                'value': any;
                /** The ID of the secret group the secret is inherited from. Example: "secret-2" */
                'inheritedFrom': string;
                /** The ID of the addon the secret is inherited from, if applicable. Example: "addon-2" */
                'addonId'?: string;
                /** The priority of the secret group the secret is inherited from. */
                'priority': number;
            }[];
        };
    };
    /** Details about all the secrets accessible by the service. */
    'runtimeFiles': {
        /** A stored secret and details about it and its value. This can have the name of any saved secret. */
        '/dir/fileName'?: {
            /** The value of the secret. Example: {"/dir/fileName":{"data":"VGhpcyBpcyBhbiBleGFtcGxlIHdpdGggYSB0ZW1wbGF0ZWQgJHtOT0RFX0VOVn0gdmFyaWFibGU=","encoding":"utf-8"}} */
            'value': {
                /** base64 encoded string of the file contents Example: "VGhpcyBpcyBhbiBleGFtcGxlIHdpdGggYSB0ZW1wbGF0ZWQgJHtOT0RFX0VOVn0gdmFyaWFibGU=" */
                'data'?: string;
                /** Original encoding of the file Example: "utf-8" */
                'encoding'?: string;
            };
            /** The ID of the secret group the secret is inherited from, if applicable. Example: "example-secret" */
            'inheritedFrom'?: string;
            /** The priority of the secret group the secret is inherited from, if applicable. Example: 10 */
            'priority'?: number;
            /** An array containing data about other places the file has been inherited from, but that are not being used as a secret with the same file path exists with a higher priority. */
            'overriding': {
                /** The value of the secret. Example: "ffffffffffff" */
                'value': any;
                /** The ID of the secret group the secret is inherited from. Example: "secret-2" */
                'inheritedFrom': string;
                /** The priority of the secret group the secret is inherited from. */
                'priority': number;
            }[];
        };
    };
};
declare type GetJobRuntimeenvironmentdetailsCall = (opts: GetJobRuntimeenvironmentdetailsRequest) => Promise<ApiCallResponse<GetJobRuntimeenvironmentdetailsResult>>;
declare type GetJobRuntimeenvironmentdetailsRequest = {
    parameters: GetJobRuntimeenvironmentdetailsParameters;
};
declare type GetJobRuntimeenvironmentdetailsParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the job */
    'jobId': string;
};
/** Get details about the runtime environment accessible by the given job. Also requires the permission 'Project > Secrets > General > Read' */
declare class GetJobRuntimeenvironmentdetailsEndpoint extends GetApiEndpoint<GetJobRuntimeenvironmentdetailsRequest, GetJobRuntimeenvironmentdetailsResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: GetJobRuntimeenvironmentdetailsRequest) => string;
    body: () => undefined;
}

declare type GetJobDeploymentResult = {
    /** Region where this service is deployed and/or built Example: "europe-west" */
    'region'?: string;
    /** Number of instances/replicas running Example: 1 */
    'instances'?: number;
    'internal': {
        /** Full identifier of deployed entity Example: "/example-user/default-project/example-service" */
        'appId': string;
        /** ID of deployed entity Example: "example-service" */
        'nfObjectId': string;
        /** URL of the repository being deployed Example: "https://github.com/northflank/gatsby-with-northflank" */
        'repository': string;
        /** Branch of the repo being deployed Example: "master" */
        'branch': string;
        /** Commit SHA being deployed. 'latest' means the latest commit is automatically being deployed. Example: "latest" */
        'buildSHA': string;
        /** Type of deployed entity Example: "service" */
        'nfObjectType': 'service' | 'job';
    };
} | {
    /** Region where this service is deployed and/or built Example: "europe-west" */
    'region'?: string;
    /** Number of instances/replicas running Example: 1 */
    'instances'?: number;
    'external': {
        /** Path of the external image excluding the hostname Example: "nginx:latest" */
        'imagePath': string;
        /** Registry provider hosting the external image Example: "dockerhub" */
        'registryProvider': 'dockerhub' | 'gcr' | 'gcr-eu' | 'gcr-us' | 'gitlab' | 'github' | 'custom';
        /** Does the image require authentication */
        'privateImage': boolean;
    };
};
declare type GetJobDeploymentCall = (opts: GetJobDeploymentRequest) => Promise<ApiCallResponse<GetJobDeploymentResult>>;
declare type GetJobDeploymentRequest = {
    parameters: GetJobDeploymentParameters;
};
declare type GetJobDeploymentParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the job */
    'jobId': string;
};
/** Gets information about the deployment of the given job. */
declare class GetJobDeploymentEndpoint extends GetApiEndpoint<GetJobDeploymentRequest, GetJobDeploymentResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: GetJobDeploymentRequest) => string;
    body: () => undefined;
}

declare type UpdateJobDeploymentResult = any;
declare type UpdateJobDeploymentCall = (opts: UpdateJobDeploymentRequest) => Promise<ApiCallResponse<UpdateJobDeploymentResult>>;
declare type UpdateJobDeploymentRequest = {
    parameters: UpdateJobDeploymentParameters;
    data: UpdateJobDeploymentData;
};
declare type UpdateJobDeploymentParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the job */
    'jobId': string;
};
declare type UpdateJobDeploymentData = {
    'external': {
        /** Image to be deployed. When not deploying from Dockerhub the URL must be specified. Example: "nginx:latest" */
        'imagePath': string;
        /** ID of the saved credentials to use to access this external image. Example: "example-credentials" */
        'credentials'?: string;
    };
} | {
    'internal': {
        /** ID of the build service to deploy Example: "example-build-service" */
        'id'?: string;
        /** Branch to deploy Example: "master" */
        'branch'?: string;
        /** Commit SHA to deploy, or 'latest' to deploy the most recent commit Example: "latest" */
        'buildSHA'?: any;
        /** ID of the build that should be deployed Example: "premium-guide-6393" */
        'buildId'?: string;
    };
};
/** Updates the deployment settings of the given job. */
declare class UpdateJobDeploymentEndpoint extends PostApiEndpoint<UpdateJobDeploymentRequest, UpdateJobDeploymentResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: UpdateJobDeploymentRequest) => string;
    body: (payload: UpdateJobDeploymentRequest) => string;
}

declare type GetJobContainersResult = {
    /** An array of containers. */
    'containers': {
        /** The name of the container. Example: "example-service-78b4d4459d-sbtn8" */
        'name': string;
        /** The timestamp the container was created. Example: 1611241087 */
        'createdAt': number;
        /** The current status of the container. Example: "TASK_RUNNING" */
        'status': 'TASK_RUNNING' | 'TASK_STARTING' | 'TASK_STAGING' | 'TASK_KILLING' | 'TASK_KILLED' | 'TASK_FAILED' | 'TASK_FINISHED';
        /** The timestamp the container was last updated. Example: 1611241087 */
        'updatedAt': number;
    }[];
};
declare type GetJobContainersCall = (opts: GetJobContainersRequest) => Promise<ApiCallResponse<GetJobContainersResult>>;
declare type GetJobContainersRequest = {
    parameters: GetJobContainersParameters;
    options?: GetJobContainersOptions;
};
declare type GetJobContainersParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the job */
    'jobId': string;
};
declare type GetJobContainersOptions = {
    /** The number of results to display per request. Maximum of 100 results per page. */
    'per_page'?: number;
    /** The page number to access. */
    'page'?: number;
    /** The cursor returned from the previous page of results, used to request the next page. */
    'cursor'?: string;
};
/** Gets a list of containers for the given job. */
declare class GetJobContainersEndpoint extends GetApiEndpoint<GetJobContainersRequest, GetJobContainersResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: GetJobContainersRequest) => string;
    body: () => undefined;
}

declare type GetJobBranchesResult = {
    /** A list of branches for this repository. */
    'branches'?: {
        /** Name of the branch. Example: "main" */
        'name': string;
        'id': string;
        /** Details about the most recent commit on the branch. */
        'commit': {
            /** SHA identifier of the commit. Example: "f8aca180e989be62cba71db629d2ede05f2d10c4" */
            'sha': string;
            /** Details about the commit author. */
            'author': {
                /** The login of the commit author. Example: "northflank" */
                'login': string;
            };
            /** Commit message of the commit. Example: "Initial commit" */
            'message'?: string;
            /** Timestamp of the commit. Example: "2021-09-17T14:04:39.000Z" */
            'date'?: string;
        };
    }[];
};
declare type GetJobBranchesCall = (opts: GetJobBranchesRequest) => Promise<ApiCallResponse<GetJobBranchesResult>>;
declare type GetJobBranchesRequest = {
    parameters: GetJobBranchesParameters;
    options?: GetJobBranchesOptions;
};
declare type GetJobBranchesParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the job */
    'jobId': string;
};
declare type GetJobBranchesOptions = {
    /** The number of results to display per request. Maximum of 100 results per page. */
    'per_page'?: number;
    /** The page number to access. */
    'page'?: number;
    /** The cursor returned from the previous page of results, used to request the next page. */
    'cursor'?: string;
};
/** Gets information about the branches of the given job. */
declare class GetJobBranchesEndpoint extends GetApiEndpoint<GetJobBranchesRequest, GetJobBranchesResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: GetJobBranchesRequest) => string;
    body: () => undefined;
}

declare type GetJobPullrequestsResult = {
    /** A list of pull requests for this repository. */
    'pullRequests'?: {
        /** ID number of the pull request. Example: 1 */
        'id': number;
        /** Status of the pull request. Example: "OPEN" */
        'state': string;
        /** Title of the pull request. Example: "Add new feature handling" */
        'title': string;
        /** Name of the branch the pull request is merging from. Example: "feature/new-feature" */
        'source': string;
        /** Name of the branch the pull request is being merged into. Example: "main" */
        'destination': string;
        /** SHA of the most recent commit of the pull request. Example: "4f101d8821aeb3e4f81f95f3e886a2759ba7b9db" */
        'sha': string;
        /** The timestamp the pull request was opened. Example: "2021-03-22T11:05:52.000Z" */
        'created_at': string;
        /** The timestamp the pull request was last updated at. Example: "2021-05-11T16:05:43.000Z" */
        'updated_at': string;
        'html_url': string;
    }[];
};
declare type GetJobPullrequestsCall = (opts: GetJobPullrequestsRequest) => Promise<ApiCallResponse<GetJobPullrequestsResult>>;
declare type GetJobPullrequestsRequest = {
    parameters: GetJobPullrequestsParameters;
    options?: GetJobPullrequestsOptions;
};
declare type GetJobPullrequestsParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the job */
    'jobId': string;
};
declare type GetJobPullrequestsOptions = {
    /** The number of results to display per request. Maximum of 100 results per page. */
    'per_page'?: number;
    /** The page number to access. */
    'page'?: number;
    /** The cursor returned from the previous page of results, used to request the next page. */
    'cursor'?: string;
};
/** Gets information about the pull-requests of the given job. */
declare class GetJobPullrequestsEndpoint extends GetApiEndpoint<GetJobPullrequestsRequest, GetJobPullrequestsResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: GetJobPullrequestsRequest) => string;
    body: () => undefined;
}

declare type ListRegistrycredentialsResult = {
    /** An array of credentials saved to this account. */
    'credentials': {
        /** Identifier for the credentials. Example: "example-credentials" */
        'id': string;
        /** Name of the saved credentials. Example: "Example Credentials" */
        'name': string;
        /** Description of the saved credentials. Example: "This is a set of saved credentials." */
        'description': string;
        /** Data about whether the credentials are restricted to certain projects. */
        'restrictions': {
            /** Whether the credentials are restricted to specific projects. Example: true */
            'restricted': boolean;
            /** An array of projects the credentials are restricted to, if applicable. */
            'projects': string[];
        };
        /** The registry provider associated with this set of credentials. Example: "dockerhub" */
        'provider': 'dockerhub' | 'gcr' | 'gcr-eu' | 'gcr-us' | 'gitlab' | 'github' | 'custom';
    }[];
};
declare type ListRegistrycredentialsCall = (opts: ListRegistrycredentialsRequest) => Promise<ApiCallResponse<ListRegistrycredentialsResult>>;
declare type ListRegistrycredentialsRequest = {
    options?: ListRegistrycredentialsOptions;
};
declare type ListRegistrycredentialsOptions = {
    /** The number of results to display per request. Maximum of 100 results per page. */
    'per_page'?: number;
    /** The page number to access. */
    'page'?: number;
    /** The cursor returned from the previous page of results, used to request the next page. */
    'cursor'?: string;
};
/** Lists the container registry credentials saved to this account. Does not display secrets. */
declare class ListRegistrycredentialsEndpoint extends GetApiEndpoint<ListRegistrycredentialsRequest, ListRegistrycredentialsResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: ListRegistrycredentialsRequest) => string;
    body: () => undefined;
}

declare type AddRegistrycredentialsResult = {
    /** Identifier for the credentials. Example: "example-credentials" */
    'id': string;
    /** Name of the saved credentials. Example: "Example Credentials" */
    'name': string;
    /** Description of the saved credentials. Example: "This is a set of saved credentials." */
    'description': string;
    /** Data about whether the credentials are restricted to certain projects. */
    'restrictions': {
        /** Whether the credentials are restricted to specific projects. Example: true */
        'restricted': boolean;
        /** An array of projects the credentials are restricted to, if applicable. */
        'projects': string[];
    };
    /** The registry provider associated with this set of credentials. Example: "dockerhub" */
    'provider': 'dockerhub' | 'gcr' | 'gcr-eu' | 'gcr-us' | 'gitlab' | 'github' | 'custom';
};
declare type AddRegistrycredentialsCall = (opts: AddRegistrycredentialsRequest) => Promise<ApiCallResponse<AddRegistrycredentialsResult>>;
declare type AddRegistrycredentialsRequest = {
    data: AddRegistrycredentialsData;
};
declare type AddRegistrycredentialsData = {
    /** Name of the credentials. Example: "Example Credentials" */
    'name': string;
    /** Description of the credentials. Example: "This is a set of saved credentials." */
    'description': string;
    /** The registry provider associated with this set of credentials. Example: "dockerhub" */
    'provider': 'dockerhub' | 'gcr' | 'gcr-eu' | 'gcr-us' | 'gitlab' | 'github' | 'custom';
    /** Data about whether the credentials are restricted to certain projects. */
    'restrictions'?: {
        /** Whether the credentials are restricted to specific projects. Example: true */
        'restricted'?: boolean;
        /** An array of projects the credentials are restricted to, if applicable. */
        'projects'?: string[];
    };
    /** The registry credential data to save. Example: {"auths":{"https://index.docker.io/v1/":{"auth":"[YOUR AUTH KEY]"}}} */
    'data': any;
};
/** Adds a new set of container registry credentials to this account. */
declare class AddRegistrycredentialsEndpoint extends PostApiEndpoint<AddRegistrycredentialsRequest, AddRegistrycredentialsResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: AddRegistrycredentialsRequest) => string;
    body: (payload: AddRegistrycredentialsRequest) => string;
}

declare type GetRegistrycredentialsResult = {
    /** Identifier for the credentials. Example: "example-credentials" */
    'id': string;
    /** Name of the saved credentials. Example: "Example Credentials" */
    'name': string;
    /** Description of the saved credentials. Example: "This is a set of saved credentials." */
    'description': string;
    /** Data about whether the credentials are restricted to certain projects. */
    'restrictions': {
        /** Whether the credentials are restricted to specific projects. Example: true */
        'restricted': boolean;
        /** An array of projects the credentials are restricted to, if applicable. */
        'projects': string[];
    };
    /** The registry provider associated with this set of credentials. Example: "dockerhub" */
    'provider': 'dockerhub' | 'gcr' | 'gcr-eu' | 'gcr-us' | 'gitlab' | 'github' | 'custom';
    'data'?: any;
};
declare type GetRegistrycredentialsCall = (opts: GetRegistrycredentialsRequest) => Promise<ApiCallResponse<GetRegistrycredentialsResult>>;
declare type GetRegistrycredentialsRequest = {
    parameters: GetRegistrycredentialsParameters;
};
declare type GetRegistrycredentialsParameters = {
    /** ID of the registry credential */ 'credentialId': string;
};
/** Views a set of registry credential data. */
declare class GetRegistrycredentialsEndpoint extends GetApiEndpoint<GetRegistrycredentialsRequest, GetRegistrycredentialsResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: GetRegistrycredentialsRequest) => string;
    body: () => undefined;
}

declare type DeleteRegistrycredentialsResult = any;
declare type DeleteRegistrycredentialsCall = (opts: DeleteRegistrycredentialsRequest) => Promise<ApiCallResponse<DeleteRegistrycredentialsResult>>;
declare type DeleteRegistrycredentialsRequest = {
    parameters: DeleteRegistrycredentialsParameters;
};
declare type DeleteRegistrycredentialsParameters = {
    /** ID of the registry credential */ 'credentialId': string;
};
/** Deletes a set of registry credential data. */
declare class DeleteRegistrycredentialsEndpoint extends DeleteApiEndpoint<DeleteRegistrycredentialsRequest, DeleteRegistrycredentialsResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: DeleteRegistrycredentialsRequest) => string;
    body: () => undefined;
}

declare type UpdateRegistrycredentialsResult = any;
declare type UpdateRegistrycredentialsCall = (opts: UpdateRegistrycredentialsRequest) => Promise<ApiCallResponse<UpdateRegistrycredentialsResult>>;
declare type UpdateRegistrycredentialsRequest = {
    parameters: UpdateRegistrycredentialsParameters;
    data: UpdateRegistrycredentialsData;
};
declare type UpdateRegistrycredentialsParameters = {
    /** ID of the registry credential */ 'credentialId': string;
};
declare type UpdateRegistrycredentialsData = {
    /** Description of the credentials. Example: "This is a set of saved credentials." */
    'description'?: string;
    /** Data about whether the credentials are restricted to certain projects. */
    'restrictions'?: {
        /** Whether the credentials are restricted to specific projects. Example: true */
        'restricted': boolean;
        /** An array of projects the credentials are restricted to, if applicable. */
        'projects'?: string[];
    };
    /** The registry credential data to save. Example: {"auths":{"https://index.docker.io/v1/":{"auth":"[YOUR AUTH KEY]"}}} */
    'data'?: any;
};
/** Updates a set of registry credential data. */
declare class UpdateRegistrycredentialsEndpoint extends PostApiEndpoint<UpdateRegistrycredentialsRequest, UpdateRegistrycredentialsResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: UpdateRegistrycredentialsRequest) => string;
    body: (payload: UpdateRegistrycredentialsRequest) => string;
}

declare type ListDomainsResult = {
    /** A list of domains registered to this account. */
    'domains': {
        /** The domain name. Example: "example.com" */
        'name': string;
        /** The status of the domain verification. Example: "verified" */
        'status': 'pending' | 'verified';
        /** The hostname to add to your domain's DNS records as a TXT record to verify the domain. Example: "nfverify1608026055" */
        'hostname': string;
        /** The token to add as the content of the TXT record to verify the domain. Example: "e596987b52855a4a773ef580ce2985d7746b37ce8b2a443d20fa27b913d8f57" */
        'token': string;
    }[];
};
declare type ListDomainsCall = (opts: ListDomainsRequest) => Promise<ApiCallResponse<ListDomainsResult>>;
declare type ListDomainsRequest = {
    options?: ListDomainsOptions;
};
declare type ListDomainsOptions = {
    /** The number of results to display per request. Maximum of 100 results per page. */
    'per_page'?: number;
    /** The page number to access. */
    'page'?: number;
    /** The cursor returned from the previous page of results, used to request the next page. */
    'cursor'?: string;
};
/** Lists available domains */
declare class ListDomainsEndpoint extends GetApiEndpoint<ListDomainsRequest, ListDomainsResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: ListDomainsRequest) => string;
    body: () => undefined;
}

declare type CreateDomainResult = {
    /** The domain name. Example: "example.com" */
    'name': string;
    /** The status of the domain verification. Example: "pending" */
    'status': 'pending' | 'verified';
    /** The hostname to add to your domain's DNS records as a TXT record to verify the domain. Example: "nfverify1608026055" */
    'hostname': string;
    /** The token to add as the content of the TXT record to verify the domain. Example: "e596987b52855a4a773ef580ce2985d7746b37ce8b2a443d20fa27b913d8f57" */
    'token': string;
} | any;
declare type CreateDomainCall = (opts: CreateDomainRequest) => Promise<ApiCallResponse<CreateDomainResult>>;
declare type CreateDomainRequest = {
    data: CreateDomainData;
};
declare type CreateDomainData = {
    /** The domain name to register. Example: "example.com" */
    'domain': string;
};
/** Registers a new domain */
declare class CreateDomainEndpoint extends PostApiEndpoint<CreateDomainRequest, CreateDomainResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: CreateDomainRequest) => string;
    body: (payload: CreateDomainRequest) => string;
}

declare type GetDomainResult = {
    /** The domain name. Example: "example.com" */
    'name': string;
    /** The status of the domain verification. Example: "verified" */
    'status': 'pending' | 'verified';
    /** The hostname to add to your domain's DNS records as a TXT record to verify the domain. Example: "nfverify1608026055" */
    'hostname': string;
    /** The token to add as the content of the TXT record to verify the domain. Example: "e596987b52855a4a773ef580ce2985d7746b37ce8b2a443d20fa27b913d8f57" */
    'token': string;
    /** A list of subdomains added to this domain. */
    'subdomains': {
        /** The subdomain added, or -default for the empty subdomain. Example: "app" */
        'name': string;
        /** The full domain including the subdomain. Example: "app.example.com" */
        'fullName': string;
    }[];
};
declare type GetDomainCall = (opts: GetDomainRequest) => Promise<ApiCallResponse<GetDomainResult>>;
declare type GetDomainRequest = {
    parameters: GetDomainParameters;
};
declare type GetDomainParameters = {
    /** Name of the domain */ 'domain': string;
};
/** Gets details about domain */
declare class GetDomainEndpoint extends GetApiEndpoint<GetDomainRequest, GetDomainResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: GetDomainRequest) => string;
    body: () => undefined;
}

declare type DeleteDomainResult = any;
declare type DeleteDomainCall = (opts: DeleteDomainRequest) => Promise<ApiCallResponse<DeleteDomainResult>>;
declare type DeleteDomainRequest = {
    parameters: DeleteDomainParameters;
};
declare type DeleteDomainParameters = {
    /** Name of the domain */ 'domain': string;
};
/** Deletes a domain and each of its registered subdomains. */
declare class DeleteDomainEndpoint extends DeleteApiEndpoint<DeleteDomainRequest, DeleteDomainResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: DeleteDomainRequest) => string;
    body: () => undefined;
}

declare type VerifyDomainResult = any | any;
declare type VerifyDomainCall = (opts: VerifyDomainRequest) => Promise<ApiCallResponse<VerifyDomainResult>>;
declare type VerifyDomainRequest = {
    parameters: VerifyDomainParameters;
};
declare type VerifyDomainParameters = {
    /** Name of the domain */ 'domain': string;
};
/** Attempts to verify the domain */
declare class VerifyDomainEndpoint extends PostApiEndpoint<VerifyDomainRequest, VerifyDomainResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: VerifyDomainRequest) => string;
    body: () => undefined;
}

declare type AddDomainSubdomainResult = {
    /** The record type to use for the DNS record to verify the subdomain - always CNAME for subdomains. Example: "CNAME" */
    'recordType': string;
    /** The subdomain. Example: "site" */
    'name': string;
    /** The full domain name with subdomain Example: "site.example.com" */
    'fullName': string;
    /** The content to set the DNS record to Example: "site.example.com.user-1234.dns.northflank.app" */
    'content': string;
    /** Whether the subdomain has been verified successfully and can be used. */
    'verified': boolean;
} | any;
declare type AddDomainSubdomainCall = (opts: AddDomainSubdomainRequest) => Promise<ApiCallResponse<AddDomainSubdomainResult>>;
declare type AddDomainSubdomainRequest = {
    parameters: AddDomainSubdomainParameters;
    data: AddDomainSubdomainData;
};
declare type AddDomainSubdomainParameters = {
    /** Name of the domain */ 'domain': string;
};
declare type AddDomainSubdomainData = {
    /** A subdomain to be added. Example: "site" */
    'subdomain': string;
};
/** Adds a new subdomain to the domain. */
declare class AddDomainSubdomainEndpoint extends PostApiEndpoint<AddDomainSubdomainRequest, AddDomainSubdomainResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: AddDomainSubdomainRequest) => string;
    body: (payload: AddDomainSubdomainRequest) => string;
}

declare type GetSubdomainResult = {
    /** The record type to use for the DNS record to verify the subdomain - always CNAME for subdomains. Example: "CNAME" */
    'recordType': string;
    /** The subdomain. Example: "site" */
    'name': string;
    /** The full domain name with subdomain Example: "site.example.com" */
    'fullName': string;
    /** The content to set the DNS record to Example: "site.example.com.user-1234.dns.northflank.app" */
    'content': string;
    /** Whether the subdomain has been verified successfully and can be used. Example: true */
    'verified': boolean;
};
declare type GetSubdomainCall = (opts: GetSubdomainRequest) => Promise<ApiCallResponse<GetSubdomainResult>>;
declare type GetSubdomainRequest = {
    parameters: GetSubdomainParameters;
};
declare type GetSubdomainParameters = {
    /** Name of the domain */ 'domain': string;
    /** Name of the subdomain */
    'subdomain': string;
};
/** Gets details about the given subdomain */
declare class GetSubdomainEndpoint extends GetApiEndpoint<GetSubdomainRequest, GetSubdomainResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: GetSubdomainRequest) => string;
    body: () => undefined;
}

declare type DeleteSubdomainResult = any | any;
declare type DeleteSubdomainCall = (opts: DeleteSubdomainRequest) => Promise<ApiCallResponse<DeleteSubdomainResult>>;
declare type DeleteSubdomainRequest = {
    parameters: DeleteSubdomainParameters;
};
declare type DeleteSubdomainParameters = {
    /** Name of the domain */ 'domain': string;
    /** Name of the subdomain */
    'subdomain': string;
};
/** Removes a subdomain from a domain. */
declare class DeleteSubdomainEndpoint extends DeleteApiEndpoint<DeleteSubdomainRequest, DeleteSubdomainResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: DeleteSubdomainRequest) => string;
    body: () => undefined;
}

declare type VerifySubdomainResult = any | any;
declare type VerifySubdomainCall = (opts: VerifySubdomainRequest) => Promise<ApiCallResponse<VerifySubdomainResult>>;
declare type VerifySubdomainRequest = {
    parameters: VerifySubdomainParameters;
};
declare type VerifySubdomainParameters = {
    /** Name of the domain */ 'domain': string;
    /** Name of the subdomain */
    'subdomain': string;
};
/** Gets details about the given subdomain */
declare class VerifySubdomainEndpoint extends PostApiEndpoint<VerifySubdomainRequest, VerifySubdomainResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: VerifySubdomainRequest) => string;
    body: () => undefined;
}

declare type AssignSubdomainServiceResult = any;
declare type AssignSubdomainServiceCall = (opts: AssignSubdomainServiceRequest) => Promise<ApiCallResponse<AssignSubdomainServiceResult>>;
declare type AssignSubdomainServiceRequest = {
    parameters: AssignSubdomainServiceParameters;
    data: AssignSubdomainServiceData;
};
declare type AssignSubdomainServiceParameters = {
    /** Name of the domain */ 'domain': string;
    /** Name of the subdomain */
    'subdomain': string;
};
declare type AssignSubdomainServiceData = {
    /** The ID of the service to assign the subdomain to. Example: "example-service" */
    'serviceId': string;
    /** The ID of the project the service belongs to. Example: "default-project" */
    'projectId': string;
    /** The name of the port that will be assigned to the subdomain. Example: "port-1" */
    'portName': string;
};
/** Assigns a service port to the given subdomain */
declare class AssignSubdomainServiceEndpoint extends PostApiEndpoint<AssignSubdomainServiceRequest, AssignSubdomainServiceResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: AssignSubdomainServiceRequest) => string;
    body: (payload: AssignSubdomainServiceRequest) => string;
}

declare type UnassignSubdomainResult = any;
declare type UnassignSubdomainCall = (opts: UnassignSubdomainRequest) => Promise<ApiCallResponse<UnassignSubdomainResult>>;
declare type UnassignSubdomainRequest = {
    parameters: UnassignSubdomainParameters;
};
declare type UnassignSubdomainParameters = {
    /** Name of the domain */ 'domain': string;
    /** Name of the subdomain */
    'subdomain': string;
};
/** Removes a subdomain from its assigned service */
declare class UnassignSubdomainEndpoint extends DeleteApiEndpoint<UnassignSubdomainRequest, UnassignSubdomainResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: UnassignSubdomainRequest) => string;
    body: () => undefined;
}

declare type ListPlansResult = {
    /** An array of available plans */
    'plans': {
        /** The ID of the plan. Example: "nf-compute-20" */
        'id': string;
        /** The name of the plan. Example: "nf-compute-20" */
        'name': string;
        /** The currency code of the currency used by this plan. Example: "usd" */
        'currency': string;
        /** The approximate monthly (30 days) cost of the plan. Example: 4.4 */
        'amountPerMonth': number;
        /** The hourly cost of the plan. Example: 0.0061 */
        'amountPerHour': number;
        /** The CPU resource of the plan, in vCPUs. Example: 0.2 */
        'cpuResource': number;
        /** The memory resource of the plan, in megabytes Example: 512 */
        'ramResource': number;
    }[];
};
declare type ListPlansCall = (opts: ListPlansRequest) => Promise<ApiCallResponse<ListPlansResult>>;
declare type ListPlansRequest = {};
/** Lists available billing plans */
declare class ListPlansEndpoint extends GetApiEndpoint<ListPlansRequest, ListPlansResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: ListPlansRequest) => string;
    body: () => undefined;
}

declare type ListRegionsResult = {
    /** An array of regions */
    'regions': {
        /** The ID of the region. Example: "europe-west" */
        'id': string;
    }[];
};
declare type ListRegionsCall = (opts: ListRegionsRequest) => Promise<ApiCallResponse<ListRegionsResult>>;
declare type ListRegionsRequest = {};
/** Lists available project regions */
declare class ListRegionsEndpoint extends GetApiEndpoint<ListRegionsRequest, ListRegionsResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: ListRegionsRequest) => string;
    body: () => undefined;
}

declare type GetDnsidResult = {
    /** The partially random string associated with the authenticated account, used for generating DNS entries. Example: "exam-1234" */
    'dns': string;
};
declare type GetDnsidCall = (opts: GetDnsidRequest) => Promise<ApiCallResponse<GetDnsidResult>>;
declare type GetDnsidRequest = {};
/** Returns the partially random string used when generating host names for the authenticated account. */
declare class GetDnsidEndpoint extends GetApiEndpoint<GetDnsidRequest, GetDnsidResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: GetDnsidRequest) => string;
    body: () => undefined;
}

declare type ListVcsResult = {
    /** The version control accounts linked to this Northflank account. */
    'vcsAccountLinks': {
        /** The type of version control provider the account is linked to. Example: "self-hosted" */
        'vcsService': 'bitbucket' | 'gitlab' | 'github' | 'self-hosted';
        /** The email of the account linked with this provider. Example: "email@example.com" */
        'email': string;
        /** The username of the account linked with this provider. Example: "vcs-user" */
        'login': string;
        /** The name of the version control provider. Only returned for self-hosted links. Example: "Self-hosted VCS" */
        'name'?: string;
        /** The url of the version control provider. Only returned for self-hosted links. Example: "https://git.example.com" */
        'vcsUrl'?: string;
        /** The type of the self-hosted vcs provider. Only returned for self-hosted links. Example: "gitlab-ee" */
        'vcsType'?: 'gitlab-ee';
        /** The ID of the self-hosted vcs provider. Only returned for self-hosted links. Example: "example-team/self-hosted-vcs" */
        'internalId'?: string;
        /** The name of the team the self-hosted vcs belongs to. Only returned for self-hosted links. Example: "Example Team" */
        'entityName'?: string;
    }[];
};
declare type ListVcsCall = (opts: ListVcsRequest) => Promise<ApiCallResponse<ListVcsResult>>;
declare type ListVcsRequest = {};
/** Lists linked version control providers */
declare class ListVcsEndpoint extends GetApiEndpoint<ListVcsRequest, ListVcsResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: ListVcsRequest) => string;
    body: () => undefined;
}

declare type ListSecretsResult = {
    /** An array of secret groups */
    'secrets': {
        /** Identifier for the secret group Example: "example-secret-group" */
        'id': string;
        /** ID of the project that the secret group belongs to Example: "default-project" */
        'projectId': string;
        /** Secret group name Example: "Example secret group" */
        'name': string;
        /** A short description of the secret group Example: "This is the secret group description" */
        'description'?: string;
        /** The type of the created secret group Example: "environment" */
        'secretType': 'environment-arguments' | 'environment' | 'arguments';
        /** The priority with which different secret groups will be merged Example: 10 */
        'priority': number;
        /** Restriction settings of the secret */
        'restrictions': {
            /** Is the secret restricted Example: true */
            'restricted'?: boolean;
            /** List of Northflank services & jobs the secret is restricted to */
            'nfObjects'?: {
                /** ID of the entity the secret is restricted to. Example: "example-service" */
                'id': string;
                /** Type of the entity the secret is restricted to. Example: "service" */
                'type': 'service' | 'job';
            }[];
        };
    }[];
};
declare type ListSecretsCall = (opts: ListSecretsRequest) => Promise<ApiCallResponse<ListSecretsResult>>;
declare type ListSecretsRequest = {
    parameters: ListSecretsParameters;
    options?: ListSecretsOptions;
};
declare type ListSecretsParameters = {
    /** ID of the project */ 'projectId': string;
};
declare type ListSecretsOptions = {
    /** The number of results to display per request. Maximum of 100 results per page. */
    'per_page'?: number;
    /** The page number to access. */
    'page'?: number;
    /** The cursor returned from the previous page of results, used to request the next page. */
    'cursor'?: string;
};
/** Gets a list of secrets belonging to the project */
declare class ListSecretsEndpoint extends GetApiEndpoint<ListSecretsRequest, ListSecretsResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: ListSecretsRequest) => string;
    body: () => undefined;
}

declare type CreateSecretResult = {
    /** Identifier for the secret group Example: "example-secret-group" */
    'id': string;
    /** Secret group name Example: "Example secret group" */
    'name': string;
    /** A short description of the secret group Example: "This is the secret group description" */
    'description'?: string;
    /** The type of the created secret group Example: "environment" */
    'secretType': 'environment-arguments' | 'environment' | 'arguments';
    /** ID of the project that the secret group belongs to Example: "default-project" */
    'projectId': string;
    /** The priority with which different secret groups will be merged Example: 10 */
    'priority': number;
    /** Restriction settings of the secret */
    'restrictions': {
        /** Is the secret restricted Example: true */
        'restricted'?: boolean;
        /** List of Northflank services & jobs the secret is restricted to */
        'nfObjects'?: {
            /** ID of the entity the secret is restricted to. Example: "example-service" */
            'id': string;
            /** Type of the entity the secret is restricted to. Example: "service" */
            'type': 'service' | 'job';
        }[];
    };
} | any;
declare type CreateSecretCall = (opts: CreateSecretRequest) => Promise<ApiCallResponse<CreateSecretResult>>;
declare type CreateSecretRequest = {
    parameters: CreateSecretParameters;
    data: CreateSecretData;
};
declare type CreateSecretParameters = {
    /** ID of the project */ 'projectId': string;
};
declare type CreateSecretData = {
    /** The name of the secret. Example: "Example Secret" */
    'name': string;
    /** A description of the secret. Example: "A description" */
    'description'?: string;
    /** The type of the created secret Example: "environment" */
    'secretType': 'environment-arguments' | 'environment' | 'arguments';
    /** The priority with which different secrets will be merged. Example: 10 */
    'priority': number;
    /** Restriction settings of the secret */
    'restrictions'?: {
        /** Is the secret restricted Example: true */
        'restricted'?: boolean;
        /** List of Northflank services & jobs the secret is restricted to */
        'nfObjects'?: {
            /** ID of the entity the secret is restricted to. Example: "example-service" */
            'id': string;
            /** Type of the entity the secret is restricted to. Example: "service" */
            'type': 'service' | 'job';
        }[];
    };
    /** An array of addons to link to this secret group. */
    'addonDependencies'?: {
        /** The internal id of the addon to link. Example: "example-addon" */
        'addonId': string;
        /** An array of objects containing details about the keys to link to this secret group. */
        'keys': {
            /** The name of the key to link. Example: "username" */
            'keyName': string;
            /** An array of aliases for the key. */
            'aliases'?: string[];
        }[];
    }[];
    'secrets'?: {
        /** Secret variables as JSON object, encrypted at rest. Keys must only contain letters and numbers separated with underscores, may not start with a number Example: {"NODE_ENV":"production","MONGO_DB":"some_connection_string"} */
        'variables'?: any;
        /** Secret files as JSON object, encrypted at rest. File path must be absolute Example: {"/dir/fileName":{"data":"VGhpcyBpcyBhbiBleGFtcGxlIHdpdGggYSB0ZW1wbGF0ZWQgJHtOT0RFX0VOVn0gdmFyaWFibGU=","encoding":"utf-8"}} */
        'files'?: any;
    };
};
/** Creates a secret with the specified payload */
declare class CreateSecretEndpoint extends PostApiEndpoint<CreateSecretRequest, CreateSecretResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: CreateSecretRequest) => string;
    body: (payload: CreateSecretRequest) => string;
}

declare type GetSecretResult = {
    /** Identifier for the secret group Example: "example-secret-group" */
    'id': string;
    /** Secret group name Example: "Example secret group" */
    'name': string;
    /** A short description of the secret group Example: "This is the secret group description" */
    'description'?: string;
    /** The type of the created secret group Example: "environment" */
    'secretType': 'environment-arguments' | 'environment' | 'arguments';
    /** ID of the project that the secret group belongs to Example: "default-project" */
    'projectId': string;
    /** The priority with which different secret groups will be merged Example: 10 */
    'priority': number;
    /** Restriction settings of the secret */
    'restrictions': {
        /** Is the secret restricted Example: true */
        'restricted'?: boolean;
        /** List of Northflank services & jobs the secret is restricted to */
        'nfObjects'?: {
            /** ID of the entity the secret is restricted to. Example: "example-service" */
            'id': string;
            /** Type of the entity the secret is restricted to. Example: "service" */
            'type': 'service' | 'job';
        }[];
    };
    /** The timestamp when the secret group was created at Example: "2021-01-01 12:00:00.000Z" */
    'createdAt': string;
    /** The timestamp the secret group was last updated at Example: "2021-01-01 12:00:00.000Z" */
    'updatedAt': string;
    /** Decrypted secret data. If the `show` parameter is set to `this`, this will only contain secrets saved to this group. If the `show` parameter is set to `inherited`, this will only contain secrets inherited from linked addons. Otherwise, this will contain both. Example: {"variables":{"a_key":"a_secret","b_key":"b_secret"},"files":{"/dir/fileName":{"data":"VGhpcyBpcyBhbiBleGFtcGxlIHdpdGggYSB0ZW1wbGF0ZWQgJHtOT0RFX0VOVn0gdmFyaWFibGU=","encoding":"utf-8"}}} */
    'secrets': any;
};
declare type GetSecretCall = (opts: GetSecretRequest) => Promise<ApiCallResponse<GetSecretResult>>;
declare type GetSecretRequest = {
    parameters: GetSecretParameters;
    options?: GetSecretOptions;
};
declare type GetSecretParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the secret */
    'secretId': string;
};
declare type GetSecretOptions = {
    /** Which secrets to display - if set to `this` only the group's secrets are displayed, if set to `inherited` only secrets from linked addons are displayed, if set to `all` or not provided, both are displayed. */
    'show'?: string;
};
/** View a secret including its contents */
declare class GetSecretEndpoint extends GetApiEndpoint<GetSecretRequest, GetSecretResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: GetSecretRequest) => string;
    body: () => undefined;
}

declare type DeleteSecretResult = any;
declare type DeleteSecretCall = (opts: DeleteSecretRequest) => Promise<ApiCallResponse<DeleteSecretResult>>;
declare type DeleteSecretRequest = {
    parameters: DeleteSecretParameters;
};
declare type DeleteSecretParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the secret */
    'secretId': string;
};
/** Delete a secret */
declare class DeleteSecretEndpoint extends DeleteApiEndpoint<DeleteSecretRequest, DeleteSecretResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: DeleteSecretRequest) => string;
    body: () => undefined;
}

declare type UpdateSecretResult = any;
declare type UpdateSecretCall = (opts: UpdateSecretRequest) => Promise<ApiCallResponse<UpdateSecretResult>>;
declare type UpdateSecretRequest = {
    parameters: UpdateSecretParameters;
    data: UpdateSecretData;
};
declare type UpdateSecretParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the secret */
    'secretId': string;
};
declare type UpdateSecretData = {
    /** A description of the secret. Example: "A description" */
    'description'?: string;
    /** The priority with which different secrets will be merged. Example: 10 */
    'priority'?: number;
    /** Restriction settings of the secret */
    'restrictions'?: {
        /** Is the secret restricted Example: true */
        'restricted'?: boolean;
        /** List of Northflank services & jobs the secret is restricted to */
        'nfObjects'?: {
            /** ID of the entity the secret is restricted to. Example: "example-service" */
            'id': string;
            /** Type of the entity the secret is restricted to. Example: "service" */
            'type': 'service' | 'job';
        }[];
    };
    /** An array of addons to link to this secret group. If provided, this will overwrite any existing linked addons. */
    'addonDependencies'?: {
        /** The internal id of the addon to link. Example: "example-addon" */
        'addonId': string;
        /** An array of objects containing details about the keys to link to this secret group. */
        'keys': {
            /** The name of the key to link. Example: "username" */
            'keyName': string;
            /** An array of aliases for the key. */
            'aliases'?: string[];
        }[];
    }[];
    /** The type of the created secret Example: "environment" */
    'secretType'?: 'environment-arguments' | 'environment' | 'arguments';
    'secrets'?: {
        /** Secret variables as JSON object, encrypted at rest. Keys must only contain letters and numbers separated with underscores, may not start with a number Example: {"NODE_ENV":"production","MONGO_DB":"some_connection_string"} */
        'variables'?: any;
        /** Secret files as JSON object, encrypted at rest. File path must be absolute Example: {"/dir/fileName":{"data":"VGhpcyBpcyBhbiBleGFtcGxlIHdpdGggYSB0ZW1wbGF0ZWQgJHtOT0RFX0VOVn0gdmFyaWFibGU=","encoding":"utf-8"}} */
        'files'?: any;
    };
};
/** Update a secret */
declare class UpdateSecretEndpoint extends PostApiEndpoint<UpdateSecretRequest, UpdateSecretResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: UpdateSecretRequest) => string;
    body: (payload: UpdateSecretRequest) => string;
}

declare type GetSecretdetailsResult = {
    /** Identifier for the secret group Example: "example-secret-group" */
    'id': string;
    /** Secret group name Example: "Example secret group" */
    'name': string;
    /** A short description of the secret group Example: "This is the secret group description" */
    'description'?: string;
    /** The type of the created secret group Example: "environment" */
    'secretType': 'environment-arguments' | 'environment' | 'arguments';
    /** ID of the project that the secret group belongs to Example: "default-project" */
    'projectId': string;
    /** The priority with which different secret groups will be merged Example: 10 */
    'priority': number;
    /** Restriction settings of the secret */
    'restrictions': {
        /** Is the secret restricted Example: true */
        'restricted'?: boolean;
        /** List of Northflank services & jobs the secret is restricted to */
        'nfObjects'?: {
            /** ID of the entity the secret is restricted to. Example: "example-service" */
            'id': string;
            /** Type of the entity the secret is restricted to. Example: "service" */
            'type': 'service' | 'job';
        }[];
    };
    /** The timestamp when the secret group was created at Example: "2021-01-01 12:00:00.000Z" */
    'createdAt': string;
    /** The timestamp the secret group was last updated at Example: "2021-01-01 12:00:00.000Z" */
    'updatedAt': string;
    /** Decrypted secret data from secrets saved to this group. Example: {"variables":{"a_key":"a_secret","b_key":"b_secret"},"files":{"/dir/fileName":{"data":"VGhpcyBpcyBhbiBleGFtcGxlIHdpdGggYSB0ZW1wbGF0ZWQgJHtOT0RFX0VOVn0gdmFyaWFibGU=","encoding":"utf-8"}}} */
    'secrets': any;
    /** Details about linked addons. */
    'addonSecrets': {
        /** The ID of the linked addon Example: "example-addon" */
        'id': string;
        /** The name of the linked addon Example: "Example Addon" */
        'name': string;
        /** The addon type of the linked addon Example: "mongodb" */
        'addonType': string;
        /** The version of the linked addon Example: "4.4.1" */
        'version': string;
        /** Decrypted secret data. If the `show` parameter is set to `group`, this will only contain secrets saved to this group. If the `show` parameter is set to `inherited`, this will only contain secrets inherited from linked addons. Otherwise, this will contain both. Example: {"NF_MONGO_USERNAME":"0000000000000000","NF_MONGO_PASSWORD":"00000000000000000000000000000000"} */
        'variables': any;
    }[];
};
declare type GetSecretdetailsCall = (opts: GetSecretdetailsRequest) => Promise<ApiCallResponse<GetSecretdetailsResult>>;
declare type GetSecretdetailsRequest = {
    parameters: GetSecretdetailsParameters;
};
declare type GetSecretdetailsParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the secret */
    'secretId': string;
};
/** View a secret with details about its linked addons */
declare class GetSecretdetailsEndpoint extends GetApiEndpoint<GetSecretdetailsRequest, GetSecretdetailsResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: GetSecretdetailsRequest) => string;
    body: () => undefined;
}

declare type UpdateSecretlinkResult = {
    /** An array of objects containing details about the keys linked to this secret group. */
    'keys': {
        /** The name of the key to link. Example: "username" */
        'keyName': string;
        /** An array of aliases for the key. */
        'aliases'?: string[];
        'defaultKey': string;
    }[];
};
declare type UpdateSecretlinkCall = (opts: UpdateSecretlinkRequest) => Promise<ApiCallResponse<UpdateSecretlinkResult>>;
declare type UpdateSecretlinkRequest = {
    parameters: UpdateSecretlinkParameters;
    data: UpdateSecretlinkData;
};
declare type UpdateSecretlinkParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the secret */
    'secretId': string;
    /** ID of the addon */
    'addonId': string;
};
declare type UpdateSecretlinkData = {
    /** An array of objects containing details about the keys to link to this secret group. */
    'keys': {
        /** The name of the key to link. Example: "username" */
        'keyName': string;
        /** An array of aliases for the key. */
        'aliases'?: string[];
    }[];
};
/** Link an addon to the secret group or edit the settings of the linked addon. */
declare class UpdateSecretlinkEndpoint extends PostApiEndpoint<UpdateSecretlinkRequest, UpdateSecretlinkResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: UpdateSecretlinkRequest) => string;
    body: (payload: UpdateSecretlinkRequest) => string;
}

declare type GetSecretlinkResult = {
    /** The name of the secret group Example: "Example secret group" */
    'secretName': string;
    /** Identifier for the secret group Example: "example-secret-group" */
    'secretId': string;
    /** The name of the linked addon Example: "Example Addon" */
    'addonName': string;
    /** The ID of the linked addon Example: "example-addon" */
    'addonId': string;
    /** The addon type of the linked addon Example: "mongodb" */
    'addonType': string;
    /** Is this addon currently linked to this secret group? Example: true */
    'linked': boolean;
    /** An array of objects containing details about the keys linked to this secret group. */
    'linkedKeys'?: {
        /** The name of the key to link. Example: "username" */
        'keyName': string;
        /** An array of aliases for the key. */
        'aliases'?: string[];
        'defaultKey': string;
    }[];
    /** A list of available keys for the given addon. */
    'availableKeys': string[];
};
declare type GetSecretlinkCall = (opts: GetSecretlinkRequest) => Promise<ApiCallResponse<GetSecretlinkResult>>;
declare type GetSecretlinkRequest = {
    parameters: GetSecretlinkParameters;
};
declare type GetSecretlinkParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the secret */
    'secretId': string;
    /** ID of the addon */
    'addonId': string;
};
/** Get details about a given addon link. */
declare class GetSecretlinkEndpoint extends GetApiEndpoint<GetSecretlinkRequest, GetSecretlinkResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: GetSecretlinkRequest) => string;
    body: () => undefined;
}

declare type DeleteSecretlinkResult = any;
declare type DeleteSecretlinkCall = (opts: DeleteSecretlinkRequest) => Promise<ApiCallResponse<DeleteSecretlinkResult>>;
declare type DeleteSecretlinkRequest = {
    parameters: DeleteSecretlinkParameters;
};
declare type DeleteSecretlinkParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the secret */
    'secretId': string;
    /** ID of the addon */
    'addonId': string;
};
/** Unlinks an addon from the secret group. */
declare class DeleteSecretlinkEndpoint extends DeleteApiEndpoint<DeleteSecretlinkRequest, DeleteSecretlinkResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: DeleteSecretlinkRequest) => string;
    body: () => undefined;
}

declare type CreateServiceCombinedResult = {
    /** Identifier for the service Example: "example-service" */
    'id': string;
    /** Full identifier used for service deployment Example: "/example-user/default-project/example-service" */
    'appId': string;
    /** Service name Example: "Example Service" */
    'name': string;
    /** A short description of the service Example: "This is the service description" */
    'description'?: string;
    /** ID of the project that the service belongs to Example: "default-project" */
    'projectId': string;
    /** The time the service was created. Example: "2021-01-20T11:19:53.175Z" */
    'createdAt': string;
    /** Whether Continuous Integration is disabled */
    'disabledCI': boolean;
    /** Whether Continuous Deployment is disabled */
    'disabledCD': boolean;
    'billing': {
        /** ID of the billing plan used by this service Example: "nf-compute-20" */
        'deploymentPlan': string;
    };
    /** Details about the current service status. */
    'status': {
        /** Details about the status of the most recent build. */
        'build'?: {
            /** The current status of the build. Example: "SUCCESS" */
            'status': 'PENDING' | 'STARTING' | 'CLONING' | 'BUILDING' | 'UPLOADING' | 'ABORTED' | 'FAILURE' | 'SUCCESS' | 'CRASHED';
            /** The timestamp of when the build reached this status. Example: "2021-11-29T11:47:16.624Z" */
            'lastTransitionTime'?: string;
        };
        /** Details about the current deployment status. */
        'deployment'?: {
            /** The current status of the deployment. Example: "COMPLETED" */
            'status': 'IN_PROGRESS' | 'COMPLETED';
            /** The reason the current deployment was started. Example: "DEPLOYING" */
            'reason': 'SCALING' | 'DEPLOYING';
            /** The timestamp of when the deployment reached this status. Example: "2021-11-29T11:47:16.624Z" */
            'lastTransitionTime'?: string;
        };
    };
    /** Is the service paused? */
    'servicePaused': boolean;
    /** Type of the service (combined, build or deployment) Example: "combined" */
    'serviceType': 'combined' | 'build' | 'deployment';
    'vcsData'?: {
        /** URL of the repository being built Example: "https://github.com/northflank/gatsby-with-northflank" */
        'projectUrl': string;
        /** VCS provider for the repo being built Example: "github" */
        'projectType': 'bitbucket' | 'gitlab' | 'github' | 'self-hosted';
        /** ID of the self-hosted VCS, if applicable. Example: "example-team/self-hosted-vcs" */
        'selfHostedVcsId'?: string;
        /** Branch of the repo being built Example: "master" */
        'projectBranch'?: string;
        /** Whether the repo is being accessed without authentication. */
        'publicRepo'?: boolean;
        /** Working directory used by the dockerfile Example: "/" */
        'dockerWorkDir': string;
        /** File path of the Dockerfile Example: "/Dockerfile" */
        'dockerFilePath': string;
    };
    'deployment'?: {
        /** Region where this service is deployed and/or built Example: "europe-west" */
        'region'?: string;
        /** Number of instances/replicas running Example: 1 */
        'instances'?: number;
        'internal'?: {
            /** Database ID of deployed entity Example: "5f3bd676b84798d54472d1cc" */
            'nfObjectId': string;
            /** Type of deployed entity Example: "service" */
            'nfObjectType': 'service';
            /** URL of the repository being deployed Example: "https://github.com/northflank/gatsby-with-northflank" */
            'repository': string;
            /** Branch of the repo being deployed Example: "master" */
            'branch': string;
            /** Commit SHA to be deployed. 'latest' means the latest commit is automatically being deployed. Example: "latest" */
            'buildSHA': string;
            /** Currently deployed commit SHA. If buildSHA is set to 'latest', this will show the SHA of the latest commit. Example: "262ed9817b3cad5142fbceabe0c9e371e390d616" */
            'deployedSHA': string;
        };
    };
    'buildConfiguration': {
        /** An array of path ignore rules. A commit will only be built if a file has been changed that does not match any of the ignore rules. Path ignore rules follow `.gitignore` syntax. */
        'pathIgnoreRules'?: string[];
    };
    'buildEngineConfiguration': {
        /** The build engine used. Example: "buildpack" */
        'buildEngine'?: 'buildpack' | 'kaniko' | 'buildkit';
        /** Details about Buildpack settings. */
        'buildpack'?: {
            /** The Buildpack stack used. Example: "HEROKU_20" */
            'builder'?: 'HEROKU_20' | 'HEROKU_18' | 'GOOGLE_V1' | 'CNB_ALPINE' | 'CNB_BIONIC' | 'PAKETO_TINY' | 'PAKETO_BASE' | 'PAKETO_FULL';
            /** Array of custom Buildpacks used. */
            'buildpackLocators'?: string[];
        };
        /** Details about Kaniko settings. */
        'kaniko'?: {
            /** Should intermediate image layers be cached? */
            'useCache'?: boolean;
        };
    };
    /** Whether the service will be built immediately Example: true */
    'buildInitiated': boolean;
    /** The ID of the initial build of the service. Example: "joyous-view-6290" */
    'buildId'?: string;
} | any;
declare type CreateServiceCombinedCall = (opts: CreateServiceCombinedRequest) => Promise<ApiCallResponse<CreateServiceCombinedResult>>;
declare type CreateServiceCombinedRequest = {
    parameters: CreateServiceCombinedParameters;
    data: CreateServiceCombinedData;
};
declare type CreateServiceCombinedParameters = {
    /** ID of the project */ 'projectId': string;
};
declare type CreateServiceCombinedData = {
    /** The name of the service. Example: "Example Service" */
    'name': string;
    /** A description of the service. Example: "A service description" */
    'description'?: string;
    'billing': {
        /** The ID of the deployment plan to use. Example: "nf-compute-20" */
        'deploymentPlan': string;
    };
    'deployment': {
        /** The number of instances to run the service on. Example: 1 */
        'instances': number;
        /** If set, the service runs a custom command rather than one defined in the Dockerfile. Example: "nginx -g" */
        'cmdOverride'?: string;
    };
    'ports'?: {
        /** The name used to identify the port. Example: "port-1" */
        'name': string;
        /** The port number. Example: 8080 */
        'internalPort': number;
        /** If true, the port will be exposed publicly. Example: true */
        'public'?: boolean;
        'security'?: {
            /** An array of credentials to access the service. */
            'credentials'?: {
                /** The username to access the service Example: "admin" */
                'username': string;
                /** The password to access the service with this username. Example: "password123" */
                'password': string;
                /** The type of authentication used Example: "basic-auth" */
                'type': 'basic-auth';
            }[];
            /** An array of IP address policies. */
            'policies'?: {
                /** An array of IP addresses used for this rule */
                'addresses': string[];
                /** The action for this rule. Example: "DENY" */
                'action': 'ALLOW' | 'DENY';
            }[];
        };
        /** An array of domains to redirect to this port. Each domain must first be verified and registered to your account. */
        'domains'?: string[];
        /** The protocol to use for the port. Example: "HTTP" */
        'protocol': 'HTTP' | 'HTTP/2' | 'TCP' | 'UDP';
    }[];
    'vcsData': {
        /** URL of the Git repo to build. Example: "https://github.com/northflank/gatsby-with-northflank" */
        'projectUrl': string;
        /** The VCS provider to use. Example: "github" */
        'projectType': 'bitbucket' | 'gitlab' | 'github' | 'self-hosted';
        /** If projectType is self-hosted, the ID of the self-hosted vcs to use. */
        'selfHostedVcsId'?: string;
        /** By default, if you have multiple version control accounts of the same provider linked, Northflank will pick a linked account that has access to the repository. If `accountLogin` is provided, Northflank will instead use your linked account with that login name. Example: "github-user" */
        'accountLogin'?: string;
        /** The name of the branch to use. Example: "master" */
        'projectBranch': string;
    };
    'buildSettings': {
        'dockerfile': {
            /** Build engine to use. Defaults to recommended build engine `kaniko` Example: "kaniko" */
            'buildEngine'?: 'kaniko' | 'buildkit';
            /** Should intermediate image layers be cached? Only supported by Kaniko. */
            'useCache'?: boolean;
            /** The file path of the Dockerfile. Example: "/Dockerfile" */
            'dockerFilePath': string;
            /** The working directory of the Dockerfile. Example: "/" */
            'dockerWorkDir': string;
        };
    } | {
        'buildpack': {
            /** Buildpack stack to use. Defaults to recommended stack `HEROKU_20`. Example: "HEROKU_20" */
            'builder'?: 'HEROKU_20' | 'HEROKU_18' | 'GOOGLE_V1' | 'CNB_ALPINE' | 'CNB_BIONIC' | 'PAKETO_TINY' | 'PAKETO_BASE' | 'PAKETO_FULL';
            /** Array of custom Buildpacks to use. */
            'buildpackLocators'?: string[];
            /** The working directory to build in. Example: "/" */
            'buildContext'?: string;
        };
    };
    'buildConfiguration'?: {
        /** An array of path ignore rules. A commit will only be built if a file has been changed that does not match any of the ignore rules. Path ignore rules follow `.gitignore` syntax. */
        'pathIgnoreRules'?: string[];
    };
    /** An object containing the runtime environment to set for the service. Keys must only contain letters and numbers separated with underscores, may not start with a number Example: {"VARIABLE_1":"abcdef","VARIABLE_2":"12345"} */
    'runtimeEnvironment'?: any;
    /** Secret files as JSON object, encrypted at rest. File path must be absolute Example: {"/dir/fileName":{"data":"VGhpcyBpcyBhbiBleGFtcGxlIHdpdGggYSB0ZW1wbGF0ZWQgJHtOT0RFX0VOVn0gdmFyaWFibGU=","encoding":"utf-8"}} */
    'runtimeFiles'?: any;
    /** An object containing the build arguments to set for the service. Keys must only contain letters and numbers separated with underscores, may not start with a number Example: {"ARGUMENT_1":"abcdef","ARGUMENT_2":"12345"} */
    'buildArguments'?: any;
    /** Secret files as JSON object, encrypted at rest. File path must be absolute Example: {"/dir/fileName":{"data":"VGhpcyBpcyBhbiBleGFtcGxlIHdpdGggYSB0ZW1wbGF0ZWQgJHtOT0RFX0VOVn0gdmFyaWFibGU=","encoding":"utf-8"}} */
    'buildFiles'?: any;
};
/** Creates a new combined service. */
declare class CreateServiceCombinedEndpoint extends PostApiEndpoint<CreateServiceCombinedRequest, CreateServiceCombinedResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: CreateServiceCombinedRequest) => string;
    body: (payload: CreateServiceCombinedRequest) => string;
}

declare type CreateServiceDeploymentResult = {
    /** Identifier for the service Example: "example-service" */
    'id': string;
    /** Full identifier used for service deployment Example: "/example-user/default-project/example-service" */
    'appId': string;
    /** Service name Example: "Example Service" */
    'name': string;
    /** A short description of the service Example: "This is the service description" */
    'description'?: string;
    /** ID of the project that the service belongs to Example: "default-project" */
    'projectId': string;
    /** The time the service was created. Example: "2021-01-20T11:19:53.175Z" */
    'createdAt': string;
    /** Whether Continuous Integration is disabled */
    'disabledCI': boolean;
    /** Whether Continuous Deployment is disabled */
    'disabledCD': boolean;
    'billing': {
        /** ID of the billing plan used by this service Example: "nf-compute-20" */
        'deploymentPlan': string;
    };
    /** Details about the current service status. */
    'status': {
        /** Details about the status of the most recent build. */
        'build'?: {
            /** The current status of the build. Example: "SUCCESS" */
            'status': 'PENDING' | 'STARTING' | 'CLONING' | 'BUILDING' | 'UPLOADING' | 'ABORTED' | 'FAILURE' | 'SUCCESS' | 'CRASHED';
            /** The timestamp of when the build reached this status. Example: "2021-11-29T11:47:16.624Z" */
            'lastTransitionTime'?: string;
        };
        /** Details about the current deployment status. */
        'deployment'?: {
            /** The current status of the deployment. Example: "COMPLETED" */
            'status': 'IN_PROGRESS' | 'COMPLETED';
            /** The reason the current deployment was started. Example: "DEPLOYING" */
            'reason': 'SCALING' | 'DEPLOYING';
            /** The timestamp of when the deployment reached this status. Example: "2021-11-29T11:47:16.624Z" */
            'lastTransitionTime'?: string;
        };
    };
    /** Is the service paused? */
    'servicePaused': boolean;
    /** Type of the service (combined, build or deployment) Example: "deployment" */
    'serviceType': 'combined' | 'build' | 'deployment';
    'deployment'?: {
        /** Region where this service is deployed and/or built Example: "europe-west" */
        'region'?: string;
        /** Number of instances/replicas running Example: 1 */
        'instances'?: number;
        /** Data about a deployment from an external registry. */
        'external'?: {
            /** Path of the external image excluding the hostname */
            'imagePath': string;
            /** Registry provider hosting the external image */
            'registryProvider': 'dockerhub' | 'gcr' | 'gcr-eu' | 'gcr-us' | 'gitlab' | 'github' | 'custom';
            /** Does the image require authentication */
            'privateImage': boolean;
        };
        'internal'?: {
            /** Database ID of deployed entity Example: "5f3bd676b84798d54472d1cc" */
            'nfObjectId': string;
            /** Type of deployed entity Example: "service" */
            'nfObjectType': 'service';
            /** URL of the repository being deployed Example: "https://github.com/northflank/gatsby-with-northflank" */
            'repository': string;
            /** Branch of the repo being deployed Example: "master" */
            'branch': string;
            /** Commit SHA to be deployed. 'latest' means the latest commit is automatically being deployed. Example: "latest" */
            'buildSHA': string;
            /** Currently deployed commit SHA. If buildSHA is set to 'latest', this will show the SHA of the latest commit. Example: "262ed9817b3cad5142fbceabe0c9e371e390d616" */
            'deployedSHA': string;
        };
    };
} | any;
declare type CreateServiceDeploymentCall = (opts: CreateServiceDeploymentRequest) => Promise<ApiCallResponse<CreateServiceDeploymentResult>>;
declare type CreateServiceDeploymentRequest = {
    parameters: CreateServiceDeploymentParameters;
    data: CreateServiceDeploymentData;
};
declare type CreateServiceDeploymentParameters = {
    /** ID of the project */ 'projectId': string;
};
declare type CreateServiceDeploymentData = {
    /** The name of the service. Example: "Example Service" */
    'name': string;
    /** A description of the service. Example: "A service description" */
    'description'?: string;
    'billing': {
        /** The ID of the deployment plan to use. Example: "nf-compute-20" */
        'deploymentPlan': string;
    };
    /** Deployment type */
    'deployment': {
        /** The number of instances to run the service on. Example: 1 */
        'instances': number;
        /** If set, the service runs a custom command rather than one defined in the Dockerfile. Example: "nginx -g" */
        'cmdOverride'?: string;
        'storage'?: {
            'ephemeralStorage'?: {
                /** Ephemeral storage per container in MB */
                'storageSize'?: number;
            };
        };
        'internal': {
            /** Internal ID of the build service to deploy Example: "example-build-service" */
            'id': string;
            /** Branch to deploy Example: "master" */
            'branch'?: string;
            /** Commit SHA to deploy, or 'latest' to deploy the most recent commit Example: "latest" */
            'buildSHA'?: string;
        };
    } | {
        /** The number of instances to run the service on. Example: 1 */
        'instances': number;
        /** If set, the service runs a custom command rather than one defined in the Dockerfile. Example: "nginx -g" */
        'cmdOverride'?: string;
        'storage'?: {
            'ephemeralStorage'?: {
                /** Ephemeral storage per container in MB */
                'storageSize'?: number;
            };
        };
        'external': {
            /** Image to be deployed. When not deploying from Dockerhub the URL must be specified. Example: "nginx:latest" */
            'imagePath': string;
            /** ID of the saved credentials to use to access this external image. Example: "example-credentials" */
            'credentials'?: string;
        };
    } | {
        /** The number of instances to run the service on. Example: 1 */
        'instances': number;
        /** If set, the service runs a custom command rather than one defined in the Dockerfile. Example: "nginx -g" */
        'cmdOverride'?: string;
        'storage'?: {
            'ephemeralStorage'?: {
                /** Ephemeral storage per container in MB */
                'storageSize'?: number;
            };
        };
    };
    'ports'?: {
        /** The name used to identify the port. Example: "port-1" */
        'name': string;
        /** The port number. Example: 8080 */
        'internalPort': number;
        /** If true, the port will be exposed publicly. Example: true */
        'public'?: boolean;
        'security'?: {
            /** An array of credentials to access the service. */
            'credentials'?: {
                /** The username to access the service Example: "admin" */
                'username': string;
                /** The password to access the service with this username. Example: "password123" */
                'password': string;
                /** The type of authentication used Example: "basic-auth" */
                'type': 'basic-auth';
            }[];
            /** An array of IP address policies. */
            'policies'?: {
                /** An array of IP addresses used for this rule */
                'addresses': string[];
                /** The action for this rule. Example: "DENY" */
                'action': 'ALLOW' | 'DENY';
            }[];
        };
        /** An array of domains to redirect to this port. Each domain must first be verified and registered to your account. */
        'domains'?: string[];
        /** The protocol to use for the port. Example: "HTTP" */
        'protocol': 'HTTP' | 'HTTP/2' | 'TCP' | 'UDP';
    }[];
    /** An object containing the runtime environment to set for the service Example: {"VARIABLE_1":"abcdef","VARIABLE_2":"12345"} */
    'runtimeEnvironment'?: any;
    /** Secret files as JSON object, encrypted at rest. File path must be absolute Example: {"/dir/fileName":{"data":"VGhpcyBpcyBhbiBleGFtcGxlIHdpdGggYSB0ZW1wbGF0ZWQgJHtOT0RFX0VOVn0gdmFyaWFibGU=","encoding":"utf-8"}} */
    'runtimeFiles'?: any;
};
/** Creates a new deployment service. */
declare class CreateServiceDeploymentEndpoint extends PostApiEndpoint<CreateServiceDeploymentRequest, CreateServiceDeploymentResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: CreateServiceDeploymentRequest) => string;
    body: (payload: CreateServiceDeploymentRequest) => string;
}

declare type CreateServiceBuildResult = {
    /** Identifier for the service Example: "example-service" */
    'id': string;
    /** Full identifier used for service deployment Example: "/example-user/default-project/example-service" */
    'appId': string;
    /** Service name Example: "Example Service" */
    'name': string;
    /** A short description of the service Example: "This is the service description" */
    'description'?: string;
    /** ID of the project that the service belongs to Example: "default-project" */
    'projectId': string;
    /** The time the service was created. Example: "2021-01-20T11:19:53.175Z" */
    'createdAt': string;
    /** Whether Continuous Integration is disabled */
    'disabledCI': boolean;
    /** Whether Continuous Deployment is disabled */
    'disabledCD': boolean;
    'billing': {
        /** ID of the billing plan used by this service Example: "nf-compute-20" */
        'deploymentPlan': string;
    };
    /** Details about the current service status. */
    'status': {
        /** Details about the status of the most recent build. */
        'build'?: {
            /** The current status of the build. Example: "SUCCESS" */
            'status': 'PENDING' | 'STARTING' | 'CLONING' | 'BUILDING' | 'UPLOADING' | 'ABORTED' | 'FAILURE' | 'SUCCESS' | 'CRASHED';
            /** The timestamp of when the build reached this status. Example: "2021-11-29T11:47:16.624Z" */
            'lastTransitionTime'?: string;
        };
        /** Details about the current deployment status. */
        'deployment'?: {
            /** The current status of the deployment. Example: "COMPLETED" */
            'status': 'IN_PROGRESS' | 'COMPLETED';
            /** The reason the current deployment was started. Example: "DEPLOYING" */
            'reason': 'SCALING' | 'DEPLOYING';
            /** The timestamp of when the deployment reached this status. Example: "2021-11-29T11:47:16.624Z" */
            'lastTransitionTime'?: string;
        };
    };
    /** Is the service paused? */
    'servicePaused': boolean;
    /** Type of the service (combined, build or deployment) Example: "build" */
    'serviceType': 'combined' | 'build' | 'deployment';
    'vcsData'?: {
        /** URL of the repository being built Example: "https://github.com/northflank/gatsby-with-northflank" */
        'projectUrl': string;
        /** VCS provider for the repo being built Example: "github" */
        'projectType': 'bitbucket' | 'gitlab' | 'github' | 'self-hosted';
        /** ID of the self-hosted VCS, if applicable. Example: "example-team/self-hosted-vcs" */
        'selfHostedVcsId'?: string;
        /** Branch of the repo being built Example: "master" */
        'projectBranch'?: string;
        /** Whether the repo is being accessed without authentication. */
        'publicRepo'?: boolean;
        /** Working directory used by the dockerfile Example: "/" */
        'dockerWorkDir': string;
        /** File path of the Dockerfile Example: "/Dockerfile" */
        'dockerFilePath': string;
    };
    'buildConfiguration'?: {
        'branchRestrictions'?: string[];
        'prRestrictions'?: string[];
        'pathIgnoreRules': string[];
    };
    'buildEngineConfiguration': {
        /** The build engine used. Example: "buildpack" */
        'buildEngine'?: 'buildpack' | 'kaniko' | 'buildkit';
        /** Details about Buildpack settings. */
        'buildpack'?: {
            /** The Buildpack stack used. Example: "HEROKU_20" */
            'builder'?: 'HEROKU_20' | 'HEROKU_18' | 'GOOGLE_V1' | 'CNB_ALPINE' | 'CNB_BIONIC' | 'PAKETO_TINY' | 'PAKETO_BASE' | 'PAKETO_FULL';
            /** Array of custom Buildpacks used. */
            'buildpackLocators'?: string[];
        };
        /** Details about Kaniko settings. */
        'kaniko'?: {
            /** Should intermediate image layers be cached? */
            'useCache'?: boolean;
        };
    };
} | any;
declare type CreateServiceBuildCall = (opts: CreateServiceBuildRequest) => Promise<ApiCallResponse<CreateServiceBuildResult>>;
declare type CreateServiceBuildRequest = {
    parameters: CreateServiceBuildParameters;
    data: CreateServiceBuildData;
};
declare type CreateServiceBuildParameters = {
    /** ID of the project */ 'projectId': string;
};
declare type CreateServiceBuildData = {
    /** The name of the service. Example: "Example Service" */
    'name': string;
    /** A description of the service. Example: "A service description" */
    'description'?: string;
    'billing': {
        /** The ID of the deployment plan to use. Example: "nf-compute-20" */
        'deploymentPlan': string;
    };
    'vcsData': {
        /** URL of the Git repo to build. Example: "https://github.com/northflank/gatsby-with-northflank" */
        'projectUrl': string;
        /** The VCS provider to use. Example: "github" */
        'projectType': 'bitbucket' | 'gitlab' | 'github' | 'self-hosted';
        /** If projectType is self-hosted, the ID of the self-hosted vcs to use. */
        'selfHostedVcsId'?: string;
        /** By default, if you have multiple version control accounts of the same provider linked, Northflank will pick a linked account that has access to the repository. If `accountLogin` is provided, Northflank will instead use your linked account with that login name. Example: "github-user" */
        'accountLogin'?: string;
    };
    'buildSettings': {
        'dockerfile': {
            /** Build engine to use. Defaults to recommended build engine `kaniko` Example: "kaniko" */
            'buildEngine'?: 'kaniko' | 'buildkit';
            /** Should intermediate image layers be cached? Only supported by Kaniko. */
            'useCache'?: boolean;
            /** The file path of the Dockerfile. Example: "/Dockerfile" */
            'dockerFilePath': string;
            /** The working directory of the Dockerfile. Example: "/" */
            'dockerWorkDir': string;
        };
    } | {
        'buildpack': {
            /** Buildpack stack to use. Defaults to recommended stack `HEROKU_20`. Example: "HEROKU_20" */
            'builder'?: 'HEROKU_20' | 'HEROKU_18' | 'GOOGLE_V1' | 'CNB_ALPINE' | 'CNB_BIONIC' | 'PAKETO_TINY' | 'PAKETO_BASE' | 'PAKETO_FULL';
            /** Array of custom Buildpacks to use. */
            'buildpackLocators'?: string[];
            /** The working directory to build in. Example: "/" */
            'buildContext'?: string;
        };
    };
    'buildConfiguration'?: {
        /** An array of pull request build rules. Only supported for build services. Each commit belonging to a pull request on a branch that matches one of the provided build rules will be built automatically. */
        'prRestrictions'?: string[];
        /** An array of branch build rules. Only supported for build services. Each commit belonging to a branch that matches one of the provided build rules will be built automatically. */
        'branchRestrictions'?: string[];
        /** An array of path ignore rules. A commit will only be built if a file has been changed that does not match any of the ignore rules. Path ignore rules follow `.gitignore` syntax. */
        'pathIgnoreRules'?: string[];
    };
    /** An object containing the build arguments to set for the service Example: {"ARGUMENT_1":"abcdef","ARGUMENT_2":"12345"} */
    'buildArguments'?: any;
    /** Secret files as JSON object, encrypted at rest. File path must be absolute Example: {"/dir/fileName":{"data":"VGhpcyBpcyBhbiBleGFtcGxlIHdpdGggYSB0ZW1wbGF0ZWQgJHtOT0RFX0VOVn0gdmFyaWFibGU=","encoding":"utf-8"}} */
    'buildFiles'?: any;
};
/** Creates a new build service. */
declare class CreateServiceBuildEndpoint extends PostApiEndpoint<CreateServiceBuildRequest, CreateServiceBuildResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: CreateServiceBuildRequest) => string;
    body: (payload: CreateServiceBuildRequest) => string;
}

declare type GetServiceResult = {
    /** Identifier for the service Example: "example-service" */
    'id': string;
    /** Full identifier used for service deployment Example: "/example-user/default-project/example-service" */
    'appId': string;
    /** Service name Example: "Example Service" */
    'name': string;
    /** A short description of the service Example: "This is the service description" */
    'description'?: string;
    /** ID of the project that the service belongs to Example: "default-project" */
    'projectId': string;
    /** Type of the service (combined, build or deployment) Example: "combined" */
    'serviceType': 'combined' | 'build' | 'deployment';
    /** The time the service was created. Example: "2021-01-20T11:19:53.175Z" */
    'createdAt': string;
    /** Whether Continuous Integration is disabled */
    'disabledCI': boolean;
    /** Whether Continuous Deployment is disabled */
    'disabledCD': boolean;
    'billing': {
        /** ID of the billing plan used by this service Example: "nf-compute-20" */
        'deploymentPlan': string;
    };
    /** Details about the current service status. */
    'status': {
        /** Details about the status of the most recent build. */
        'build'?: {
            /** The current status of the build. Example: "SUCCESS" */
            'status': 'PENDING' | 'STARTING' | 'CLONING' | 'BUILDING' | 'UPLOADING' | 'ABORTED' | 'FAILURE' | 'SUCCESS' | 'CRASHED';
            /** The timestamp of when the build reached this status. Example: "2021-11-29T11:47:16.624Z" */
            'lastTransitionTime'?: string;
        };
        /** Details about the current deployment status. */
        'deployment'?: {
            /** The current status of the deployment. Example: "COMPLETED" */
            'status': 'IN_PROGRESS' | 'COMPLETED';
            /** The reason the current deployment was started. Example: "DEPLOYING" */
            'reason': 'SCALING' | 'DEPLOYING';
            /** The timestamp of when the deployment reached this status. Example: "2021-11-29T11:47:16.624Z" */
            'lastTransitionTime'?: string;
        };
    };
    /** Is the service paused? */
    'servicePaused': boolean;
    'vcsData'?: {
        /** URL of the repository being built Example: "https://github.com/northflank/gatsby-with-northflank" */
        'projectUrl': string;
        /** VCS provider for the repo being built Example: "github" */
        'projectType': 'bitbucket' | 'gitlab' | 'github' | 'self-hosted';
        /** ID of the self-hosted VCS, if applicable. Example: "example-team/self-hosted-vcs" */
        'selfHostedVcsId'?: string;
        /** Branch of the repo being built Example: "master" */
        'projectBranch'?: string;
        /** Whether the repo is being accessed without authentication. */
        'publicRepo'?: boolean;
        /** Working directory used by the dockerfile Example: "/" */
        'dockerWorkDir': string;
        /** File path of the Dockerfile Example: "/Dockerfile" */
        'dockerFilePath': string;
    };
    'deployment'?: {
        /** Region where this service is deployed and/or built Example: "europe-west" */
        'region'?: string;
        /** Number of instances/replicas running Example: 1 */
        'instances'?: number;
        /** Data about a deployment from an external registry. */
        'external'?: {
            /** Path of the external image excluding the hostname */
            'imagePath': string;
            /** Registry provider hosting the external image */
            'registryProvider': 'dockerhub' | 'gcr' | 'gcr-eu' | 'gcr-us' | 'gitlab' | 'github' | 'custom';
            /** Does the image require authentication */
            'privateImage': boolean;
        };
        'internal'?: {
            /** Database ID of deployed entity Example: "5f3bd676b84798d54472d1cc" */
            'nfObjectId': string;
            /** Type of deployed entity Example: "service" */
            'nfObjectType': 'service';
            /** URL of the repository being deployed Example: "https://github.com/northflank/gatsby-with-northflank" */
            'repository': string;
            /** Branch of the repo being deployed Example: "master" */
            'branch': string;
            /** Commit SHA to be deployed. 'latest' means the latest commit is automatically being deployed. Example: "latest" */
            'buildSHA': string;
            /** Currently deployed commit SHA. If buildSHA is set to 'latest', this will show the SHA of the latest commit. Example: "262ed9817b3cad5142fbceabe0c9e371e390d616" */
            'deployedSHA': string;
        };
    };
    'buildConfiguration'?: {
        'branchRestrictions'?: string[];
        'prRestrictions'?: string[];
        'pathIgnoreRules': string[];
    };
    'buildEngineConfiguration'?: {
        /** The build engine used. Example: "buildpack" */
        'buildEngine'?: 'buildpack' | 'kaniko' | 'buildkit';
        /** Details about Buildpack settings. */
        'buildpack'?: {
            /** The Buildpack stack used. Example: "HEROKU_20" */
            'builder'?: 'HEROKU_20' | 'HEROKU_18' | 'GOOGLE_V1' | 'CNB_ALPINE' | 'CNB_BIONIC' | 'PAKETO_TINY' | 'PAKETO_BASE' | 'PAKETO_FULL';
            /** Array of custom Buildpacks used. */
            'buildpackLocators'?: string[];
        };
        /** Details about Kaniko settings. */
        'kaniko'?: {
            /** Should intermediate image layers be cached? */
            'useCache'?: boolean;
        };
    };
    /** An array of ports of the service. */
    'ports': {
        /** The id used to identify the port across requests. Example: "eonyui" */
        'id': string;
        /** The name of the port used in the public url and UI. Example: "port-1" */
        'name': string;
        /** The port number. Example: 8080 */
        'internalPort': number;
        /** The protocol used by the port. Example: "HTTP" */
        'protocol': 'HTTP' | 'HTTP/2' | 'TCP' | 'UDP';
        /** If true, the port is exposed publicly. Example: true */
        'public': boolean;
        /** DNS entry for this port. Example: "port-1--example-service--default-service--user-abc1.salvo.code.run" */
        'dns'?: string;
        /** An array of domains that redirect to this port. */
        'domains': {
            /** The custom domain redirecting to this port. Example: "app.example.com" */
            'name': string;
            /** Details about the TLS certificate generation for this domain. */
            'certificate': {
                /** Is the certificate in the process of being generated? */
                'inProgress'?: boolean;
                /** The timestamp when the TLS certificate will expire. Example: "2022-04-26T09:25:02.000Z" */
                'expiryDate'?: string;
                /** The timestamp when a new TLS certificate will be generated. Example: "2022-03-27T09:25:02.000Z" */
                'refreshDate'?: string;
            };
        }[];
        /** Details about security settings for this port. */
        'security'?: {
            /** An array of credentials to access the service. */
            'credentials'?: {
                /** The username to access the service Example: "admin" */
                'username': string;
                /** The password to access the service with this username. Example: "password123" */
                'password': string;
                /** The type of authentication used Example: "basic-auth" */
                'type': 'basic-auth';
            }[];
            /** An array of IP address policies. */
            'policies'?: {
                /** An array of IP addresses used for this rule */
                'addresses': string[];
                /** The action for this rule. Example: "DENY" */
                'action': 'ALLOW' | 'DENY';
            }[];
        };
    }[];
};
declare type GetServiceCall = (opts: GetServiceRequest) => Promise<ApiCallResponse<GetServiceResult>>;
declare type GetServiceRequest = {
    parameters: GetServiceParameters;
};
declare type GetServiceParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the service */
    'serviceId': string;
};
/** Gets information about the given service. */
declare class GetServiceEndpoint extends GetApiEndpoint<GetServiceRequest, GetServiceResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: GetServiceRequest) => string;
    body: () => undefined;
}

declare type DeleteServiceResult = any;
declare type DeleteServiceCall = (opts: DeleteServiceRequest) => Promise<ApiCallResponse<DeleteServiceResult>>;
declare type DeleteServiceRequest = {
    parameters: DeleteServiceParameters;
};
declare type DeleteServiceParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the service */
    'serviceId': string;
};
/** Deletes the given service. */
declare class DeleteServiceEndpoint extends DeleteApiEndpoint<DeleteServiceRequest, DeleteServiceResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: DeleteServiceRequest) => string;
    body: () => undefined;
}

declare type ScaleServiceResult = any;
declare type ScaleServiceCall = (opts: ScaleServiceRequest) => Promise<ApiCallResponse<ScaleServiceResult>>;
declare type ScaleServiceRequest = {
    parameters: ScaleServiceParameters;
    data: ScaleServiceData;
};
declare type ScaleServiceParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the service */
    'serviceId': string;
};
declare type ScaleServiceData = {
    /** The number of instances to scale the service to Example: 1 */
    'instances'?: number;
    /** ID of the deployment plan to switch to. Example: "nf-compute-20" */
    'deploymentPlan'?: string;
    'storage'?: {
        'ephemeralStorage'?: {
            /** Ephemeral storage per container in MB */
            'storageSize'?: number;
        };
    };
};
/** Modifies the scaling settings for the given service. */
declare class ScaleServiceEndpoint extends PostApiEndpoint<ScaleServiceRequest, ScaleServiceResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: ScaleServiceRequest) => string;
    body: (payload: ScaleServiceRequest) => string;
}

declare type GetServiceDeploymentResult = {
    /** Region where this service is deployed and/or built Example: "europe-west" */
    'region'?: string;
    /** Number of instances/replicas running Example: 1 */
    'instances'?: number;
    'internal': {
        /** Full identifier of deployed entity Example: "/example-user/default-project/example-service" */
        'appId': string;
        /** ID of deployed entity Example: "example-service" */
        'nfObjectId': string;
        /** Type of deployed entity Example: "service" */
        'nfObjectType': 'service';
        /** URL of the repository being deployed Example: "https://github.com/northflank/gatsby-with-northflank" */
        'repository': string;
        /** Branch of the repo being deployed Example: "master" */
        'branch': string;
        /** Commit SHA being deployed. 'latest' means the latest commit is automatically being deployed. Example: "latest" */
        'buildSHA': string;
    };
} | {
    /** Region where this service is deployed and/or built Example: "europe-west" */
    'region'?: string;
    /** Number of instances/replicas running Example: 1 */
    'instances'?: number;
    'external': {
        /** Path of the external image excluding the hostname Example: "nginx:latest" */
        'imagePath': string;
        /** Registry provider hosting the external image Example: "dockerhub" */
        'registryProvider': 'dockerhub' | 'gcr' | 'gcr-eu' | 'gcr-us' | 'gitlab' | 'github' | 'custom';
        /** Does the image require authentication */
        'privateImage': boolean;
    };
};
declare type GetServiceDeploymentCall = (opts: GetServiceDeploymentRequest) => Promise<ApiCallResponse<GetServiceDeploymentResult>>;
declare type GetServiceDeploymentRequest = {
    parameters: GetServiceDeploymentParameters;
};
declare type GetServiceDeploymentParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the service */
    'serviceId': string;
};
/** Gets information about the deployment of the given service. */
declare class GetServiceDeploymentEndpoint extends GetApiEndpoint<GetServiceDeploymentRequest, GetServiceDeploymentResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: GetServiceDeploymentRequest) => string;
    body: () => undefined;
}

declare type UpdateServiceDeploymentResult = any;
declare type UpdateServiceDeploymentCall = (opts: UpdateServiceDeploymentRequest) => Promise<ApiCallResponse<UpdateServiceDeploymentResult>>;
declare type UpdateServiceDeploymentRequest = {
    parameters: UpdateServiceDeploymentParameters;
    data: UpdateServiceDeploymentData;
};
declare type UpdateServiceDeploymentParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the service */
    'serviceId': string;
};
declare type UpdateServiceDeploymentData = {
    'external': {
        /** Image to be deployed. When not deploying from Dockerhub the URL must be specified. Example: "nginx:latest" */
        'imagePath': string;
        /** ID of the saved credentials to use to access this external image. Example: "example-credentials" */
        'credentials'?: string;
    };
} | {
    'internal': {
        /** ID of the build service to deploy Example: "example-build-service" */
        'id'?: string;
        /** Branch to deploy Example: "master" */
        'branch'?: string;
        /** Commit SHA to deploy, or 'latest' to deploy the most recent commit Example: "latest" */
        'buildSHA'?: any;
        /** ID of the build that should be deployed Example: "premium-guide-6393" */
        'buildId'?: string;
    };
};
/** Updates the deployment settings of the given service. */
declare class UpdateServiceDeploymentEndpoint extends PostApiEndpoint<UpdateServiceDeploymentRequest, UpdateServiceDeploymentResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: UpdateServiceDeploymentRequest) => string;
    body: (payload: UpdateServiceDeploymentRequest) => string;
}

declare type RestartServiceResult = any;
declare type RestartServiceCall = (opts: RestartServiceRequest) => Promise<ApiCallResponse<RestartServiceResult>>;
declare type RestartServiceRequest = {
    parameters: RestartServiceParameters;
};
declare type RestartServiceParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the service */
    'serviceId': string;
};
/** Restarts the given service. */
declare class RestartServiceEndpoint extends PostApiEndpoint<RestartServiceRequest, RestartServiceResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: RestartServiceRequest) => string;
    body: () => undefined;
}

declare type PauseServiceResult = any;
declare type PauseServiceCall = (opts: PauseServiceRequest) => Promise<ApiCallResponse<PauseServiceResult>>;
declare type PauseServiceRequest = {
    parameters: PauseServiceParameters;
};
declare type PauseServiceParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the service */
    'serviceId': string;
};
/** Pause the given service. */
declare class PauseServiceEndpoint extends PostApiEndpoint<PauseServiceRequest, PauseServiceResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: PauseServiceRequest) => string;
    body: () => undefined;
}

declare type ResumeServiceResult = any | any;
declare type ResumeServiceCall = (opts: ResumeServiceRequest) => Promise<ApiCallResponse<ResumeServiceResult>>;
declare type ResumeServiceRequest = {
    parameters: ResumeServiceParameters;
    data: ResumeServiceData;
};
declare type ResumeServiceParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the service */
    'serviceId': string;
};
declare type ResumeServiceData = {
    /** The number of instances to scale the service to upon resuming Example: 1 */
    'instances'?: number;
};
/** Resumes the given service. Optionally takes `instances` to resume with a given number of instances. */
declare class ResumeServiceEndpoint extends PostApiEndpoint<ResumeServiceRequest, ResumeServiceResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: ResumeServiceRequest) => string;
    body: (payload: ResumeServiceRequest) => string;
}

declare type GetServicePortsResult = {
    /** An array of ports of the service. */
    'ports': {
        /** The id used to identify the port across requests. Example: "eonyui" */
        'id': string;
        /** The name of the port used in the public url and UI. Example: "port-1" */
        'name': string;
        /** The port number. Example: 8080 */
        'internalPort': number;
        /** The protocol used by the port. Example: "HTTP" */
        'protocol': 'HTTP' | 'HTTP/2' | 'TCP' | 'UDP';
        /** If true, the port is exposed publicly. Example: true */
        'public': boolean;
        /** DNS entry for this port. Example: "port-1--example-service--default-service--user-abc1.salvo.code.run" */
        'dns'?: string;
        /** An array of domains that redirect to this port. */
        'domains': {
            /** The custom domain redirecting to this port. Example: "app.example.com" */
            'name': string;
            /** Details about the TLS certificate generation for this domain. */
            'certificate': {
                /** Is the certificate in the process of being generated? */
                'inProgress'?: boolean;
                /** The timestamp when the TLS certificate will expire. Example: "2022-04-26T09:25:02.000Z" */
                'expiryDate'?: string;
                /** The timestamp when a new TLS certificate will be generated. Example: "2022-03-27T09:25:02.000Z" */
                'refreshDate'?: string;
            };
        }[];
        /** Details about security settings for this port. */
        'security'?: {
            /** An array of credentials to access the service. */
            'credentials'?: {
                /** The username to access the service Example: "admin" */
                'username': string;
                /** The password to access the service with this username. Example: "password123" */
                'password': string;
                /** The type of authentication used Example: "basic-auth" */
                'type': 'basic-auth';
            }[];
            /** An array of IP address policies. */
            'policies'?: {
                /** An array of IP addresses used for this rule */
                'addresses': string[];
                /** The action for this rule. Example: "DENY" */
                'action': 'ALLOW' | 'DENY';
            }[];
        };
    }[];
};
declare type GetServicePortsCall = (opts: GetServicePortsRequest) => Promise<ApiCallResponse<GetServicePortsResult>>;
declare type GetServicePortsRequest = {
    parameters: GetServicePortsParameters;
};
declare type GetServicePortsParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the service */
    'serviceId': string;
};
/** Lists the ports for the given service. */
declare class GetServicePortsEndpoint extends GetApiEndpoint<GetServicePortsRequest, GetServicePortsResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: GetServicePortsRequest) => string;
    body: () => undefined;
}

declare type UpdateServicePortsResult = any | any;
declare type UpdateServicePortsCall = (opts: UpdateServicePortsRequest) => Promise<ApiCallResponse<UpdateServicePortsResult>>;
declare type UpdateServicePortsRequest = {
    parameters: UpdateServicePortsParameters;
    data: UpdateServicePortsData;
};
declare type UpdateServicePortsParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the service */
    'serviceId': string;
};
declare type UpdateServicePortsData = {
    /** An array of ports to replace or update existing ports with. */
    'ports': {
        /** The id of an existing port. Pass this when changing in order to keep security configurations. Example: "eonyui" */
        'id'?: string;
        /** The name used to identify the port. Example: "port-1" */
        'name': string;
        /** The port number. Example: 12345 */
        'internalPort': number;
        /** If true, the port will be exposed publicly. Example: true */
        'public'?: boolean;
        /** The protocol to use for the port. Public ports only support `HTTP` and `HTTP/2`. Example: "HTTP" */
        'protocol': 'HTTP' | 'HTTP/2' | 'TCP' | 'UDP';
        /** An array of domains to redirect to this port. Each domain must first be verified and registered to your account. */
        'domains'?: string[];
        'security'?: {
            /** An array of credentials to access the service. */
            'credentials'?: {
                /** The username to access the service Example: "admin" */
                'username': string;
                /** The password to access the service with this username. Example: "password123" */
                'password': string;
                /** The type of authentication used Example: "basic-auth" */
                'type': 'basic-auth';
            }[];
            /** An array of IP address policies. */
            'policies'?: {
                /** An array of IP addresses used for this rule */
                'addresses': string[];
                /** The action for this rule. Example: "DENY" */
                'action': 'ALLOW' | 'DENY';
            }[];
        };
    }[];
};
/** Updates the list of ports for the given service. */
declare class UpdateServicePortsEndpoint extends PostApiEndpoint<UpdateServicePortsRequest, UpdateServicePortsResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: UpdateServicePortsRequest) => string;
    body: (payload: UpdateServicePortsRequest) => string;
}

declare type UpdateServiceBuildoptionsResult = any;
declare type UpdateServiceBuildoptionsCall = (opts: UpdateServiceBuildoptionsRequest) => Promise<ApiCallResponse<UpdateServiceBuildoptionsResult>>;
declare type UpdateServiceBuildoptionsRequest = {
    parameters: UpdateServiceBuildoptionsParameters;
    data: UpdateServiceBuildoptionsData;
};
declare type UpdateServiceBuildoptionsParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the service */
    'serviceId': string;
};
declare type UpdateServiceBuildoptionsData = {
    'dockerfile': {
        /** Build engine to use. Defaults to recommended build engine `kaniko` Example: "kaniko" */
        'buildEngine'?: 'kaniko' | 'buildkit';
        /** Should intermediate image layers be cached? Only supported by Kaniko. */
        'useCache'?: boolean;
        /** The file path of the Dockerfile. Example: "/Dockerfile" */
        'dockerFilePath'?: string;
        /** The working directory of the Dockerfile. Example: "/" */
        'dockerWorkDir'?: string;
    };
    /** An array of pull request build rules. Only supported for build services. Each commit belonging to a pull request on a branch that matches one of the provided build rules will be built automatically. */
    'prRestrictions'?: string[];
    /** An array of branch build rules. Only supported for build services. Each commit belonging to a branch that matches one of the provided build rules will be built automatically. */
    'branchRestrictions'?: string[];
    /** An array of path ignore rules. A commit will only be built if a file has been changed that does not match any of the ignore rules. Path ignore rules follow `.gitignore` syntax. */
    'pathIgnoreRules'?: string[];
} | {
    'buildpack': {
        /** Buildpack stack to use. Defaults to recommended stack `HEROKU_20`. Example: "HEROKU_20" */
        'builder'?: 'HEROKU_20' | 'HEROKU_18' | 'GOOGLE_V1' | 'CNB_ALPINE' | 'CNB_BIONIC' | 'PAKETO_TINY' | 'PAKETO_BASE' | 'PAKETO_FULL';
        /** Array of custom buildpacks to use. */
        'buildpackLocators'?: string[];
        /** The working directory to build in. Example: "/" */
        'buildContext'?: string;
    };
    /** An array of pull request build rules. Only supported for build services. Each commit belonging to a pull request on a branch that matches one of the provided build rules will be built automatically. */
    'prRestrictions'?: string[];
    /** An array of branch build rules. Only supported for build services. Each commit belonging to a branch that matches one of the provided build rules will be built automatically. */
    'branchRestrictions'?: string[];
    /** An array of path ignore rules. A commit will only be built if a file has been changed that does not match any of the ignore rules. Path ignore rules follow `.gitignore` syntax. */
    'pathIgnoreRules'?: string[];
} | {
    /** An array of pull request build rules. Only supported for build services. Each commit belonging to a pull request on a branch that matches one of the provided build rules will be built automatically. */
    'prRestrictions'?: string[];
    /** An array of branch build rules. Only supported for build services. Each commit belonging to a branch that matches one of the provided build rules will be built automatically. */
    'branchRestrictions'?: string[];
    /** An array of path ignore rules. A commit will only be built if a file has been changed that does not match any of the ignore rules. Path ignore rules follow `.gitignore` syntax. */
    'pathIgnoreRules'?: string[];
};
/** Updates the build options for a given service. */
declare class UpdateServiceBuildoptionsEndpoint extends PostApiEndpoint<UpdateServiceBuildoptionsRequest, UpdateServiceBuildoptionsResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: UpdateServiceBuildoptionsRequest) => string;
    body: (payload: UpdateServiceBuildoptionsRequest) => string;
}

declare type UpdateServiceBuildsourceResult = any;
declare type UpdateServiceBuildsourceCall = (opts: UpdateServiceBuildsourceRequest) => Promise<ApiCallResponse<UpdateServiceBuildsourceResult>>;
declare type UpdateServiceBuildsourceRequest = {
    parameters: UpdateServiceBuildsourceParameters;
    data: UpdateServiceBuildsourceData;
};
declare type UpdateServiceBuildsourceParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the service */
    'serviceId': string;
};
declare type UpdateServiceBuildsourceData = {
    /** URL of the Git repo to build. Example: "https://github.com/northflank/gatsby-with-northflank" */
    'projectUrl'?: string;
    /** The VCS provider to use. Example: "github" */
    'projectType'?: 'bitbucket' | 'gitlab' | 'github' | 'self-hosted';
    /** The name of the branch to use. Example: "master" */
    'projectBranch'?: string;
    /** If projectType is self-hosted, the ID of the self-hosted vcs to use. */
    'selfHostedVcsId'?: string;
    /** By default, if you have multiple version control accounts of the same provider linked, Northflank will pick a linked account that has access to the repository. If `accountLogin` is provided, Northflank will instead use your linked account with that login name. Example: "github-user" */
    'accountLogin'?: string;
};
/** Updates the version control source for a given build or combined service. */
declare class UpdateServiceBuildsourceEndpoint extends PostApiEndpoint<UpdateServiceBuildsourceRequest, UpdateServiceBuildsourceResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: UpdateServiceBuildsourceRequest) => string;
    body: (payload: UpdateServiceBuildsourceRequest) => string;
}

declare type UpdateServiceCmdoverrideResult = any;
declare type UpdateServiceCmdoverrideCall = (opts: UpdateServiceCmdoverrideRequest) => Promise<ApiCallResponse<UpdateServiceCmdoverrideResult>>;
declare type UpdateServiceCmdoverrideRequest = {
    parameters: UpdateServiceCmdoverrideParameters;
    data: UpdateServiceCmdoverrideData;
};
declare type UpdateServiceCmdoverrideParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the service */
    'serviceId': string;
};
declare type UpdateServiceCmdoverrideData = {
    /** The CMD to run, or null to disable the override. Example: "nginx -g" */
    'cmdOverride': string;
};
/** Sets the Docker CMD override for the given service. */
declare class UpdateServiceCmdoverrideEndpoint extends PostApiEndpoint<UpdateServiceCmdoverrideRequest, UpdateServiceCmdoverrideResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: UpdateServiceCmdoverrideRequest) => string;
    body: (payload: UpdateServiceCmdoverrideRequest) => string;
}

declare type GetServiceHealthchecksResult = {
    /** An array of health checks. */
    'healthChecks': {
        /** The protocol to access the health check with. Example: "HTTP" */
        'protocol': 'HTTP' | 'CMD' | 'TCP';
        /** The type of health check. Example: "readinessProbe" */
        'type': 'livenessProbe' | 'readinessProbe';
        /** The path of the health check endpoint. Example: "/health-check" */
        'path'?: string;
        /** The command to run for the health check. */
        'cmd'?: any;
        /** HTTP port number for the health check endpoint. Example: 3000 */
        'httpPort'?: any;
        /** TCP port number for the health check endpoint. */
        'tcpSocketPort'?: any;
        /** Initial delay, in seconds, before the health check is first run. Example: 10 */
        'initialDelaySeconds': number;
        /** The time between each check, in seconds. Example: 60 */
        'periodSeconds': number;
        'timeoutSeconds': number;
        /** The maximum number of allowed failures. Example: 3 */
        'failureThreshold': number;
        /** The number of successes required to mark the health check as a success. Example: 1 */
        'successThreshold'?: any;
    }[];
};
declare type GetServiceHealthchecksCall = (opts: GetServiceHealthchecksRequest) => Promise<ApiCallResponse<GetServiceHealthchecksResult>>;
declare type GetServiceHealthchecksRequest = {
    parameters: GetServiceHealthchecksParameters;
};
declare type GetServiceHealthchecksParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the service */
    'serviceId': string;
};
/** Lists the health checks for the given service. */
declare class GetServiceHealthchecksEndpoint extends GetApiEndpoint<GetServiceHealthchecksRequest, GetServiceHealthchecksResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: GetServiceHealthchecksRequest) => string;
    body: () => undefined;
}

declare type UpdateServiceHealthchecksResult = any;
declare type UpdateServiceHealthchecksCall = (opts: UpdateServiceHealthchecksRequest) => Promise<ApiCallResponse<UpdateServiceHealthchecksResult>>;
declare type UpdateServiceHealthchecksRequest = {
    parameters: UpdateServiceHealthchecksParameters;
    data: UpdateServiceHealthchecksData;
};
declare type UpdateServiceHealthchecksParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the service */
    'serviceId': string;
};
declare type UpdateServiceHealthchecksData = {
    /** An array of health checks */
    'healthChecks': {
        /** The protocol to access the health check with. Example: "HTTP" */
        'protocol': 'HTTP' | 'CMD' | 'TCP';
        /** The type of health check. Example: "readinessProbe" */
        'type': 'livenessProbe' | 'readinessProbe' | 'startupProbe';
        /** The path of the health check endpoint. Required when protocol is HTTP. Example: "/health-check" */
        'path'?: string;
        /** The command to run for the health check. Required when protocol is CMD */
        'cmd'?: string;
        /** Port number for the health check endpoint. Required when protocol is HTTP. Example: 3000 */
        'port'?: number;
        /** Initial delay, in seconds, before the health check is first run. Example: 10 */
        'initialDelaySeconds': number;
        /** The time between each check, in seconds. Example: 60 */
        'periodSeconds': number;
        /** The time to wait for a response before marking the health check as a failure. Example: 1 */
        'timeoutSeconds': number;
        /** The maximum number of allowed failures. Example: 3 */
        'failureThreshold': number;
        /** The number of successes required to mark the health check as a success. Example: 1 */
        'successThreshold'?: number;
    }[];
};
/** Updates health checks for the given service. */
declare class UpdateServiceHealthchecksEndpoint extends PostApiEndpoint<UpdateServiceHealthchecksRequest, UpdateServiceHealthchecksResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: UpdateServiceHealthchecksRequest) => string;
    body: (payload: UpdateServiceHealthchecksRequest) => string;
}

declare type GetServiceBuildsResult = {
    /** An array of builds. */
    'builds': {
        /** ID of the build. Example: "joyous-view-6290" */
        'id': string;
        /** Name of the branch the built commit belongs to. Example: "main" */
        'branch'?: string;
        /** ID of the pull request the commit belongs to. */
        'pullRequestId'?: number;
        /** The status of the build. Example: "SUCCESS" */
        'status'?: 'PENDING' | 'STARTING' | 'CLONING' | 'BUILDING' | 'UPLOADING' | 'ABORTED' | 'FAILURE' | 'SUCCESS' | 'CRASHED';
        /** The sha of the built commit. Example: "12c15e7ee25fd78f567ebf87f9178b8ad70025b3" */
        'sha'?: string;
        /** Whether the build has finished. Example: true */
        'concluded'?: boolean;
        /** Timestamp of the build initiation. Example: "2021-07-28T15:55:38.296Z" */
        'createdAt'?: string;
        /** Whether the build was successful. Example: true */
        'success'?: boolean;
        /** Description of the build status. Example: "Image successfully built" */
        'message'?: string;
        /** Timestamp of the build concluding. Example: 1606237973 */
        'buildConcludedAt'?: number;
    }[];
};
declare type GetServiceBuildsCall = (opts: GetServiceBuildsRequest) => Promise<ApiCallResponse<GetServiceBuildsResult>>;
declare type GetServiceBuildsRequest = {
    parameters: GetServiceBuildsParameters;
    options?: GetServiceBuildsOptions;
};
declare type GetServiceBuildsParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the service */
    'serviceId': string;
};
declare type GetServiceBuildsOptions = {
    /** The number of results to display per request. Maximum of 100 results per page. */
    'per_page'?: number;
    /** The page number to access. */
    'page'?: number;
    /** The cursor returned from the previous page of results, used to request the next page. */
    'cursor'?: string;
};
/** Lists the builds for the service */
declare class GetServiceBuildsEndpoint extends GetApiEndpoint<GetServiceBuildsRequest, GetServiceBuildsResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: GetServiceBuildsRequest) => string;
    body: () => undefined;
}

declare type StartServiceBuildResult = {
    /** ID of the build. Example: "joyous-view-6290" */
    'id': string;
    /** Name of the branch the built commit belongs to. Example: "main" */
    'branch'?: string;
    /** ID of the pull request the commit belongs to. */
    'pullRequestId'?: number;
    /** The sha of the built commit. Example: "12c15e7ee25fd78f567ebf87f9178b8ad70025b3" */
    'sha'?: string;
    /** Timestamp of the build initiation. Example: "2021-07-28T15:55:38.296Z" */
    'createdAt'?: string;
    /** The status of the build. Example: "PENDING" */
    'status'?: string;
    /** Whether the build has finished. */
    'concluded'?: boolean;
};
declare type StartServiceBuildCall = (opts: StartServiceBuildRequest) => Promise<ApiCallResponse<StartServiceBuildResult>>;
declare type StartServiceBuildRequest = {
    parameters: StartServiceBuildParameters;
    data: StartServiceBuildData;
};
declare type StartServiceBuildParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the service */
    'serviceId': string;
};
declare type StartServiceBuildData = {
    /** Commit sha to build. If not provided, builds the most recent relevant commit. Example: "262ed9817b3cad5142fbceabe0c9e371e390d616" */
    'sha'?: string;
    /** Branch to build from. If `sha` is not provided, the latest commit of this branch will be built. Only supported by build services. Build services require either `branch` or `pullRequestId` field, but cannot be provided with both. */
    'branch'?: string;
    /** ID of a pull request to build from. If `sha` is not provided, the latest commit of this pull request will be built. Only supported by build services. Build services require either `branch` or `pullRequestId` field, but cannot be provided with both. */
    'pullRequestId'?: number;
} | {
    /** Commit sha to build. If not provided, builds the most recent relevant commit. Example: "262ed9817b3cad5142fbceabe0c9e371e390d616" */
    'sha'?: string;
    /** Branch to build from. If `sha` is not provided, the latest commit of this branch will be built. Only supported by build services. Build services require either `branch` or `pullRequestId` field, but cannot be provided with both. */
    'branch'?: string;
    /** ID of a pull request to build from. If `sha` is not provided, the latest commit of this pull request will be built. Only supported by build services. Build services require either `branch` or `pullRequestId` field, but cannot be provided with both. */
    'pullRequestId'?: number;
    /** An optional object that may specify several different overrides on the build level. */
    'overrides'?: {
        /** Build arguments that will be set on this build only. In case of conflicts these values take precedence. Example: {"ARGUMENT_1":"abcdef","ARGUMENT_2":"12345"} */
        'buildArguments'?: any;
    };
};
/** Start a new build for the given combined or build service. If given a commit sha, it will build that commit. Otherwise, the most recent relevant commit will be built. If the service provided is a build service, a branch name or pull request to build from is required. */
declare class StartServiceBuildEndpoint extends PostApiEndpoint<StartServiceBuildRequest, StartServiceBuildResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: StartServiceBuildRequest) => string;
    body: (payload: StartServiceBuildRequest) => string;
}

declare type GetServiceBuildResult = {
    /** ID of the build. Example: "joyous-view-6290" */
    'id': string;
    /** Name of the branch the built commit belongs to. Example: "main" */
    'branch'?: string;
    /** ID of the pull request the commit belongs to. */
    'pullRequestId'?: number;
    /** The status of the build. Example: "SUCCESS" */
    'status'?: 'PENDING' | 'STARTING' | 'CLONING' | 'BUILDING' | 'UPLOADING' | 'ABORTED' | 'FAILURE' | 'SUCCESS' | 'CRASHED';
    /** The sha of the built commit. Example: "12c15e7ee25fd78f567ebf87f9178b8ad70025b3" */
    'sha'?: string;
    /** Whether the build has finished. Example: true */
    'concluded'?: boolean;
    /** Timestamp of the build initiation. Example: "2021-07-28T15:55:38.296Z" */
    'createdAt'?: string;
    /** Whether the build was successful. Example: true */
    'success'?: boolean;
    /** Description of the build status. Example: "Image successfully built" */
    'message'?: string;
    /** Timestamp of the build concluding. Example: 1606237973 */
    'buildConcludedAt'?: number;
};
declare type GetServiceBuildCall = (opts: GetServiceBuildRequest) => Promise<ApiCallResponse<GetServiceBuildResult>>;
declare type GetServiceBuildRequest = {
    parameters: GetServiceBuildParameters;
};
declare type GetServiceBuildParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the service */
    'serviceId': string;
    /** ID of the service build */
    'buildId': string;
};
/** Gets information about a build for the service */
declare class GetServiceBuildEndpoint extends GetApiEndpoint<GetServiceBuildRequest, GetServiceBuildResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: GetServiceBuildRequest) => string;
    body: () => undefined;
}

declare type AbortServiceBuildResult = any;
declare type AbortServiceBuildCall = (opts: AbortServiceBuildRequest) => Promise<ApiCallResponse<AbortServiceBuildResult>>;
declare type AbortServiceBuildRequest = {
    parameters: AbortServiceBuildParameters;
};
declare type AbortServiceBuildParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the service */
    'serviceId': string;
    /** ID of the service build */
    'buildId': string;
};
/** Aborts the given service build */
declare class AbortServiceBuildEndpoint extends DeleteApiEndpoint<AbortServiceBuildRequest, AbortServiceBuildResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: AbortServiceBuildRequest) => string;
    body: () => undefined;
}

declare type GetServiceContainersResult = {
    /** An array of containers. */
    'containers': {
        /** The name of the container. Example: "example-service-78b4d4459d-sbtn8" */
        'name': string;
        /** The timestamp the container was created. Example: 1611241087 */
        'createdAt': number;
        /** The current status of the container. Example: "TASK_RUNNING" */
        'status': 'TASK_RUNNING' | 'TASK_STARTING' | 'TASK_STAGING' | 'TASK_KILLING' | 'TASK_KILLED' | 'TASK_FAILED' | 'TASK_FINISHED';
        /** The timestamp the container was last updated. Example: 1611241087 */
        'updatedAt': number;
    }[];
};
declare type GetServiceContainersCall = (opts: GetServiceContainersRequest) => Promise<ApiCallResponse<GetServiceContainersResult>>;
declare type GetServiceContainersRequest = {
    parameters: GetServiceContainersParameters;
    options?: GetServiceContainersOptions;
};
declare type GetServiceContainersParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the service */
    'serviceId': string;
};
declare type GetServiceContainersOptions = {
    /** The number of results to display per request. Maximum of 100 results per page. */
    'per_page'?: number;
    /** The page number to access. */
    'page'?: number;
    /** The cursor returned from the previous page of results, used to request the next page. */
    'cursor'?: string;
};
/** Gets a list of containers for the given service. */
declare class GetServiceContainersEndpoint extends GetApiEndpoint<GetServiceContainersRequest, GetServiceContainersResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: GetServiceContainersRequest) => string;
    body: () => undefined;
}

declare type GetServiceBranchesResult = {
    /** A list of branches for this repository. */
    'branches'?: {
        /** Name of the branch. Example: "main" */
        'name': string;
        'id': string;
        /** Details about the most recent commit on the branch. */
        'commit': {
            /** SHA identifier of the commit. Example: "f8aca180e989be62cba71db629d2ede05f2d10c4" */
            'sha': string;
            /** Details about the commit author. */
            'author': {
                /** The login of the commit author. Example: "northflank" */
                'login': string;
            };
            /** Commit message of the commit. Example: "Initial commit" */
            'message'?: string;
            /** Timestamp of the commit. Example: "2021-09-17T14:04:39.000Z" */
            'date'?: string;
        };
    }[];
};
declare type GetServiceBranchesCall = (opts: GetServiceBranchesRequest) => Promise<ApiCallResponse<GetServiceBranchesResult>>;
declare type GetServiceBranchesRequest = {
    parameters: GetServiceBranchesParameters;
    options?: GetServiceBranchesOptions;
};
declare type GetServiceBranchesParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the service */
    'serviceId': string;
};
declare type GetServiceBranchesOptions = {
    /** The number of results to display per request. Maximum of 100 results per page. */
    'per_page'?: number;
    /** The page number to access. */
    'page'?: number;
    /** The cursor returned from the previous page of results, used to request the next page. */
    'cursor'?: string;
};
/** Gets information about the branches of the given service. */
declare class GetServiceBranchesEndpoint extends GetApiEndpoint<GetServiceBranchesRequest, GetServiceBranchesResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: GetServiceBranchesRequest) => string;
    body: () => undefined;
}

declare type GetServicePullrequestsResult = {
    /** A list of pull requests for this repository. */
    'pullRequests'?: {
        /** ID number of the pull request. Example: 1 */
        'id': number;
        /** Status of the pull request. Example: "OPEN" */
        'state': string;
        /** Title of the pull request. Example: "Add new feature handling" */
        'title': string;
        /** Name of the branch the pull request is merging from. Example: "feature/new-feature" */
        'source': string;
        /** Name of the branch the pull request is being merged into. Example: "main" */
        'destination': string;
        /** SHA of the most recent commit of the pull request. Example: "4f101d8821aeb3e4f81f95f3e886a2759ba7b9db" */
        'sha': string;
        /** The timestamp the pull request was opened. Example: "2021-03-22T11:05:52.000Z" */
        'created_at': string;
        /** The timestamp the pull request was last updated at. Example: "2021-05-11T16:05:43.000Z" */
        'updated_at': string;
        'html_url': string;
    }[];
};
declare type GetServicePullrequestsCall = (opts: GetServicePullrequestsRequest) => Promise<ApiCallResponse<GetServicePullrequestsResult>>;
declare type GetServicePullrequestsRequest = {
    parameters: GetServicePullrequestsParameters;
    options?: GetServicePullrequestsOptions;
};
declare type GetServicePullrequestsParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the service */
    'serviceId': string;
};
declare type GetServicePullrequestsOptions = {
    /** The number of results to display per request. Maximum of 100 results per page. */
    'per_page'?: number;
    /** The page number to access. */
    'page'?: number;
    /** The cursor returned from the previous page of results, used to request the next page. */
    'cursor'?: string;
};
/** Gets information about the pull-requests of the given service. */
declare class GetServicePullrequestsEndpoint extends GetApiEndpoint<GetServicePullrequestsRequest, GetServicePullrequestsResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: GetServicePullrequestsRequest) => string;
    body: () => undefined;
}

declare type ListReposResult = {
    /** A list of accessible repositories. */
    'repos'?: {
        /** Version control provider of the repository. Example: "github" */
        'vcsService': 'bitbucket' | 'gitlab' | 'github' | 'self-hosted';
        /** If `vcsService` is `self-hosted`, the ID of the self-hosted provider. */
        'selfHostedVcsId'?: string;
        /** The ID of the repository, according to the version control provider. Example: 123456789 */
        'id': any;
        /** The name of the repository. Example: "gatsby-with-northflank" */
        'name': string;
        /** The full name of the repository. Example: "northflank/gatsby-with-northflank" */
        'full_name': string;
        /** The url of the repository. Example: "https://github.com/northflank/gatsby-with-northflank" */
        'url': string;
        /** Details about the repository owner. */
        'owner': {
            /** The login of the repository owner. Example: "northflank" */
            'login': string;
        };
        /** The login of the linked version control account that can access this repository. Example: "example-user" */
        'accountLogin': string;
    }[];
};
declare type ListReposCall = (opts: ListReposRequest) => Promise<ApiCallResponse<ListReposResult>>;
declare type ListReposRequest = {
    options?: ListReposOptions;
};
declare type ListReposOptions = {
    /** The number of results to display per request. Maximum of 100 results per page. */
    'per_page'?: number;
    /** The page number to access. */
    'page'?: number;
    /** The cursor returned from the previous page of results, used to request the next page. */
    'cursor'?: string;
    /** If provided, only returns repositories belonging to this version control provider. */
    'vcs_service'?: string;
    /** If provided, only returns repositories belonging to this self-hosted version control provider. */
    'self_hosted_vcs_id'?: string;
    /** If provided, only returns repositories that can be accessed by the linked version control account with this name. */
    'account_login'?: string;
};
/** Gets a list of repositories accessible to this account */
declare class ListReposEndpoint extends GetApiEndpoint<ListReposRequest, ListReposResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: ListReposRequest) => string;
    body: () => undefined;
}

declare type ListBranchesResult = {
    /** A list of branches for this repository. */
    'branches'?: {
        /** Name of the branch. Example: "main" */
        'name': string;
        'id': string;
        /** Details about the most recent commit on the branch. */
        'commit': {
            /** SHA identifier of the commit. Example: "f8aca180e989be62cba71db629d2ede05f2d10c4" */
            'sha': string;
            /** Details about the commit author. */
            'author': {
                /** The login of the commit author. Example: "northflank" */
                'login': string;
            };
            /** Commit message of the commit. Example: "Initial commit" */
            'message'?: string;
            /** Timestamp of the commit. Example: "2021-09-17T14:04:39.000Z" */
            'date'?: string;
        };
    }[];
};
declare type ListBranchesCall = (opts: ListBranchesRequest) => Promise<ApiCallResponse<ListBranchesResult>>;
declare type ListBranchesRequest = {
    parameters: ListBranchesParameters;
    options?: ListBranchesOptions;
};
declare type ListBranchesParameters = {
    /** Version control provider of the repository */ 'vcsService': string;
    /** Name of the owner of the repository */
    'repositoryOwner': string;
    /** Name of the repository */
    'repositoryName': string;
};
declare type ListBranchesOptions = {
    /** The number of results to display per request. Maximum of 100 results per page. */
    'per_page'?: number;
    /** The page number to access. */
    'page'?: number;
    /** The cursor returned from the previous page of results, used to request the next page. */
    'cursor'?: string;
};
/** Gets a list of branches for the repo */
declare class ListBranchesEndpoint extends GetApiEndpoint<ListBranchesRequest, ListBranchesResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: ListBranchesRequest) => string;
    body: () => undefined;
}

declare type ListVolumesResult = {
    /** Identifier for the volume Example: "example-volume" */
    'id': string;
    /** Volume name Example: "Example Volume" */
    'name': string;
    /** Information about the desired size and type of the volume. Storage class is only configurable with the relevant feature flag enabled for your account, */
    'spec': {
        'storageClassName'?: 'ssd' | 'hdd';
        'storageSize': number;
    };
    /** The object to attach this volume to. */
    'owningObject'?: {
        /** The internal id of object to attach this volume to. Example: "example-service" */
        'id': string;
        /** The type of the object to attach this volume to. Example: "service" */
        'type': 'service';
    };
    /** Status the volume is in on the cluster Example: "BOUND" */
    'status': string;
    /** The timestamp the volume was created at Example: "2021-01-01 12:00:00.000Z" */
    'createdAt': string;
    /** The timestamp the volume was last updated at Example: "2021-01-01 12:00:00.000Z" */
    'updatedAt': string;
}[];
declare type ListVolumesCall = (opts: ListVolumesRequest) => Promise<ApiCallResponse<ListVolumesResult>>;
declare type ListVolumesRequest = {
    parameters: ListVolumesParameters;
};
declare type ListVolumesParameters = {
    /** ID of the project */ 'projectId': string;
};
/** Gets a list of volumes belonging to the project */
declare class ListVolumesEndpoint extends GetApiEndpoint<ListVolumesRequest, ListVolumesResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: ListVolumesRequest) => string;
    body: () => undefined;
}

declare type CreateVolumeResult = {
    /** Identifier for the volume Example: "example-volume" */
    'id': string;
    /** Volume name Example: "Example Volume" */
    'name': string;
    /** Information about the desired size and type of the volume. Storage class is only configurable with the relevant feature flag enabled for your account, */
    'spec': {
        'storageClassName'?: 'ssd' | 'hdd';
        'storageSize': number;
    };
    /** The object to attach this volume to. */
    'owningObject'?: {
        /** The internal id of object to attach this volume to. Example: "example-service" */
        'id': string;
        /** The type of the object to attach this volume to. Example: "service" */
        'type': 'service';
    };
    /** Status the volume is in on the cluster Example: "BOUND" */
    'status': string;
    /** The timestamp the volume was created at Example: "2021-01-01 12:00:00.000Z" */
    'createdAt': string;
    /** The timestamp the volume was last updated at Example: "2021-01-01 12:00:00.000Z" */
    'updatedAt': string;
} | any;
declare type CreateVolumeCall = (opts: CreateVolumeRequest) => Promise<ApiCallResponse<CreateVolumeResult>>;
declare type CreateVolumeRequest = {
    parameters: CreateVolumeParameters;
    data: CreateVolumeData;
};
declare type CreateVolumeParameters = {
    /** ID of the project */ 'projectId': string;
};
declare type CreateVolumeData = {
    /** The name of the volume. Example: "Example Volume" */
    'name': string;
    /** Array of mounts, containerMountPaths must be unique */
    'mounts': {
        /** Optionally specify the path inside this volume that should be mounted */
        'volumeMountPath'?: string;
        /** Specify the path into which the volume should be mounted Example: "/container" */
        'containerMountPath': string;
    }[];
    /** Information about the desired size and type of the volume. Storage class is only configurable with the relevant feature flag enabled for your account, */
    'spec': {
        'storageClassName'?: 'ssd' | 'hdd';
        'storageSize': number;
    };
    /** The object to attach this volume to. */
    'owningObject'?: {
        /** The internal id of object to attach this volume to. Example: "example-service" */
        'id': string;
        /** The type of the object to attach this volume to. Example: "service" */
        'type': 'service';
    };
};
/** Creates a volume with the specified payload */
declare class CreateVolumeEndpoint extends PostApiEndpoint<CreateVolumeRequest, CreateVolumeResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: CreateVolumeRequest) => string;
    body: (payload: CreateVolumeRequest) => string;
}

declare type GetVolumeResult = {
    /** Identifier for the volume Example: "example-volume" */
    'id': string;
    /** Volume name Example: "Example Volume" */
    'name': string;
    /** Information about the desired size and type of the volume. Storage class is only configurable with the relevant feature flag enabled for your account, */
    'spec': {
        'storageClassName'?: 'ssd' | 'hdd';
        'storageSize': number;
    };
    /** The object to attach this volume to. */
    'owningObject'?: {
        /** The internal id of object to attach this volume to. Example: "example-service" */
        'id': string;
        /** The type of the object to attach this volume to. Example: "service" */
        'type': 'service';
    };
    /** Status the volume is in on the cluster Example: "BOUND" */
    'status': string;
    /** The timestamp the volume was created at Example: "2021-01-01 12:00:00.000Z" */
    'createdAt': string;
    /** The timestamp the volume was last updated at Example: "2021-01-01 12:00:00.000Z" */
    'updatedAt': string;
};
declare type GetVolumeCall = (opts: GetVolumeRequest) => Promise<ApiCallResponse<GetVolumeResult>>;
declare type GetVolumeRequest = {
    parameters: GetVolumeParameters;
};
declare type GetVolumeParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the volume */
    'volumeId': string;
};
/** Retrieve a volume */
declare class GetVolumeEndpoint extends GetApiEndpoint<GetVolumeRequest, GetVolumeResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: GetVolumeRequest) => string;
    body: () => undefined;
}

declare type UpdateVolumeResult = any;
declare type UpdateVolumeCall = (opts: UpdateVolumeRequest) => Promise<ApiCallResponse<UpdateVolumeResult>>;
declare type UpdateVolumeRequest = {
    parameters: UpdateVolumeParameters;
    data: UpdateVolumeData;
};
declare type UpdateVolumeParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the volume */
    'volumeId': string;
};
declare type UpdateVolumeData = {
    /** Array of mounts, containerMountPaths must be unique */
    'mounts'?: {
        /** Optionally specify the path inside this volume that should be mounted */
        'volumeMountPath'?: string;
        /** Specify the path into which the volume should be mounted Example: "/container" */
        'containerMountPath': string;
    }[];
    'spec'?: {
        /** The size of the storage, in megabytes. Configurable sizes depend on the storage class. Example: 4096 */
        'storageSize'?: number;
    };
};
/** Update volume mounts and storage size */
declare class UpdateVolumeEndpoint extends PostApiEndpoint<UpdateVolumeRequest, UpdateVolumeResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: UpdateVolumeRequest) => string;
    body: (payload: UpdateVolumeRequest) => string;
}

declare type DeleteVolumeResult = any;
declare type DeleteVolumeCall = (opts: DeleteVolumeRequest) => Promise<ApiCallResponse<DeleteVolumeResult>>;
declare type DeleteVolumeRequest = {
    parameters: DeleteVolumeParameters;
};
declare type DeleteVolumeParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the volume */
    'volumeId': string;
};
/** Deletes this volume and its associated data. */
declare class DeleteVolumeEndpoint extends DeleteApiEndpoint<DeleteVolumeRequest, DeleteVolumeResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: DeleteVolumeRequest) => string;
    body: () => undefined;
}

declare type AttachVolumeResult = any;
declare type AttachVolumeCall = (opts: AttachVolumeRequest) => Promise<ApiCallResponse<AttachVolumeResult>>;
declare type AttachVolumeRequest = {
    parameters: AttachVolumeParameters;
    data: AttachVolumeData;
};
declare type AttachVolumeParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the volume */
    'volumeId': string;
};
declare type AttachVolumeData = {
    /** The object to attach this volume to. */
    'owningObject': {
        /** The internal id of object to attach this volume to. Example: "example-service" */
        'id': string;
        /** The type of the object to attach this volume to. Example: "service" */
        'type': 'service';
    };
};
/** Attach a volume */
declare class AttachVolumeEndpoint extends PostApiEndpoint<AttachVolumeRequest, AttachVolumeResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: AttachVolumeRequest) => string;
    body: (payload: AttachVolumeRequest) => string;
}

declare type DetachVolumeResult = any;
declare type DetachVolumeCall = (opts: DetachVolumeRequest) => Promise<ApiCallResponse<DetachVolumeResult>>;
declare type DetachVolumeRequest = {
    parameters: DetachVolumeParameters;
    data: DetachVolumeData;
};
declare type DetachVolumeParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the volume */
    'volumeId': string;
};
declare type DetachVolumeData = any;
/** Detach a volume */
declare class DetachVolumeEndpoint extends PostApiEndpoint<DetachVolumeRequest, DetachVolumeResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: DetachVolumeRequest) => string;
    body: (payload: DetachVolumeRequest) => string;
}

declare type GetServiceBuildargumentsResult = {
    /** The build arguments, formatted as a JSON object. If the `show` parameter is set to `this`, this will only contain secrets saved to this entity. If the `show` parameter is set to `inherited`, this will only contain secrets inherited from linked secret groups. Otherwise, this will contain both. Example: {"ARGUMENT_1":"abcdef","ARGUMENT_2":"12345"} */
    'buildArguments': any;
    /** The build secret files, formatted as a JSON object. If the `show` parameter is set to `this`, this will only contain files saved to this entity. If the `show` parameter is set to `inherited`, this will only contain files inherited from linked secret groups. Otherwise, this will contain both. Example: {"/dir/fileName":{"data":"VGhpcyBpcyBhbiBleGFtcGxlIHdpdGggYSB0ZW1wbGF0ZWQgJHtOT0RFX0VOVn0gdmFyaWFibGU=","encoding":"utf-8"}} */
    'buildFiles': any;
};
declare type GetServiceBuildargumentsCall = (opts: GetServiceBuildargumentsRequest) => Promise<ApiCallResponse<GetServiceBuildargumentsResult>>;
declare type GetServiceBuildargumentsRequest = {
    parameters: GetServiceBuildargumentsParameters;
    options?: GetServiceBuildargumentsOptions;
};
declare type GetServiceBuildargumentsParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the service */
    'serviceId': string;
};
declare type GetServiceBuildargumentsOptions = {
    /** Which secrets to display - if set to `this` only the group's secrets are displayed, if set to `inherited` only secrets from linked addons are displayed, if set to `all` or not provided, both are displayed. */
    'show'?: string;
};
/** Gets the build arguments of the given service. If the API key does not have the permission 'Project > Secrets > General > Read', secrets inherited from secret groups will not be displayed. */
declare class GetServiceBuildargumentsEndpoint extends GetApiEndpoint<GetServiceBuildargumentsRequest, GetServiceBuildargumentsResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: GetServiceBuildargumentsRequest) => string;
    body: () => undefined;
}

declare type UpdateServiceBuildargumentsResult = any;
declare type UpdateServiceBuildargumentsCall = (opts: UpdateServiceBuildargumentsRequest) => Promise<ApiCallResponse<UpdateServiceBuildargumentsResult>>;
declare type UpdateServiceBuildargumentsRequest = {
    parameters: UpdateServiceBuildargumentsParameters;
    data: UpdateServiceBuildargumentsData;
};
declare type UpdateServiceBuildargumentsParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the service */
    'serviceId': string;
};
declare type UpdateServiceBuildargumentsData = {
    /** An object containing the all of the build arguments to set for the service. Keys must only contain letters and numbers separated with underscores, may not start with a number Example: {"ARGUMENT_1":"abcdef","ARGUMENT_2":"12345"} */
    'buildArguments': any;
} | {
    /** An object containing the all of the build arguments to set for the service. Keys must only contain letters and numbers separated with underscores, may not start with a number Example: {"ARGUMENT_1":"abcdef","ARGUMENT_2":"12345"} */
    'buildArguments': any;
    /** Secret files as JSON object, encrypted at rest. File path must be absolute Example: {"/dir/fileName":{"data":"VGhpcyBpcyBhbiBleGFtcGxlIHdpdGggYSB0ZW1wbGF0ZWQgJHtOT0RFX0VOVn0gdmFyaWFibGU=","encoding":"utf-8"}} */
    'buildFiles'?: any;
};
/** Sets the build arguments for the given service. */
declare class UpdateServiceBuildargumentsEndpoint extends PostApiEndpoint<UpdateServiceBuildargumentsRequest, UpdateServiceBuildargumentsResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: UpdateServiceBuildargumentsRequest) => string;
    body: (payload: UpdateServiceBuildargumentsRequest) => string;
}

declare type GetServiceBuildargumentdetailsResult = {
    /** Details about all the secrets accessible by the service. */
    'buildArguments': {
        /** A stored secret and details about it and its value. This can have the name of any saved secret. */
        'MY_VARIABLE_NAME'?: {
            /** The value of the secret. Example: "abcdef123456" */
            'value': any;
            /** The ID of the secret group the secret is inherited from, if applicable. Example: "example-secret" */
            'inheritedFrom'?: string;
            /** The ID of the addon the secret is inherited from, if applicable. Example: "example-addon" */
            'addonId'?: string;
            /** The priority of the secret group the secret is inherited from, if applicable. Example: 10 */
            'priority'?: number;
            /** An array containing data about other places the secret has been inherited from, but that are not being used as a secret with the same key exists with a higher priority. */
            'overriding': {
                /** The value of the secret. Example: "ffffffffffff" */
                'value': any;
                /** The ID of the secret group the secret is inherited from. Example: "secret-2" */
                'inheritedFrom': string;
                /** The ID of the addon the secret is inherited from, if applicable. Example: "addon-2" */
                'addonId'?: string;
                /** The priority of the secret group the secret is inherited from. */
                'priority': number;
            }[];
        };
    };
    /** Details about all the secrets accessible by the service. */
    'buildFiles': {
        /** A stored secret and details about it and its value. This can have the name of any saved secret. */
        '/dir/fileName'?: {
            /** The value of the secret. Example: {"/dir/fileName":{"data":"VGhpcyBpcyBhbiBleGFtcGxlIHdpdGggYSB0ZW1wbGF0ZWQgJHtOT0RFX0VOVn0gdmFyaWFibGU=","encoding":"utf-8"}} */
            'value': {
                /** base64 encoded string of the file contents Example: "VGhpcyBpcyBhbiBleGFtcGxlIHdpdGggYSB0ZW1wbGF0ZWQgJHtOT0RFX0VOVn0gdmFyaWFibGU=" */
                'data'?: string;
                /** Original encoding of the file Example: "utf-8" */
                'encoding'?: string;
            };
            /** The ID of the secret group the secret is inherited from, if applicable. Example: "example-secret" */
            'inheritedFrom'?: string;
            /** The priority of the secret group the secret is inherited from, if applicable. Example: 10 */
            'priority'?: number;
            /** An array containing data about other places the file has been inherited from, but that are not being used as a secret with the same file path exists with a higher priority. */
            'overriding': {
                /** The value of the secret. Example: "ffffffffffff" */
                'value': any;
                /** The ID of the secret group the secret is inherited from. Example: "secret-2" */
                'inheritedFrom': string;
                /** The priority of the secret group the secret is inherited from. */
                'priority': number;
            }[];
        };
    };
};
declare type GetServiceBuildargumentdetailsCall = (opts: GetServiceBuildargumentdetailsRequest) => Promise<ApiCallResponse<GetServiceBuildargumentdetailsResult>>;
declare type GetServiceBuildargumentdetailsRequest = {
    parameters: GetServiceBuildargumentdetailsParameters;
};
declare type GetServiceBuildargumentdetailsParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the service */
    'serviceId': string;
};
/** Get details about the build arguments accessible by the given service. Also requires the permission 'Project > Secrets > General > Read' */
declare class GetServiceBuildargumentdetailsEndpoint extends GetApiEndpoint<GetServiceBuildargumentdetailsRequest, GetServiceBuildargumentdetailsResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: GetServiceBuildargumentdetailsRequest) => string;
    body: () => undefined;
}

declare type GetServiceRuntimeenvironmentResult = {
    /** The runtime environment variables, formatted as a JSON object. If the `show` parameter is set to `this`, this will only contain secrets saved to this entity. If the `show` parameter is set to `inherited`, this will only contain secrets inherited from linked secret groups. Otherwise, this will contain both. Example: {"VARIABLE_1":"abcdef","VARIABLE_2":"12345"} */
    'runtimeEnvironment': any;
    /** The runtime secret files, formatted as a JSON object. If the `show` parameter is set to `this`, this will only contain files saved to this entity. If the `show` parameter is set to `inherited`, this will only contain files inherited from linked secret groups. Otherwise, this will contain both. Example: {"/dir/fileName":{"data":"VGhpcyBpcyBhbiBleGFtcGxlIHdpdGggYSB0ZW1wbGF0ZWQgJHtOT0RFX0VOVn0gdmFyaWFibGU=","encoding":"utf-8"}} */
    'runtimeFiles': any;
};
declare type GetServiceRuntimeenvironmentCall = (opts: GetServiceRuntimeenvironmentRequest) => Promise<ApiCallResponse<GetServiceRuntimeenvironmentResult>>;
declare type GetServiceRuntimeenvironmentRequest = {
    parameters: GetServiceRuntimeenvironmentParameters;
    options?: GetServiceRuntimeenvironmentOptions;
};
declare type GetServiceRuntimeenvironmentParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the service */
    'serviceId': string;
};
declare type GetServiceRuntimeenvironmentOptions = {
    /** Which secrets to display - if set to `this` only the group's secrets are displayed, if set to `inherited` only secrets from linked addons are displayed, if set to `all` or not provided, both are displayed. */
    'show'?: string;
};
/** Gets the runtime environment of the given service. If the API key does not have the permission 'Project > Secrets > General > Read', secrets inherited from secret groups will not be displayed. */
declare class GetServiceRuntimeenvironmentEndpoint extends GetApiEndpoint<GetServiceRuntimeenvironmentRequest, GetServiceRuntimeenvironmentResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: GetServiceRuntimeenvironmentRequest) => string;
    body: () => undefined;
}

declare type UpdateServiceRuntimeenvironmentResult = {
    /** True if the operation was successful. Example: true */
    'success': boolean;
    /** Did the service successfully restart with the new environment variables? Example: true */
    'restartSuccessful': boolean;
};
declare type UpdateServiceRuntimeenvironmentCall = (opts: UpdateServiceRuntimeenvironmentRequest) => Promise<ApiCallResponse<UpdateServiceRuntimeenvironmentResult>>;
declare type UpdateServiceRuntimeenvironmentRequest = {
    parameters: UpdateServiceRuntimeenvironmentParameters;
    data: UpdateServiceRuntimeenvironmentData;
};
declare type UpdateServiceRuntimeenvironmentParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the service */
    'serviceId': string;
};
declare type UpdateServiceRuntimeenvironmentData = {
    /** An object containing the all of the environment variables to set for the service. Keys must only contain letters and numbers separated with underscores, may not start with a number Example: {"VARIABLE_1":"abcdef","VARIABLE_2":"12345"} */
    'runtimeEnvironment': any;
} | {
    /** An object containing the all of the environment variables to set for the service. Keys must only contain letters and numbers separated with underscores, may not start with a number Example: {"VARIABLE_1":"abcdef","VARIABLE_2":"12345"} */
    'runtimeEnvironment': any;
    /** Secret files as JSON object, encrypted at rest. File path must be absolute Example: {"/dir/fileName":{"data":"VGhpcyBpcyBhbiBleGFtcGxlIHdpdGggYSB0ZW1wbGF0ZWQgJHtOT0RFX0VOVn0gdmFyaWFibGU=","encoding":"utf-8"}} */
    'runtimeFiles'?: any;
};
/** Sets the runtime environment for the given service. */
declare class UpdateServiceRuntimeenvironmentEndpoint extends PostApiEndpoint<UpdateServiceRuntimeenvironmentRequest, UpdateServiceRuntimeenvironmentResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: UpdateServiceRuntimeenvironmentRequest) => string;
    body: (payload: UpdateServiceRuntimeenvironmentRequest) => string;
}

declare type GetServiceRuntimeenvironmentdetailsResult = {
    /** Details about all the secrets accessible by the service. */
    'runtimeEnvironment': {
        /** A stored secret and details about it and its value. This can have the name of any saved secret. */
        'MY_VARIABLE_NAME'?: {
            /** The value of the secret. Example: "abcdef123456" */
            'value': any;
            /** The ID of the secret group the secret is inherited from, if applicable. Example: "example-secret" */
            'inheritedFrom'?: string;
            /** The ID of the addon the secret is inherited from, if applicable. Example: "example-addon" */
            'addonId'?: string;
            /** The priority of the secret group the secret is inherited from, if applicable. Example: 10 */
            'priority'?: number;
            /** An array containing data about other places the secret has been inherited from, but that are not being used as a secret with the same key exists with a higher priority. */
            'overriding': {
                /** The value of the secret. Example: "ffffffffffff" */
                'value': any;
                /** The ID of the secret group the secret is inherited from. Example: "secret-2" */
                'inheritedFrom': string;
                /** The ID of the addon the secret is inherited from, if applicable. Example: "addon-2" */
                'addonId'?: string;
                /** The priority of the secret group the secret is inherited from. */
                'priority': number;
            }[];
        };
    };
    /** Details about all the secrets accessible by the service. */
    'runtimeFiles': {
        /** A stored secret and details about it and its value. This can have the name of any saved secret. */
        '/dir/fileName'?: {
            /** The value of the secret. Example: {"/dir/fileName":{"data":"VGhpcyBpcyBhbiBleGFtcGxlIHdpdGggYSB0ZW1wbGF0ZWQgJHtOT0RFX0VOVn0gdmFyaWFibGU=","encoding":"utf-8"}} */
            'value': {
                /** base64 encoded string of the file contents Example: "VGhpcyBpcyBhbiBleGFtcGxlIHdpdGggYSB0ZW1wbGF0ZWQgJHtOT0RFX0VOVn0gdmFyaWFibGU=" */
                'data'?: string;
                /** Original encoding of the file Example: "utf-8" */
                'encoding'?: string;
            };
            /** The ID of the secret group the secret is inherited from, if applicable. Example: "example-secret" */
            'inheritedFrom'?: string;
            /** The priority of the secret group the secret is inherited from, if applicable. Example: 10 */
            'priority'?: number;
            /** An array containing data about other places the file has been inherited from, but that are not being used as a secret with the same file path exists with a higher priority. */
            'overriding': {
                /** The value of the secret. Example: "ffffffffffff" */
                'value': any;
                /** The ID of the secret group the secret is inherited from. Example: "secret-2" */
                'inheritedFrom': string;
                /** The priority of the secret group the secret is inherited from. */
                'priority': number;
            }[];
        };
    };
};
declare type GetServiceRuntimeenvironmentdetailsCall = (opts: GetServiceRuntimeenvironmentdetailsRequest) => Promise<ApiCallResponse<GetServiceRuntimeenvironmentdetailsResult>>;
declare type GetServiceRuntimeenvironmentdetailsRequest = {
    parameters: GetServiceRuntimeenvironmentdetailsParameters;
};
declare type GetServiceRuntimeenvironmentdetailsParameters = {
    /** ID of the project */ 'projectId': string;
    /** ID of the service */
    'serviceId': string;
};
/** Get details about the runtime environment accessible by the given service. Also requires the permission 'Project > Secrets > General > Read' */
declare class GetServiceRuntimeenvironmentdetailsEndpoint extends GetApiEndpoint<GetServiceRuntimeenvironmentdetailsRequest, GetServiceRuntimeenvironmentdetailsResult> {
    description: string;
    withAuth: boolean;
    endpointUrl: (opts: GetServiceRuntimeenvironmentdetailsRequest) => string;
    body: () => undefined;
}

/** WARNING: Autogenerated Code - do not modify! */

declare class ApiClient {
    contextProvider: ApiClientContextProvider;
    forwarding: NorthflankPortForwarder;
    exec: NorthflankExecCommand;
    list: {
        projects: ListProjectsCall;
        addons: ListAddonsCall;
        jobs: ListJobsCall;
        registryCredentials: ListRegistrycredentialsCall;
        domains: ListDomainsCall;
        plans: ListPlansCall;
        regions: ListRegionsCall;
        vcs: ListVcsCall;
        secrets: ListSecretsCall;
        services: ListServicesCall;
        repos: ListReposCall;
        branches: ListBranchesCall;
        volumes: ListVolumesCall;
    };
    create: {
        project: CreateProjectCall;
        addon: CreateAddonCall;
        job: {
            manual: CreateJobManualCall;
            cron: CreateJobCronCall;
        };
        domain: CreateDomainCall;
        secret: CreateSecretCall;
        service: {
            combined: CreateServiceCombinedCall;
            deployment: CreateServiceDeploymentCall;
            build: CreateServiceBuildCall;
        };
        volume: CreateVolumeCall;
    };
    get: {
        project: GetProjectCall;
        addon: GetAddonCall & {
            credentials: GetAddonCredentialsCall;
            types: GetAddonTypesCall;
            version: GetAddonVersionCall;
            backups: GetAddonBackupsCall;
            backup: GetAddonBackupCall & {
                download: GetAddonBackupDownloadCall;
            };
            containers: GetAddonContainersCall;
        };
        job: GetJobCall & {
            runs: GetJobRunsCall;
            run: GetJobRunCall;
            healthChecks: GetJobHealthchecksCall;
            builds: GetJobBuildsCall;
            build: GetJobBuildCall;
            buildArguments: GetJobBuildargumentsCall;
            buildArgumentDetails: GetJobBuildargumentdetailsCall;
            runtimeEnvironment: GetJobRuntimeenvironmentCall;
            runtimeEnvironmentDetails: GetJobRuntimeenvironmentdetailsCall;
            deployment: GetJobDeploymentCall;
            containers: GetJobContainersCall;
            branches: GetJobBranchesCall;
            pullRequests: GetJobPullrequestsCall;
        };
        registryCredentials: GetRegistrycredentialsCall;
        domain: GetDomainCall;
        subdomain: GetSubdomainCall;
        dnsId: GetDnsidCall;
        secret: GetSecretCall;
        secretDetails: GetSecretdetailsCall;
        secretLink: GetSecretlinkCall;
        service: GetServiceCall & {
            deployment: GetServiceDeploymentCall;
            ports: GetServicePortsCall;
            healthChecks: GetServiceHealthchecksCall;
            builds: GetServiceBuildsCall;
            build: GetServiceBuildCall;
            containers: GetServiceContainersCall;
            branches: GetServiceBranchesCall;
            pullRequests: GetServicePullrequestsCall;
            buildArguments: GetServiceBuildargumentsCall;
            buildArgumentDetails: GetServiceBuildargumentdetailsCall;
            runtimeEnvironment: GetServiceRuntimeenvironmentCall;
            runtimeEnvironmentDetails: GetServiceRuntimeenvironmentdetailsCall;
        };
        volume: GetVolumeCall;
    };
    delete: {
        project: DeleteProjectCall;
        addon: DeleteAddonCall;
        backup: DeleteBackupCall;
        job: DeleteJobCall;
        registryCredentials: DeleteRegistrycredentialsCall;
        domain: DeleteDomainCall;
        subdomain: DeleteSubdomainCall;
        secret: DeleteSecretCall;
        secretLink: DeleteSecretlinkCall;
        service: DeleteServiceCall;
        volume: DeleteVolumeCall;
    };
    scale: {
        addon: ScaleAddonCall;
        job: ScaleJobCall;
        service: ScaleServiceCall;
    };
    update: {
        addon: {
            version: UpdateAddonVersionCall;
            networkSettings: UpdateAddonNetworksettingsCall;
            security: UpdateAddonSecurityCall;
        };
        job: {
            settings: UpdateJobSettingsCall;
            healthChecks: UpdateJobHealthchecksCall;
            buildOptions: UpdateJobBuildoptionsCall;
            buildSource: UpdateJobBuildsourceCall;
            cmdOverride: UpdateJobCmdoverrideCall;
            buildArguments: UpdateJobBuildargumentsCall;
            runtimeEnvironment: UpdateJobRuntimeenvironmentCall;
            deployment: UpdateJobDeploymentCall;
        };
        registryCredentials: UpdateRegistrycredentialsCall;
        secret: UpdateSecretCall;
        secretLink: UpdateSecretlinkCall;
        service: {
            deployment: UpdateServiceDeploymentCall;
            ports: UpdateServicePortsCall;
            buildOptions: UpdateServiceBuildoptionsCall;
            buildSource: UpdateServiceBuildsourceCall;
            cmdOverride: UpdateServiceCmdoverrideCall;
            healthChecks: UpdateServiceHealthchecksCall;
            buildArguments: UpdateServiceBuildargumentsCall;
            runtimeEnvironment: UpdateServiceRuntimeenvironmentCall;
        };
        volume: UpdateVolumeCall;
    };
    backup: {
        addon: BackupAddonCall;
    };
    restore: {
        addon: {
            backup: RestoreAddonBackupCall;
        };
    };
    import: {
        addon: {
            backup: ImportAddonBackupCall;
        };
    };
    pause: {
        addon: PauseAddonCall;
        service: PauseServiceCall;
    };
    resume: {
        addon: ResumeAddonCall;
        service: ResumeServiceCall;
    };
    restart: {
        addon: RestartAddonCall;
        service: RestartServiceCall;
    };
    abort: {
        addon: {
            backup: AbortAddonBackupCall;
            restore: AbortAddonRestoreCall;
        };
        job: {
            run: AbortJobRunCall;
            build: AbortJobBuildCall;
        };
        service: {
            build: AbortServiceBuildCall;
        };
    };
    start: {
        job: {
            run: StartJobRunCall;
            build: StartJobBuildCall;
        };
        service: {
            build: StartServiceBuildCall;
        };
    };
    add: {
        registryCredentials: AddRegistrycredentialsCall;
        domain: {
            subdomain: AddDomainSubdomainCall;
        };
    };
    verify: {
        domain: VerifyDomainCall;
        subdomain: VerifySubdomainCall;
    };
    assign: {
        subdomain: {
            service: AssignSubdomainServiceCall;
        };
    };
    unassign: {
        subdomain: UnassignSubdomainCall;
    };
    attach: {
        volume: AttachVolumeCall;
    };
    detach: {
        volume: DetachVolumeCall;
    };
    endpoints: {
        list: {
            projects: ListProjectsEndpoint;
            addons: ListAddonsEndpoint;
            jobs: ListJobsEndpoint;
            registryCredentials: ListRegistrycredentialsEndpoint;
            domains: ListDomainsEndpoint;
            plans: ListPlansEndpoint;
            regions: ListRegionsEndpoint;
            vcs: ListVcsEndpoint;
            secrets: ListSecretsEndpoint;
            services: ListServicesEndpoint;
            repos: ListReposEndpoint;
            branches: ListBranchesEndpoint;
            volumes: ListVolumesEndpoint;
        };
        create: {
            project: CreateProjectEndpoint;
            addon: CreateAddonEndpoint;
            job: {
                manual: CreateJobManualEndpoint;
                cron: CreateJobCronEndpoint;
            };
            domain: CreateDomainEndpoint;
            secret: CreateSecretEndpoint;
            service: {
                combined: CreateServiceCombinedEndpoint;
                deployment: CreateServiceDeploymentEndpoint;
                build: CreateServiceBuildEndpoint;
            };
            volume: CreateVolumeEndpoint;
        };
        get: {
            project: GetProjectEndpoint;
            addon: GetAddonEndpoint & {
                credentials: GetAddonCredentialsEndpoint;
                types: GetAddonTypesEndpoint;
                version: GetAddonVersionEndpoint;
                backups: GetAddonBackupsEndpoint;
                backup: GetAddonBackupEndpoint & {
                    download: GetAddonBackupDownloadEndpoint;
                };
                containers: GetAddonContainersEndpoint;
            };
            job: GetJobEndpoint & {
                runs: GetJobRunsEndpoint;
                run: GetJobRunEndpoint;
                healthChecks: GetJobHealthchecksEndpoint;
                builds: GetJobBuildsEndpoint;
                build: GetJobBuildEndpoint;
                buildArguments: GetJobBuildargumentsEndpoint;
                buildArgumentDetails: GetJobBuildargumentdetailsEndpoint;
                runtimeEnvironment: GetJobRuntimeenvironmentEndpoint;
                runtimeEnvironmentDetails: GetJobRuntimeenvironmentdetailsEndpoint;
                deployment: GetJobDeploymentEndpoint;
                containers: GetJobContainersEndpoint;
                branches: GetJobBranchesEndpoint;
                pullRequests: GetJobPullrequestsEndpoint;
            };
            registryCredentials: GetRegistrycredentialsEndpoint;
            domain: GetDomainEndpoint;
            subdomain: GetSubdomainEndpoint;
            dnsId: GetDnsidEndpoint;
            secret: GetSecretEndpoint;
            secretDetails: GetSecretdetailsEndpoint;
            secretLink: GetSecretlinkEndpoint;
            service: GetServiceEndpoint & {
                deployment: GetServiceDeploymentEndpoint;
                ports: GetServicePortsEndpoint;
                healthChecks: GetServiceHealthchecksEndpoint;
                builds: GetServiceBuildsEndpoint;
                build: GetServiceBuildEndpoint;
                containers: GetServiceContainersEndpoint;
                branches: GetServiceBranchesEndpoint;
                pullRequests: GetServicePullrequestsEndpoint;
                buildArguments: GetServiceBuildargumentsEndpoint;
                buildArgumentDetails: GetServiceBuildargumentdetailsEndpoint;
                runtimeEnvironment: GetServiceRuntimeenvironmentEndpoint;
                runtimeEnvironmentDetails: GetServiceRuntimeenvironmentdetailsEndpoint;
            };
            volume: GetVolumeEndpoint;
        };
        delete: {
            project: DeleteProjectEndpoint;
            addon: DeleteAddonEndpoint;
            backup: DeleteBackupEndpoint;
            job: DeleteJobEndpoint;
            registryCredentials: DeleteRegistrycredentialsEndpoint;
            domain: DeleteDomainEndpoint;
            subdomain: DeleteSubdomainEndpoint;
            secret: DeleteSecretEndpoint;
            secretLink: DeleteSecretlinkEndpoint;
            service: DeleteServiceEndpoint;
            volume: DeleteVolumeEndpoint;
        };
        scale: {
            addon: ScaleAddonEndpoint;
            job: ScaleJobEndpoint;
            service: ScaleServiceEndpoint;
        };
        update: {
            addon: {
                version: UpdateAddonVersionEndpoint;
                networkSettings: UpdateAddonNetworksettingsEndpoint;
                security: UpdateAddonSecurityEndpoint;
            };
            job: {
                settings: UpdateJobSettingsEndpoint;
                healthChecks: UpdateJobHealthchecksEndpoint;
                buildOptions: UpdateJobBuildoptionsEndpoint;
                buildSource: UpdateJobBuildsourceEndpoint;
                cmdOverride: UpdateJobCmdoverrideEndpoint;
                buildArguments: UpdateJobBuildargumentsEndpoint;
                runtimeEnvironment: UpdateJobRuntimeenvironmentEndpoint;
                deployment: UpdateJobDeploymentEndpoint;
            };
            registryCredentials: UpdateRegistrycredentialsEndpoint;
            secret: UpdateSecretEndpoint;
            secretLink: UpdateSecretlinkEndpoint;
            service: {
                deployment: UpdateServiceDeploymentEndpoint;
                ports: UpdateServicePortsEndpoint;
                buildOptions: UpdateServiceBuildoptionsEndpoint;
                buildSource: UpdateServiceBuildsourceEndpoint;
                cmdOverride: UpdateServiceCmdoverrideEndpoint;
                healthChecks: UpdateServiceHealthchecksEndpoint;
                buildArguments: UpdateServiceBuildargumentsEndpoint;
                runtimeEnvironment: UpdateServiceRuntimeenvironmentEndpoint;
            };
            volume: UpdateVolumeEndpoint;
        };
        backup: {
            addon: BackupAddonEndpoint;
        };
        restore: {
            addon: {
                backup: RestoreAddonBackupEndpoint;
            };
        };
        import: {
            addon: {
                backup: ImportAddonBackupEndpoint;
            };
        };
        pause: {
            addon: PauseAddonEndpoint;
            service: PauseServiceEndpoint;
        };
        resume: {
            addon: ResumeAddonEndpoint;
            service: ResumeServiceEndpoint;
        };
        restart: {
            addon: RestartAddonEndpoint;
            service: RestartServiceEndpoint;
        };
        abort: {
            addon: {
                backup: AbortAddonBackupEndpoint;
                restore: AbortAddonRestoreEndpoint;
            };
            job: {
                run: AbortJobRunEndpoint;
                build: AbortJobBuildEndpoint;
            };
            service: {
                build: AbortServiceBuildEndpoint;
            };
        };
        start: {
            job: {
                run: StartJobRunEndpoint;
                build: StartJobBuildEndpoint;
            };
            service: {
                build: StartServiceBuildEndpoint;
            };
        };
        add: {
            registryCredentials: AddRegistrycredentialsEndpoint;
            domain: {
                subdomain: AddDomainSubdomainEndpoint;
            };
        };
        verify: {
            domain: VerifyDomainEndpoint;
            subdomain: VerifySubdomainEndpoint;
        };
        assign: {
            subdomain: {
                service: AssignSubdomainServiceEndpoint;
            };
        };
        unassign: {
            subdomain: UnassignSubdomainEndpoint;
        };
        attach: {
            volume: AttachVolumeEndpoint;
        };
        detach: {
            volume: DetachVolumeEndpoint;
        };
    };
    constructor(contextProvider: ApiClientContextProvider, apiClientOpts?: ApiClientOpts);
    protected baseUrl: () => string | undefined;
}
declare type ApiClientOpts = {
    throwErrorOnHttpErrorCode?: boolean;
    customUserAgent?: string;
};

export { AbortAddonBackupCall, AbortAddonBackupEndpoint, AbortAddonBackupParameters, AbortAddonBackupRequest, AbortAddonBackupResult, AbortAddonRestoreCall, AbortAddonRestoreData, AbortAddonRestoreEndpoint, AbortAddonRestoreParameters, AbortAddonRestoreRequest, AbortAddonRestoreResult, AbortJobBuildCall, AbortJobBuildEndpoint, AbortJobBuildParameters, AbortJobBuildRequest, AbortJobBuildResult, AbortJobRunCall, AbortJobRunEndpoint, AbortJobRunParameters, AbortJobRunRequest, AbortJobRunResult, AbortServiceBuildCall, AbortServiceBuildEndpoint, AbortServiceBuildParameters, AbortServiceBuildRequest, AbortServiceBuildResult, AddDomainSubdomainCall, AddDomainSubdomainData, AddDomainSubdomainEndpoint, AddDomainSubdomainParameters, AddDomainSubdomainRequest, AddDomainSubdomainResult, AddRegistrycredentialsCall, AddRegistrycredentialsData, AddRegistrycredentialsEndpoint, AddRegistrycredentialsRequest, AddRegistrycredentialsResult, ApiCallError, ApiCallResponse, ApiClient, ApiClientContext, ApiClientContextProvider, ApiClientContextWrapper, ApiClientFileContextProvider, ApiClientInMemoryContextProvider, ApiClientOpts, ApiEndpoint, AssignSubdomainServiceCall, AssignSubdomainServiceData, AssignSubdomainServiceEndpoint, AssignSubdomainServiceParameters, AssignSubdomainServiceRequest, AssignSubdomainServiceResult, AttachVolumeCall, AttachVolumeData, AttachVolumeEndpoint, AttachVolumeParameters, AttachVolumeRequest, AttachVolumeResult, BackupAddonCall, BackupAddonData, BackupAddonEndpoint, BackupAddonParameters, BackupAddonRequest, BackupAddonResult, CommandResult, CreateAddonCall, CreateAddonData, CreateAddonEndpoint, CreateAddonParameters, CreateAddonRequest, CreateAddonResult, CreateDomainCall, CreateDomainData, CreateDomainEndpoint, CreateDomainRequest, CreateDomainResult, CreateJobCronCall, CreateJobCronData, CreateJobCronEndpoint, CreateJobCronParameters, CreateJobCronRequest, CreateJobCronResult, CreateJobManualCall, CreateJobManualData, CreateJobManualEndpoint, CreateJobManualParameters, CreateJobManualRequest, CreateJobManualResult, CreateProjectCall, CreateProjectData, CreateProjectEndpoint, CreateProjectRequest, CreateProjectResult, CreateSecretCall, CreateSecretData, CreateSecretEndpoint, CreateSecretParameters, CreateSecretRequest, CreateSecretResult, CreateServiceBuildCall, CreateServiceBuildData, CreateServiceBuildEndpoint, CreateServiceBuildParameters, CreateServiceBuildRequest, CreateServiceBuildResult, CreateServiceCombinedCall, CreateServiceCombinedData, CreateServiceCombinedEndpoint, CreateServiceCombinedParameters, CreateServiceCombinedRequest, CreateServiceCombinedResult, CreateServiceDeploymentCall, CreateServiceDeploymentData, CreateServiceDeploymentEndpoint, CreateServiceDeploymentParameters, CreateServiceDeploymentRequest, CreateServiceDeploymentResult, CreateVolumeCall, CreateVolumeData, CreateVolumeEndpoint, CreateVolumeParameters, CreateVolumeRequest, CreateVolumeResult, DeleteAddonCall, DeleteAddonEndpoint, DeleteAddonParameters, DeleteAddonRequest, DeleteAddonResult, DeleteApiEndpoint, DeleteBackupCall, DeleteBackupEndpoint, DeleteBackupParameters, DeleteBackupRequest, DeleteBackupResult, DeleteDomainCall, DeleteDomainEndpoint, DeleteDomainParameters, DeleteDomainRequest, DeleteDomainResult, DeleteJobCall, DeleteJobEndpoint, DeleteJobParameters, DeleteJobRequest, DeleteJobResult, DeleteProjectCall, DeleteProjectEndpoint, DeleteProjectParameters, DeleteProjectRequest, DeleteProjectResult, DeleteRegistrycredentialsCall, DeleteRegistrycredentialsEndpoint, DeleteRegistrycredentialsParameters, DeleteRegistrycredentialsRequest, DeleteRegistrycredentialsResult, DeleteSecretCall, DeleteSecretEndpoint, DeleteSecretParameters, DeleteSecretRequest, DeleteSecretResult, DeleteSecretlinkCall, DeleteSecretlinkEndpoint, DeleteSecretlinkParameters, DeleteSecretlinkRequest, DeleteSecretlinkResult, DeleteServiceCall, DeleteServiceEndpoint, DeleteServiceParameters, DeleteServiceRequest, DeleteServiceResult, DeleteSubdomainCall, DeleteSubdomainEndpoint, DeleteSubdomainParameters, DeleteSubdomainRequest, DeleteSubdomainResult, DeleteVolumeCall, DeleteVolumeEndpoint, DeleteVolumeParameters, DeleteVolumeRequest, DeleteVolumeResult, DetachVolumeCall, DetachVolumeData, DetachVolumeEndpoint, DetachVolumeParameters, DetachVolumeRequest, DetachVolumeResult, ExecCommand, ExecCommandData, ExecCommandStandard, ExecSessionData, GetAddonBackupCall, GetAddonBackupDownloadCall, GetAddonBackupDownloadEndpoint, GetAddonBackupDownloadParameters, GetAddonBackupDownloadRequest, GetAddonBackupDownloadResult, GetAddonBackupEndpoint, GetAddonBackupParameters, GetAddonBackupRequest, GetAddonBackupResult, GetAddonBackupsCall, GetAddonBackupsEndpoint, GetAddonBackupsOptions, GetAddonBackupsParameters, GetAddonBackupsRequest, GetAddonBackupsResult, GetAddonCall, GetAddonContainersCall, GetAddonContainersEndpoint, GetAddonContainersOptions, GetAddonContainersParameters, GetAddonContainersRequest, GetAddonContainersResult, GetAddonCredentialsCall, GetAddonCredentialsEndpoint, GetAddonCredentialsParameters, GetAddonCredentialsRequest, GetAddonCredentialsResult, GetAddonEndpoint, GetAddonParameters, GetAddonRequest, GetAddonResult, GetAddonTypesCall, GetAddonTypesEndpoint, GetAddonTypesRequest, GetAddonTypesResult, GetAddonVersionCall, GetAddonVersionEndpoint, GetAddonVersionParameters, GetAddonVersionRequest, GetAddonVersionResult, GetApiEndpoint, GetDnsidCall, GetDnsidEndpoint, GetDnsidRequest, GetDnsidResult, GetDomainCall, GetDomainEndpoint, GetDomainParameters, GetDomainRequest, GetDomainResult, GetJobBranchesCall, GetJobBranchesEndpoint, GetJobBranchesOptions, GetJobBranchesParameters, GetJobBranchesRequest, GetJobBranchesResult, GetJobBuildCall, GetJobBuildEndpoint, GetJobBuildParameters, GetJobBuildRequest, GetJobBuildResult, GetJobBuildargumentdetailsCall, GetJobBuildargumentdetailsEndpoint, GetJobBuildargumentdetailsParameters, GetJobBuildargumentdetailsRequest, GetJobBuildargumentdetailsResult, GetJobBuildargumentsCall, GetJobBuildargumentsEndpoint, GetJobBuildargumentsOptions, GetJobBuildargumentsParameters, GetJobBuildargumentsRequest, GetJobBuildargumentsResult, GetJobBuildsCall, GetJobBuildsEndpoint, GetJobBuildsOptions, GetJobBuildsParameters, GetJobBuildsRequest, GetJobBuildsResult, GetJobCall, GetJobContainersCall, GetJobContainersEndpoint, GetJobContainersOptions, GetJobContainersParameters, GetJobContainersRequest, GetJobContainersResult, GetJobDeploymentCall, GetJobDeploymentEndpoint, GetJobDeploymentParameters, GetJobDeploymentRequest, GetJobDeploymentResult, GetJobEndpoint, GetJobHealthchecksCall, GetJobHealthchecksEndpoint, GetJobHealthchecksParameters, GetJobHealthchecksRequest, GetJobHealthchecksResult, GetJobParameters, GetJobPullrequestsCall, GetJobPullrequestsEndpoint, GetJobPullrequestsOptions, GetJobPullrequestsParameters, GetJobPullrequestsRequest, GetJobPullrequestsResult, GetJobRequest, GetJobResult, GetJobRunCall, GetJobRunEndpoint, GetJobRunParameters, GetJobRunRequest, GetJobRunResult, GetJobRunsCall, GetJobRunsEndpoint, GetJobRunsOptions, GetJobRunsParameters, GetJobRunsRequest, GetJobRunsResult, GetJobRuntimeenvironmentCall, GetJobRuntimeenvironmentEndpoint, GetJobRuntimeenvironmentOptions, GetJobRuntimeenvironmentParameters, GetJobRuntimeenvironmentRequest, GetJobRuntimeenvironmentResult, GetJobRuntimeenvironmentdetailsCall, GetJobRuntimeenvironmentdetailsEndpoint, GetJobRuntimeenvironmentdetailsParameters, GetJobRuntimeenvironmentdetailsRequest, GetJobRuntimeenvironmentdetailsResult, GetProjectCall, GetProjectEndpoint, GetProjectParameters, GetProjectRequest, GetProjectResult, GetRegistrycredentialsCall, GetRegistrycredentialsEndpoint, GetRegistrycredentialsParameters, GetRegistrycredentialsRequest, GetRegistrycredentialsResult, GetSecretCall, GetSecretEndpoint, GetSecretOptions, GetSecretParameters, GetSecretRequest, GetSecretResult, GetSecretdetailsCall, GetSecretdetailsEndpoint, GetSecretdetailsParameters, GetSecretdetailsRequest, GetSecretdetailsResult, GetSecretlinkCall, GetSecretlinkEndpoint, GetSecretlinkParameters, GetSecretlinkRequest, GetSecretlinkResult, GetServiceBranchesCall, GetServiceBranchesEndpoint, GetServiceBranchesOptions, GetServiceBranchesParameters, GetServiceBranchesRequest, GetServiceBranchesResult, GetServiceBuildCall, GetServiceBuildEndpoint, GetServiceBuildParameters, GetServiceBuildRequest, GetServiceBuildResult, GetServiceBuildargumentdetailsCall, GetServiceBuildargumentdetailsEndpoint, GetServiceBuildargumentdetailsParameters, GetServiceBuildargumentdetailsRequest, GetServiceBuildargumentdetailsResult, GetServiceBuildargumentsCall, GetServiceBuildargumentsEndpoint, GetServiceBuildargumentsOptions, GetServiceBuildargumentsParameters, GetServiceBuildargumentsRequest, GetServiceBuildargumentsResult, GetServiceBuildsCall, GetServiceBuildsEndpoint, GetServiceBuildsOptions, GetServiceBuildsParameters, GetServiceBuildsRequest, GetServiceBuildsResult, GetServiceCall, GetServiceContainersCall, GetServiceContainersEndpoint, GetServiceContainersOptions, GetServiceContainersParameters, GetServiceContainersRequest, GetServiceContainersResult, GetServiceDeploymentCall, GetServiceDeploymentEndpoint, GetServiceDeploymentParameters, GetServiceDeploymentRequest, GetServiceDeploymentResult, GetServiceEndpoint, GetServiceHealthchecksCall, GetServiceHealthchecksEndpoint, GetServiceHealthchecksParameters, GetServiceHealthchecksRequest, GetServiceHealthchecksResult, GetServiceParameters, GetServicePortsCall, GetServicePortsEndpoint, GetServicePortsParameters, GetServicePortsRequest, GetServicePortsResult, GetServicePullrequestsCall, GetServicePullrequestsEndpoint, GetServicePullrequestsOptions, GetServicePullrequestsParameters, GetServicePullrequestsRequest, GetServicePullrequestsResult, GetServiceRequest, GetServiceResult, GetServiceRuntimeenvironmentCall, GetServiceRuntimeenvironmentEndpoint, GetServiceRuntimeenvironmentOptions, GetServiceRuntimeenvironmentParameters, GetServiceRuntimeenvironmentRequest, GetServiceRuntimeenvironmentResult, GetServiceRuntimeenvironmentdetailsCall, GetServiceRuntimeenvironmentdetailsEndpoint, GetServiceRuntimeenvironmentdetailsParameters, GetServiceRuntimeenvironmentdetailsRequest, GetServiceRuntimeenvironmentdetailsResult, GetSubdomainCall, GetSubdomainEndpoint, GetSubdomainParameters, GetSubdomainRequest, GetSubdomainResult, GetVolumeCall, GetVolumeEndpoint, GetVolumeParameters, GetVolumeRequest, GetVolumeResult, ImportAddonBackupCall, ImportAddonBackupData, ImportAddonBackupEndpoint, ImportAddonBackupParameters, ImportAddonBackupRequest, ImportAddonBackupResult, ListAddonsCall, ListAddonsEndpoint, ListAddonsOptions, ListAddonsParameters, ListAddonsRequest, ListAddonsResult, ListBranchesCall, ListBranchesEndpoint, ListBranchesOptions, ListBranchesParameters, ListBranchesRequest, ListBranchesResult, ListDomainsCall, ListDomainsEndpoint, ListDomainsOptions, ListDomainsRequest, ListDomainsResult, ListJobsCall, ListJobsEndpoint, ListJobsOptions, ListJobsParameters, ListJobsRequest, ListJobsResult, ListPlansCall, ListPlansEndpoint, ListPlansRequest, ListPlansResult, ListProjectsCall, ListProjectsEndpoint, ListProjectsOptions, ListProjectsRequest, ListProjectsResult, ListRegionsCall, ListRegionsEndpoint, ListRegionsRequest, ListRegionsResult, ListRegistrycredentialsCall, ListRegistrycredentialsEndpoint, ListRegistrycredentialsOptions, ListRegistrycredentialsRequest, ListRegistrycredentialsResult, ListReposCall, ListReposEndpoint, ListReposOptions, ListReposRequest, ListReposResult, ListSecretsCall, ListSecretsEndpoint, ListSecretsOptions, ListSecretsParameters, ListSecretsRequest, ListSecretsResult, ListServicesCall, ListServicesEndpoint, ListServicesOptions, ListServicesParameters, ListServicesRequest, ListServicesResult, ListVcsCall, ListVcsEndpoint, ListVcsRequest, ListVcsResult, ListVolumesCall, ListVolumesEndpoint, ListVolumesParameters, ListVolumesRequest, ListVolumesResult, NorthflankExecCommand, NorthflankPortForwarder, PauseAddonCall, PauseAddonEndpoint, PauseAddonParameters, PauseAddonRequest, PauseAddonResult, PauseServiceCall, PauseServiceEndpoint, PauseServiceParameters, PauseServiceRequest, PauseServiceResult, PortForwardingInfo, PortForwardingResult, PostApiEndpoint, RestartAddonCall, RestartAddonEndpoint, RestartAddonParameters, RestartAddonRequest, RestartAddonResult, RestartServiceCall, RestartServiceEndpoint, RestartServiceParameters, RestartServiceRequest, RestartServiceResult, RestoreAddonBackupCall, RestoreAddonBackupEndpoint, RestoreAddonBackupParameters, RestoreAddonBackupRequest, RestoreAddonBackupResult, ResumeAddonCall, ResumeAddonEndpoint, ResumeAddonParameters, ResumeAddonRequest, ResumeAddonResult, ResumeServiceCall, ResumeServiceData, ResumeServiceEndpoint, ResumeServiceParameters, ResumeServiceRequest, ResumeServiceResult, ScaleAddonCall, ScaleAddonData, ScaleAddonEndpoint, ScaleAddonParameters, ScaleAddonRequest, ScaleAddonResult, ScaleJobCall, ScaleJobData, ScaleJobEndpoint, ScaleJobParameters, ScaleJobRequest, ScaleJobResult, ScaleServiceCall, ScaleServiceData, ScaleServiceEndpoint, ScaleServiceParameters, ScaleServiceRequest, ScaleServiceResult, StartJobBuildCall, StartJobBuildData, StartJobBuildEndpoint, StartJobBuildParameters, StartJobBuildRequest, StartJobBuildResult, StartJobRunCall, StartJobRunData, StartJobRunEndpoint, StartJobRunParameters, StartJobRunRequest, StartJobRunResult, StartServiceBuildCall, StartServiceBuildData, StartServiceBuildEndpoint, StartServiceBuildParameters, StartServiceBuildRequest, StartServiceBuildResult, UnassignSubdomainCall, UnassignSubdomainEndpoint, UnassignSubdomainParameters, UnassignSubdomainRequest, UnassignSubdomainResult, UpdateAddonNetworksettingsCall, UpdateAddonNetworksettingsData, UpdateAddonNetworksettingsEndpoint, UpdateAddonNetworksettingsParameters, UpdateAddonNetworksettingsRequest, UpdateAddonNetworksettingsResult, UpdateAddonSecurityCall, UpdateAddonSecurityData, UpdateAddonSecurityEndpoint, UpdateAddonSecurityParameters, UpdateAddonSecurityRequest, UpdateAddonSecurityResult, UpdateAddonVersionCall, UpdateAddonVersionData, UpdateAddonVersionEndpoint, UpdateAddonVersionParameters, UpdateAddonVersionRequest, UpdateAddonVersionResult, UpdateJobBuildargumentsCall, UpdateJobBuildargumentsData, UpdateJobBuildargumentsEndpoint, UpdateJobBuildargumentsParameters, UpdateJobBuildargumentsRequest, UpdateJobBuildargumentsResult, UpdateJobBuildoptionsCall, UpdateJobBuildoptionsData, UpdateJobBuildoptionsEndpoint, UpdateJobBuildoptionsParameters, UpdateJobBuildoptionsRequest, UpdateJobBuildoptionsResult, UpdateJobBuildsourceCall, UpdateJobBuildsourceData, UpdateJobBuildsourceEndpoint, UpdateJobBuildsourceParameters, UpdateJobBuildsourceRequest, UpdateJobBuildsourceResult, UpdateJobCmdoverrideCall, UpdateJobCmdoverrideData, UpdateJobCmdoverrideEndpoint, UpdateJobCmdoverrideParameters, UpdateJobCmdoverrideRequest, UpdateJobCmdoverrideResult, UpdateJobDeploymentCall, UpdateJobDeploymentData, UpdateJobDeploymentEndpoint, UpdateJobDeploymentParameters, UpdateJobDeploymentRequest, UpdateJobDeploymentResult, UpdateJobHealthchecksCall, UpdateJobHealthchecksData, UpdateJobHealthchecksEndpoint, UpdateJobHealthchecksParameters, UpdateJobHealthchecksRequest, UpdateJobHealthchecksResult, UpdateJobRuntimeenvironmentCall, UpdateJobRuntimeenvironmentData, UpdateJobRuntimeenvironmentEndpoint, UpdateJobRuntimeenvironmentParameters, UpdateJobRuntimeenvironmentRequest, UpdateJobRuntimeenvironmentResult, UpdateJobSettingsCall, UpdateJobSettingsData, UpdateJobSettingsEndpoint, UpdateJobSettingsParameters, UpdateJobSettingsRequest, UpdateJobSettingsResult, UpdateRegistrycredentialsCall, UpdateRegistrycredentialsData, UpdateRegistrycredentialsEndpoint, UpdateRegistrycredentialsParameters, UpdateRegistrycredentialsRequest, UpdateRegistrycredentialsResult, UpdateSecretCall, UpdateSecretData, UpdateSecretEndpoint, UpdateSecretParameters, UpdateSecretRequest, UpdateSecretResult, UpdateSecretlinkCall, UpdateSecretlinkData, UpdateSecretlinkEndpoint, UpdateSecretlinkParameters, UpdateSecretlinkRequest, UpdateSecretlinkResult, UpdateServiceBuildargumentsCall, UpdateServiceBuildargumentsData, UpdateServiceBuildargumentsEndpoint, UpdateServiceBuildargumentsParameters, UpdateServiceBuildargumentsRequest, UpdateServiceBuildargumentsResult, UpdateServiceBuildoptionsCall, UpdateServiceBuildoptionsData, UpdateServiceBuildoptionsEndpoint, UpdateServiceBuildoptionsParameters, UpdateServiceBuildoptionsRequest, UpdateServiceBuildoptionsResult, UpdateServiceBuildsourceCall, UpdateServiceBuildsourceData, UpdateServiceBuildsourceEndpoint, UpdateServiceBuildsourceParameters, UpdateServiceBuildsourceRequest, UpdateServiceBuildsourceResult, UpdateServiceCmdoverrideCall, UpdateServiceCmdoverrideData, UpdateServiceCmdoverrideEndpoint, UpdateServiceCmdoverrideParameters, UpdateServiceCmdoverrideRequest, UpdateServiceCmdoverrideResult, UpdateServiceDeploymentCall, UpdateServiceDeploymentData, UpdateServiceDeploymentEndpoint, UpdateServiceDeploymentParameters, UpdateServiceDeploymentRequest, UpdateServiceDeploymentResult, UpdateServiceHealthchecksCall, UpdateServiceHealthchecksData, UpdateServiceHealthchecksEndpoint, UpdateServiceHealthchecksParameters, UpdateServiceHealthchecksRequest, UpdateServiceHealthchecksResult, UpdateServicePortsCall, UpdateServicePortsData, UpdateServicePortsEndpoint, UpdateServicePortsParameters, UpdateServicePortsRequest, UpdateServicePortsResult, UpdateServiceRuntimeenvironmentCall, UpdateServiceRuntimeenvironmentData, UpdateServiceRuntimeenvironmentEndpoint, UpdateServiceRuntimeenvironmentParameters, UpdateServiceRuntimeenvironmentRequest, UpdateServiceRuntimeenvironmentResult, UpdateVolumeCall, UpdateVolumeData, UpdateVolumeEndpoint, UpdateVolumeParameters, UpdateVolumeRequest, UpdateVolumeResult, VerifyDomainCall, VerifyDomainEndpoint, VerifyDomainParameters, VerifyDomainRequest, VerifyDomainResult, VerifySubdomainCall, VerifySubdomainEndpoint, VerifySubdomainParameters, VerifySubdomainRequest, VerifySubdomainResult };
